TITLE: Creating FastAPI Instance
DESCRIPTION: This Python code creates an instance of the FastAPI class, which serves as the main entry point for building the API. The 'app' variable is used to define API endpoints and configure the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
app
```

----------------------------------------

TITLE: Importing FastAPI Class
DESCRIPTION: This snippet imports the FastAPI class, which provides all the functionality needed to create an API. FastAPI inherits directly from Starlette, allowing the use of Starlette's functionalities as well.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Defining a Basic Endpoint with FastAPI
DESCRIPTION: This code snippet defines a basic FastAPI application with a single endpoint that returns a JSON response. It imports the FastAPI class, creates an instance of it, and defines a route using a decorator.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function
DESCRIPTION: Defines an asynchronous path operation function that returns a dictionary. This function is called when a GET request is made to the `/` path, and its return value is automatically converted to JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Initializing FastAPI App and Defining Basic Routes
DESCRIPTION: This code initializes a FastAPI application and defines two GET routes: one for the root path ('/') and another for retrieving items by ID ('/items/{item_id}'). It demonstrates how to use type hints for parameter validation and how to return JSON responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/az/docs/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI App
DESCRIPTION: This code snippet initializes a FastAPI application, defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint takes an integer item_id as a path parameter and an optional string q as a query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/it/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from typing import Optional

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: str = Optional[None]):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining a GET Path Operation
DESCRIPTION: This snippet demonstrates how to define a GET path operation using the `@app.get()` decorator in FastAPI. The decorator associates the following asynchronous Python function with the specified URL path (`/`) and the HTTP GET method, making it responsible for handling incoming GET requests to that route.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a basic FastAPI application
DESCRIPTION: This code defines a basic FastAPI application with two endpoints: `/` which returns a simple JSON response, and `/items/{item_id}` which takes an item ID as a path parameter and an optional query parameter `q`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: str = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: Creates a basic FastAPI application with two endpoints: `/` (root) and `/items/{item_id}`. The `/items/{item_id}` endpoint takes an item ID and an optional query parameter `q`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Initializing FastAPI Application in Python
DESCRIPTION: This code snippet initializes a basic FastAPI application and defines a single endpoint that returns a JSON response. It imports the FastAPI class, creates an instance of it, and defines a path operation function decorated with `@app.get("/")` to handle GET requests to the root path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It downloads and installs the latest version of FastAPI from the Python Package Index (PyPI).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with a single endpoint that returns a JSON response. It imports the FastAPI class, creates an instance of it, and defines a path operation decorator for the root endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining Python Types and Pydantic Models in FastAPI
DESCRIPTION: This snippet demonstrates the use of standard Python type declarations for function parameters and the definition of a Pydantic BaseModel for data validation and serialization. It highlights how FastAPI leverages these types for automatic data handling and enhanced editor support.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Sub-dependencies with yield
DESCRIPTION: This code demonstrates how to use sub-dependencies with `yield`. FastAPI ensures that the 'exit code' of each dependency using `yield` is executed in the correct order. The example shows a dependency chain where `dependency_c` depends on `dependency_b`, which depends on `dependency_a`, and all of them use `yield`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_2

LANGUAGE: python
CODE:
```
async def dependency_a():
    dep_a = generate_dep_a()
    try:
        yield dep_a
    finally:
        close_dep_a(dep_a)


async def dependency_b(dep_a=Depends(dependency_a)):
    dep_b = generate_dep_b()
    try:
        yield dep_b
    finally:
        close_dep_b(dep_b)


async def dependency_c(dep_b=Depends(dependency_b)):
    dep_c = generate_dep_c()
    try:
        yield dep_c
    finally:
        close_dep_c(dep_c)
```

----------------------------------------

TITLE: Creating a SQLModel Session Dependency in FastAPI
DESCRIPTION: This snippet defines a FastAPI dependency that provides a new SQLModel `Session` for each request using `yield`, ensuring proper session management. It also creates an `Annotated` type alias, `SessionDep`, to simplify its use in route functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: Python
CODE:
```
def get_session():
    with Session(engine) as session:
        yield session

SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: Creating a basic FastAPI application
DESCRIPTION: This code creates a basic FastAPI application with two endpoints: `/` which returns a simple greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter. It demonstrates the basic structure of a FastAPI application, including importing FastAPI, creating an app instance, and defining routes using decorators.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Database Dependency with yield
DESCRIPTION: This code snippet demonstrates how to create a database session as a dependency using `yield`. The session is created before the request and closed after the response is sent. The session object is injected into the path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Initializing FastAPI App with Async Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two asynchronous GET endpoints using `async def`.  It demonstrates how to define routes for the root path ('/') and '/items/{item_id}' with a path parameter and an optional query parameter.  It returns JSON responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two routes: a root route ('/') that returns a greeting and an '/items/{item_id}' route that returns an item ID and an optional query parameter. It showcases the basic structure of a FastAPI application using synchronous functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Importing FastAPI Class
DESCRIPTION: This snippet demonstrates how to import the `FastAPI` class from the `fastapi` library. This class is the core component for building a FastAPI application, providing all the necessary functionality to define API routes and handle requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application with async def
DESCRIPTION: This Python code defines a simple FastAPI application with two routes: a root route ('/') that returns a greeting and an '/items/{item_id}' route that returns an item ID and an optional query parameter. It showcases the basic structure of a FastAPI application using asynchronous functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Installing FastAPI
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It fetches and installs the latest version of FastAPI and its dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: Install FastAPI using pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It downloads and installs FastAPI and its dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This snippet shows how to install the FastAPI library using pip, the Python package installer. It's a prerequisite for using FastAPI in any Python project.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/yo/docs/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: Defining a GET route in FastAPI
DESCRIPTION: This snippet shows how to define a GET route in FastAPI using the @app.get decorator. It demonstrates the similarity in syntax to the Requests library, where HTTP methods are used directly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
     return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the `item_id` parameter will be passed to the function in the argument `item_id`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Importing FastAPI Class (Python)
DESCRIPTION: This snippet demonstrates how to import the `FastAPI` class from the `fastapi` library, which is the foundational step for creating a new FastAPI application. It is a prerequisite for defining routes, middleware, and other application components.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/fastapi.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet shows how to create an instance of the FastAPI class, which serves as the main entry point for defining API endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Defining a Path Operation in FastAPI
DESCRIPTION: This snippet shows how to define a GET path operation in FastAPI. It demonstrates the use of the `@app.get` decorator to associate a function with a specific URL path, returning a simple JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining a Path Operation in FastAPI
DESCRIPTION: This snippet shows how to define a simple API endpoint (path operation) in FastAPI using the @app.get decorator. It demonstrates the basic structure for handling GET requests at a specific URL and returning a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World!"}
```

----------------------------------------

TITLE: Define Path Operation Decorator
DESCRIPTION: Defines a path operation using the `@app.get()` decorator, which associates a function with a specific HTTP method (GET) and path (`/`). This decorator tells FastAPI to handle requests to the specified path with the decorated function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Defining Separate Input and Output User Models
DESCRIPTION: This snippet defines two Pydantic models: `UserIn` for input, which includes a `password` field, and `UserOut` for output, which explicitly excludes the `password` field. This separation is a best practice for security, ensuring that sensitive data like passwords are not inadvertently exposed in API responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/response-model.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

class UserIn(BaseModel):
    username: str
    password: str
    email: Union[str, None] = None
    full_name: Union[str, None] = None

class UserOut(BaseModel):
    username: str
    email: Union[str, None] = None
    full_name: Union[str, None] = None

app = FastAPI()

@app.post("/user/", response_model=UserOut)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This Python code snippet shows how to create an instance of the FastAPI class, which serves as the main entry point for building all APIs. The 'app' variable will be an instance of the FastAPI class.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Defining a Common Dependency Function (Python)
DESCRIPTION: This snippet defines an asynchronous function `common_parameters` that serves as a dependency. It accepts optional query parameters `q` (string), `skip` (integer, default 0), and `limit` (integer, default 100), then returns them as a dictionary. This function encapsulates reusable logic for handling common request parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Creating a Hero with HeroCreate and Returning HeroPublic in FastAPI
DESCRIPTION: This FastAPI endpoint handles the creation of new heroes. It accepts a `HeroCreate` model for input validation and uses `response_model=HeroPublic` to ensure the returned data is validated and serialized according to the public model, even though the internal `Hero` table model is returned.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_15

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter
from sqlmodel import Session, select
from typing import List

# Assuming Hero, HeroCreate, HeroPublic are defined
# class Hero(HeroBase, table=True):
#     id: Optional[int] = Field(default=None, primary_key=True)

router = APIRouter()

@router.post("/heroes/", response_model=HeroPublic)
def create_hero(*, session: Session, hero: HeroCreate):
    db_hero = Hero.from_orm(hero)
    session.add(db_hero)
    session.commit()
    session.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Initializing FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create an instance of the FastAPI class, which serves as the entry point for building and interacting with the API. The 'app' variable is used by Uvicorn to run the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Importing Depends
DESCRIPTION: Imports the Depends class from FastAPI, which is used to declare dependencies in route operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI
```

----------------------------------------

TITLE: Einfache FastAPI-Anwendung
DESCRIPTION: Erstellt eine minimale FastAPI-Anwendung, die beim Aufruf des Root-Pfads eine JSON-Response zurückgibt.  Diese Anwendung demonstriert die grundlegende Struktur einer FastAPI-Anwendung und wie ein einfacher Endpunkt definiert wird.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet shows how to import the FastAPI class from the fastapi package. This is the first step in creating a FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet creates an instance of the FastAPI class, which serves as the main entry point for building the API. The 'app' variable is used to define routes and handle incoming requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs the FastAPI framework along with its standard recommended dependencies, such as Uvicorn for serving applications and Pydantic for data validation. The `[standard]` extra ensures a complete setup for typical FastAPI development, making it ready for immediate use.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This command installs Uvicorn, an ASGI server, using pip. Uvicorn is required to run FastAPI applications. The "[standard]" extra installs commonly used Uvicorn dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Defining a GET path operation
DESCRIPTION: This code snippet demonstrates how to define a GET path operation using the @app.get decorator. It associates the function with the root path ('/') and the HTTP GET method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This snippet defines a basic FastAPI application with two GET endpoints: a root endpoint and an item endpoint that accepts a path parameter and an optional query parameter. It demonstrates the fundamental structure of a FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Importing FastAPI Class
DESCRIPTION: This Python code imports the FastAPI class, which is essential for creating a FastAPI application. The FastAPI class provides the core functionality for defining API endpoints, handling requests, and generating API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
FastAPI
```

----------------------------------------

TITLE: Pydantic Model Definition with Type Annotations (Python 3.8+)
DESCRIPTION: This code snippet demonstrates how to define a Pydantic model with type annotations in Python 3.8+. It defines a class User with attributes id, name, signup_ts, and friends, specifying their types. Pydantic uses these type annotations for data validation and conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(repr(user.signup_ts))
print(user.friends)
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application in Python
DESCRIPTION: This snippet initializes a FastAPI application and defines a root endpoint (`/`) that returns a JSON response. It demonstrates the minimal code required to create a functional web API with FastAPI, serving a simple 'Hello World' message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code demonstrates how to create a simple FastAPI application with two routes: a root route that returns a "Hello World" message and an items route that returns an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code creates a basic FastAPI application with two endpoints: a root endpoint that returns a simple JSON response and an items endpoint that accepts an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/hu/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer as a Dependency in FastAPI
DESCRIPTION: Integrates the `oauth2_scheme` as a dependency in a FastAPI path operation. This automatically handles the extraction and validation of the Bearer token from the `Authorization` header, providing the token string to the function parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Define Separate Input and Output Models
DESCRIPTION: Defines separate Pydantic models for input (`UserIn`) and output (`UserOut`), where the output model excludes the password field to prevent it from being exposed in the API response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, EmailStr


class UserIn(BaseModel):
    email: EmailStr
    password: str
    age: Optional[int] = None


class UserOut(BaseModel):
    email: EmailStr
    age: Optional[int] = None
```

----------------------------------------

TITLE: Verify required scopes in FastAPI
DESCRIPTION: This snippet demonstrates how to verify that all required scopes for a dependency and its dependents (including route operations) are included in the scopes provided by the received token. It uses `security_scopes.scopes` to check if all required scopes are present and raises an `HTTPException` if any scope is missing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, Security, SecurityScopes
from pydantic import BaseModel, ValidationError

app = FastAPI()


class TokenData(BaseModel):
    username: str | None = None
    scopes: list[str] = []


async def oauth2_scheme(token: str):
    return token


async def get_current_user(security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)):
    if security_scopes.scopes:
        raise HTTPException(status_code=403, detail="Not enough permissions", headers={
            "WWW-Authenticate": f"Bearer scope={security_scopes.scope_str}"})
    try:
        username = "someuser"
        scopes = ["myscope"]
        token_data = TokenData(username=username, scopes=scopes)
    except ValidationError:
        raise HTTPException(status_code=403, detail="Invalid token", headers={
            "WWW-Authenticate": f"Bearer scope={security_scopes.scope_str}"})
```

LANGUAGE: python
CODE:
```
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            raise HTTPException(status_code=403, detail="Not enough permissions", headers={
                "WWW-Authenticate": f"Bearer scope={security_scopes.scope_str}"})
```

----------------------------------------

TITLE: Defining a Route with GET Operation
DESCRIPTION: This code snippet demonstrates how to define a route using the @app.get() decorator. This decorator associates a function with a specific URL path ('/') and the HTTP GET operation, indicating that the function should handle GET requests to that path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: python
CODE:
```
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Returning Input Data with Output Model in FastAPI
DESCRIPTION: This example shows how to return the input data (which may contain sensitive information) from the path operation function while using a separate output model to filter the response. FastAPI automatically filters the data based on the `response_model`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.post("/users/", response_model=UserOut)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: HeroPublic Data Model Definition
DESCRIPTION: Defines the `HeroPublic` data model, inheriting from `HeroBase` and including the `id` field. This model is used for API responses to clients, excluding sensitive information like `secret_name`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_11

LANGUAGE: Python
CODE:
```
class HeroPublic(HeroBase):
    id: int
```

----------------------------------------

TITLE: Declaring Async Path Operation Function (FastAPI, Python)
DESCRIPTION: This example shows how to define a FastAPI path operation function using `async def` when it needs to interact with an asynchronous third-party library via `await`. Using `async def` allows FastAPI to optimize performance by releasing the event loop while waiting for I/O-bound operations to complete, improving concurrency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Defining an Asynchronous Route Function in FastAPI
DESCRIPTION: Defines an asynchronous route function using `async def` and the `@app.get` decorator to handle GET requests to the `/` path. Returns a dictionary that FastAPI automatically converts to JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating an async FastAPI application
DESCRIPTION: This code creates a basic FastAPI application with asynchronous route handlers using `async def`. The endpoints `/` and `/items/{item_id}` are defined as asynchronous functions.  This is useful for I/O-bound operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining Path Operation Decorator with FastAPI
DESCRIPTION: This code snippet demonstrates how to define a path operation decorator using `@app.get("/")` in FastAPI. It associates the function below with handling GET requests to the root path ("/").
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Instantiating FastAPI Application
DESCRIPTION: This line creates an instance of the `FastAPI` class, typically named `app`. This `app` object is the main entry point for defining all your API's routes and operations, and it's the object referenced by ASGI servers like Uvicorn to run your application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Importing Depends for FastAPI Dependencies
DESCRIPTION: This line imports `FastAPI`, `Depends`, and `Query` from the `fastapi` module. `Depends` is a crucial utility in FastAPI for declaring dependencies, allowing functions to receive injected values from other dependency functions or directly from request parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends, Query
```

----------------------------------------

TITLE: Defining a GET Path Operation Decorator
DESCRIPTION: Defines a path operation decorator using `@app.get("/")` to associate the function below with the root path ("/") and the HTTP GET method. This tells FastAPI that the function should handle requests to that specific path and method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Defining a GET path operation in FastAPI
DESCRIPTION: This snippet shows how to define a GET path operation in FastAPI using the `@app.get()` decorator. It demonstrates how to create an endpoint that returns a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Define Async Path Operation Function
DESCRIPTION: This code snippet defines an asynchronous path operation function `async def root():` that will be called by FastAPI when it receives a GET request to the `/` URL. It returns a dictionary that FastAPI automatically converts to JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining a Path Operation Decorator
DESCRIPTION: This code snippet defines a path operation using the `@app.get("/")` decorator. This decorator tells FastAPI that the function immediately following it is responsible for handling GET requests to the root path ('/').
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Declaring a Dependency in a Path Operation Function
DESCRIPTION: Demonstrates how to declare a dependency in a path operation function using Depends. The dependency function (common_parameters) is passed to Depends, and FastAPI automatically calls the dependency and injects the result into the path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI

app = FastAPI()


async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}


@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function
DESCRIPTION: Defines an asynchronous path operation function named `root` that returns a dictionary. This function is decorated with `@app.get("/")`, making it the handler for GET requests to the root path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating FastAPI Instance
DESCRIPTION: This snippet creates an instance of the FastAPI class, assigning it to the variable app. This app instance serves as the main entry point for creating and interacting with the API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Initializing Main FastAPI Application
DESCRIPTION: This snippet initializes the main FastAPI application (app) and defines a basic path operation at /main. This application serves as the primary entry point for the overall service. It requires the FastAPI class from the fastapi library.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/main")
async def read_main():
    return {"message": "Hello from main app"}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two HTTP GET endpoints. The root endpoint ('/') returns a basic 'Hello: World' JSON response, while the '/items/{item_id}' endpoint demonstrates how to define path parameters (item_id) and optional query parameters (q), returning them in the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create an asynchronous FastAPI application using `async def` for the route functions. This is useful when dealing with I/O-bound operations. It includes two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint includes a path parameter 'item_id' and an optional query parameter 'q'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declaring Query Parameters with Defaults - FastAPI Python
DESCRIPTION: This snippet demonstrates how to declare query parameters in FastAPI with default integer values. Parameters like `skip` and `limit` are automatically parsed from the URL query string and converted to their specified Python types, providing data validation and automatic documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Asynchronous Path Operation with Await
DESCRIPTION: This code demonstrates how to define an asynchronous path operation function in FastAPI using `async def`. The `read_burgers` function uses `await` to call the `get_burgers` function asynchronously, allowing the application to handle other tasks while waiting for the burgers to be retrieved. The `hl_lines` directive highlights the lines where the `async` keyword and `await` are used.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/async.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Get Current User Dependency
DESCRIPTION: This code defines a dependency function called `get_current_user`. It takes a token as input, validates it, and returns a User object. This function uses the OAuth2PasswordBearer scheme to extract the token from the request's authorization header.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm


async def get_user(username: str):
    if username == "fakeuser":
        return None
    return User(username=username, full_name="Fake User")


async def get_current_user(token: str = Depends(oauth2_scheme)):
    user = await get_user(username=token)
    if user is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return user
```

----------------------------------------

TITLE: Pydantic Model Example
DESCRIPTION: This snippet shows an example of a Pydantic model. Pydantic is used for data validation and settings management using Python type annotations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/python-types.md#_snippet_11

LANGUAGE: python
CODE:
```
from typing import List

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tags: List[str] = []


class Image(BaseModel):
    url: str
    name: str


class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]


class Model(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]
    image: Image | None = None
    offers: List[Offer] | None = None
    # ... more attributes ...

```

----------------------------------------

TITLE: Defining a Data Model and PUT Route with Pydantic
DESCRIPTION: This code extends the FastAPI application to include a PUT route ('/items/{item_id}') that accepts a JSON body. It defines a Pydantic model (`Item`) to represent the expected data structure, enabling automatic data validation and serialization. The `update_item` function demonstrates how to access the validated data from the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/az/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Declaring Request Body Parameter in FastAPI Path Operation - Python
DESCRIPTION: This snippet shows how to declare a request body parameter in a FastAPI path operation function. By type-hinting the parameter `item` with the `Item` Pydantic model, FastAPI automatically handles JSON parsing, validation, and provides the structured data to the function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.post("/items/")
async def create_item(item: Item):
```

----------------------------------------

TITLE: Initializing FastAPI instance
DESCRIPTION: Creates an instance of the FastAPI class, which serves as the core of the API application. This instance is used to define routes and handle incoming requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn (Console)
DESCRIPTION: This command starts the FastAPI application using Uvicorn. It specifies `main:app` where `main` refers to the `main.py` file and `app` is the FastAPI instance within it. The `--reload` flag enables automatic server restart on code changes, which is useful during development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_4

LANGUAGE: Console
CODE:
```
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Declaring Basic Path Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a simple path parameter `item_id` in a FastAPI GET route. The value from the URL path is automatically passed as an argument to the asynchronous function, allowing the API to respond with the received ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Function with simple type hints
DESCRIPTION: This example demonstrates the use of simple type hints such as int, float, bool, and bytes for function parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
def process_data(value: int, factor: float, enabled: bool, data: bytes):
    # Perform operations with the typed data
    pass
```

----------------------------------------

TITLE: Installing Uvicorn (Standard)
DESCRIPTION: This command installs Uvicorn with its standard dependencies, including `uvloop` for a high-performance `asyncio` event loop, which significantly improves performance for asynchronous operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Running the FastAPI application with Uvicorn
DESCRIPTION: This command starts the Uvicorn server, which hosts the FastAPI application. The `--reload` flag enables automatic reloading of the server when code changes are detected, useful for development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_4

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Creating a Basic FastAPI App with async def
DESCRIPTION: This code snippet demonstrates how to define asynchronous API endpoints using `async def` in FastAPI. It defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint takes an integer item_id as a path parameter and an optional string q as a query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/it/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from typing import Optional

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining Additional Responses with Pydantic Model in FastAPI
DESCRIPTION: This code snippet demonstrates how to define additional responses for a FastAPI path operation using the `responses` parameter. It includes a Pydantic model (`Message`) for the 404 response, which FastAPI uses to generate the JSON schema in OpenAPI. The `responses` parameter is a dictionary where keys are HTTP status codes and values are dictionaries containing response information, including the `model` key.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/additional-responses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    id: str
    value: str
    tax: float = 10.5
    description: Union[str, None] = None


class Message(BaseModel):
    message: str


@app.post("/items/{item_id}", responses={
    404: {"model": Message},
})
async def create_item(
    item_id: int,
    item: Item,
):
    if item_id == 3:
        return JSONResponse(content={"message": "Item not found"}, status_code=404)
    return item
```

----------------------------------------

TITLE: Defining Asynchronous Test Functions with pytest-anyio and HTTPX AsyncClient
DESCRIPTION: This snippet illustrates how to define an asynchronous test function using `pytest.mark.anyio` to enable `async def` tests. It demonstrates the setup of `httpx.AsyncClient` with a FastAPI application and sending an asynchronous request using `await client.get('/')`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#_snippet_0

LANGUAGE: python
CODE:
```
import pytest
from httpx import AsyncClient
# from app.main import app # Assuming 'app' is your FastAPI application instance

@pytest.mark.anyio
async def test_example_endpoint():
    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get("/")
        # Further assertions would go here
```

----------------------------------------

TITLE: Defining a Path Parameter
DESCRIPTION: Defines a path parameter item_id in a FastAPI route. The value of the item_id path parameter will be passed to your function as the item_id argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Database Dependency with yield
DESCRIPTION: This code snippet demonstrates how to create a database session as a dependency using `yield`. The session is created before the request is processed, and closed after the response is sent. The yielded value is injected into route operations and other dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Defining Hero Data Models (HeroPublic, HeroCreate, HeroUpdate) - Python
DESCRIPTION: Defines three data models: `HeroPublic` for API responses, ensuring `id` is always an integer; `HeroCreate` for validating client data when creating a hero, including a `secret_name`; and `HeroUpdate` for updating hero data, with all fields being optional. These models manage data flow and validation between the API and the database.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_11

LANGUAGE: Python
CODE:
```
...
# Code omitted for brevity
...

```

----------------------------------------

TITLE: Pydantic User Model Definition
DESCRIPTION: This code defines a Pydantic model for representing a user. It includes fields like username, email, and full_name. Pydantic models are used for data validation and serialization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None
```

----------------------------------------

TITLE: Creating Hero with HeroCreate and Returning HeroPublic - Python
DESCRIPTION: Demonstrates creating a `Hero` database model from a `HeroCreate` data model received in a request, and then returning it as a `HeroPublic` model. FastAPI uses the `response_model` parameter to validate and serialize the data using `HeroPublic` before sending it as a response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_12

LANGUAGE: Python
CODE:
```
...
# Code omitted for brevity
...

```

----------------------------------------

TITLE: Using the Input Model as Response Model in FastAPI
DESCRIPTION: This example demonstrates using the same `UserIn` model for both input and output, which can lead to exposing sensitive data like passwords in the API response. It is generally discouraged.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.post("/users/", response_model=UserIn)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Initializing FastAPI App with Basic Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint takes an integer item_id and an optional string query parameter q.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/yo/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: a root endpoint ('/') that returns a greeting and an endpoint ('/items/{item_id}') that returns an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining a Path Operation in FastAPI
DESCRIPTION: This snippet shows how to define a path operation in FastAPI that handles a GET request to a specific URL. It demonstrates the use of the `@app.get` decorator and a function that returns a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Declaring Integer Path/Query Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to declare an integer type hint for a parameter in FastAPI using standard Python syntax. This simple declaration allows FastAPI to automatically validate the input as an integer, convert it from the network, and include it in the generated API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_6

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Defining Python Dependencies in requirements.txt
DESCRIPTION: This snippet defines the required Python packages and their version constraints for a FastAPI application. It specifies `fastapi[standard]` and `pydantic`, ensuring compatibility and stability by setting precise version ranges. This file is typically used by `pip` to install project dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_1

LANGUAGE: Text
CODE:
```
fastapi[standard]>=0.113.0,<0.114.0
pydantic>=2.7.0,<3.0.0
```

----------------------------------------

TITLE: Creating a Basic FastAPI App
DESCRIPTION: This code defines a basic FastAPI application with two endpoints: a root endpoint that returns a simple JSON response and an items endpoint that accepts an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Making a Query Parameter Required in FastAPI
DESCRIPTION: This snippet shows how to make a query parameter required using the Ellipsis (...) syntax in FastAPI. This indicates to FastAPI that the parameter is mandatory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=..., min_length=3)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Initializing FastAPI App with Basic Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}' with a path parameter and an optional query parameter. It uses type hints for parameter validation and returns JSON responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining a Path Operation Decorator
DESCRIPTION: This code snippet demonstrates how to define a path operation using the @app.get() decorator, which associates a function with a specific path and HTTP method (GET in this case).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Initializing FastAPI App with Async Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two GET endpoints using `async def`: one for the root path ('/') that returns a simple JSON response, and another for '/items/{item_id}' that accepts an integer path parameter 'item_id' and an optional string query parameter 'q'. The use of `async def` allows for asynchronous request handling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code snippet demonstrates the simplest FastAPI application. It defines a single endpoint that returns a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining a Nested Dependency with Cookie Parameter
DESCRIPTION: This example showcases a more complex dependency, `query_or_cookie_extractor`, which itself depends on `query_extractor`. It also demonstrates how to extract a value from a cookie (`last_query`) and use it as a fallback if the primary query parameter is not provided.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/sub-dependencies.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def query_or_cookie_extractor(
    q: str = Depends(query_extractor),
    last_query: Optional[str] = Cookie(None)
):
    if not q:
        return last_query
    return q
```

----------------------------------------

TITLE: Basic FastAPI Application
DESCRIPTION: This code defines a simple FastAPI application with a single endpoint that returns a JSON response. It imports FastAPI, creates an app instance, and defines a route that returns a dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Handling Optional Body Parameters in FastAPI
DESCRIPTION: Demonstrates how to define an optional request body parameter (a Pydantic model `Item`) in a FastAPI path operation by setting its default value to `None`. This allows the API endpoint to receive a request body, but it is not mandatory for the request to be valid. It also shows mixing path and query parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI, Path, Query
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Union[Item, None] = None,
    name: Union[str, None] = None,
    description: Union[str, None] = None,
    price: Union[float, None] = None,
    tax: float = Query(None, deprecated=True),
):
    results = {"item_id": item_id}
    if item:
        results.update(item.dict())
    if name:
        results.update({"name": name})
    if description:
        results.update({"description": description})
    if price:
        results.update({"price": price})
    if tax:
        results.update({"tax": tax})
    return results
```

----------------------------------------

TITLE: Creating a SQLModel Database Engine
DESCRIPTION: This Python code creates a SQLModel engine, which is responsible for managing connections to the SQLite database file 'database.db'. The 'check_same_thread=False' argument is crucial for SQLite when used with FastAPI, allowing multiple threads (e.g., from different requests or dependencies) to safely access the same database connection.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_2

LANGUAGE: python
CODE:
```
from sqlmodel import create_engine

sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

engine = create_engine(sqlite_url, echo=True, connect_args={"check_same_thread": False})
```

----------------------------------------

TITLE: Adding Metadata to UploadFile Parameter
DESCRIPTION: This snippet demonstrates how to use the `File()` dependency with `UploadFile` to add extra metadata, such as a description, to the file parameter. This metadata is useful for generating API documentation. The endpoint returns the filename of the uploaded file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, File, UploadFile

app = FastAPI()

@app.post("/file/")
async def create_file(
    file: UploadFile = File(..., description="A file read as UploadFile")
):
    return {"filename": file.filename}
```

----------------------------------------

TITLE: Protecting Endpoint with OAuth2 Dependency
DESCRIPTION: This snippet shows how to secure a path operation by injecting oauth2_scheme as a dependency. FastAPI automatically validates the Authorization header, extracts the bearer token, and passes it to the token parameter, or returns a 401 Unauthorized error if invalid.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/users/me")
async def read_users_me(token: str = Depends(oauth2_scheme)):
```

----------------------------------------

TITLE: Creating a Dependency Function
DESCRIPTION: Defines a dependency function that accepts query parameters (q, skip, limit) and returns them as a dictionary. This function can be injected into route operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI


async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Defining Pydantic `BaseSettings` for Application Configuration
DESCRIPTION: This Python snippet defines a `Settings` class inheriting from Pydantic's `BaseSettings`. It declares configuration fields with type hints and default values, allowing Pydantic to automatically load values from environment variables (e.g., `APP_NAME`, `ADMIN_EMAIL`) and perform validation, including field-specific constraints like `gt` and `le`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_5

LANGUAGE: python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field

class Settings(BaseSettings):
    model_config = SettingsConfigDict(env_file=".env", extra="ignore")

    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = Field(50, gt=0, le=100)
```

----------------------------------------

TITLE: Response Model with Return Type Annotation
DESCRIPTION: This example demonstrates how to define a response model using the return type annotation in a FastAPI path operation function. FastAPI uses this type to validate and filter the response data, and to generate a JSON schema for the API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "description": "", "price": 50.2, "tax": 20.3}
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI application using standard Python type hints. The `item_id: int` declaration allows FastAPI to validate that the parameter is an integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Defining GET Path Operation Decorator - FastAPI Python
DESCRIPTION: This snippet illustrates the `@app.get()` decorator used in FastAPI to define a path operation for handling HTTP GET requests. It maps the root path '/' to a Python function, indicating that the decorated function will be executed when a GET request is made to this URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.get("/\")
```

----------------------------------------

TITLE: Installing Uvicorn ASGI server
DESCRIPTION: This command installs Uvicorn, an ASGI server, which is required for running FastAPI applications in a production environment. The `[standard]` extra includes commonly used features.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Importing Pydantic BaseModel in Python
DESCRIPTION: This snippet demonstrates how to import the `BaseModel` class from the Pydantic library. `BaseModel` is essential for defining data structures that FastAPI uses to validate and serialize request bodies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: Importing Depends from FastAPI
DESCRIPTION: Imports the Depends class from the fastapi module.  This is necessary to declare dependencies in path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Running the FastAPI Application - Console
DESCRIPTION: Command to start the uvicorn server, hosting the FastAPI application defined in the 'app.main' module's 'app' variable with automatic reloading enabled.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Console
CODE:
```
uvicorn app.main:app --reload
```

----------------------------------------

TITLE: Defining a Simple FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with a single GET endpoint at the root path. This structure is typical for the main application file (`main.py`) when separating application logic from test files in a larger project.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_main():
    return {"msg": "Hello World"}
```

----------------------------------------

TITLE: Defining Asynchronous Path Operation Function - FastAPI Python
DESCRIPTION: This snippet highlights the `async def` syntax used to define an asynchronous path operation function in FastAPI. Asynchronous functions are crucial for handling I/O-bound operations efficiently without blocking the event loop.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_16

LANGUAGE: Python
CODE:
```
async def
```

----------------------------------------

TITLE: Declaring an Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a more complex `Item` model as a type for a request body parameter in FastAPI. This allows for validation and automatic conversion of JSON data to Python objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function
DESCRIPTION: This code snippet defines an asynchronous path operation function that handles GET requests to the root path ('/'). It returns a dictionary, which FastAPI automatically converts to JSON. This function is decorated with @app.get("/") to associate it with the GET operation on the root path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a Dependency Function with Query Parameters
DESCRIPTION: This code defines a dependency function that accepts optional query parameters (q, skip, limit) and returns them as a dictionary. This function can be used to extract and validate common parameters across multiple path operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Defining a Path Operation Function (Async)
DESCRIPTION: This code snippet shows an example of an asynchronous path operation function that returns a simple JSON response. FastAPI will call this function when it receives a GET request to the root path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Declaring Annotated Dependency Parameter in FastAPI
DESCRIPTION: This snippet illustrates the declaration of a dependency parameter using Python's `Annotated` type hint combined with FastAPI's `Depends` function. It demonstrates how to specify a dependency, `common_parameters`, and its expected type, `dict`, directly within a function signature for type checking and dependency injection.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[dict, Depends(common_parameters)]
```

----------------------------------------

TITLE: Dependency with yield and try/except in FastAPI
DESCRIPTION: Demonstrates how to use a `try` block in a dependency with `yield` to catch exceptions that may be raised during the request processing. This allows for handling specific exceptions, such as database transaction rollbacks, and ensures that exit steps are executed regardless of whether an exception occurred using `finally`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    except SomeException:
        db.rollback()
    finally:
        db.close()
```

----------------------------------------

TITLE: Creating FastAPI Application Instance
DESCRIPTION: This snippet shows the instantiation of the `FastAPI` class, creating an `app` object. This `app` instance serves as the main point of interaction for defining all API routes, operations, and configurations within the FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Configuring CORS Middleware in FastAPI
DESCRIPTION: This snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) in a FastAPI application using `CORSMiddleware`. It sets up a list of allowed origins, enables credentials, and allows all HTTP methods and headers for cross-origin requests. This middleware intercepts incoming requests to handle CORS preflight and simple requests, ensuring proper communication between different origins.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/cors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "http://localhost:8080",
    "http://localhost",
    "https://example.org",
    "https://www.example.org",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

----------------------------------------

TITLE: Database Dependency with yield in FastAPI
DESCRIPTION: Creates a database session and closes it after the request is processed. The code before the `yield` statement is executed before creating a response, and the value generated is injected into path operations and other dependencies. The code after the `yield` statement is executed after creating the response but before sending it.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function
DESCRIPTION: This code snippet defines a synchronous path operation function that handles GET requests to the root path ('/'). It returns a dictionary, which FastAPI automatically converts to JSON. This function is an alternative to the asynchronous version and can be used when asynchronicity is not required.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Including Admin Router with Custom Config - Python
DESCRIPTION: Demonstrates including the 'admin.router' into the main 'FastAPI' application using 'app.include_router()'. This example shows how to apply custom configurations like a URL 'prefix' ('/admin'), 'tags' ('admin'), 'dependencies' (e.g., 'get_token_header'), and specific 'responses' directly during the inclusion process.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from app.dependencies import get_token_header

from app.routers import items, users
from app.internal import admin

app = FastAPI()

app.include_router(users.router)
app.include_router(items.router)

app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)

@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Importing FastAPI Class in Python
DESCRIPTION: This code snippet shows how to import the FastAPI class from the fastapi package. This import is necessary to create an instance of the FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Applying Global Dependencies to FastAPI Application - Python
DESCRIPTION: This snippet demonstrates how to add a global dependency to a FastAPI application by passing a list of `Depends` objects to the `FastAPI` constructor. These dependencies will be automatically applied to all path operations defined within the application, ensuring consistent behavior like authentication or common parameter handling across the entire API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/global-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

# Define a common dependency function
async def get_query_token(token: str):
    if token != "jessica":
        from fastapi import HTTPException
        raise HTTPException(status_code=400, detail="Invalid X-Token header")
    return token

# Initialize FastAPI application with a global dependency
app = FastAPI(dependencies=[Depends(get_query_token)])

@app.get("/items/")
async def read_items():
    return {"message": "This endpoint requires the global dependency"}

@app.get("/users/")
async def read_users():
    return {"message": "So does this one!"}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application with Async Endpoints
DESCRIPTION: This Python code illustrates a FastAPI application where endpoint functions are defined using `async def`. This approach is beneficial for I/O-bound operations, allowing the server to handle multiple requests concurrently without blocking, thereby improving performance and responsiveness. It includes a root endpoint and an item endpoint, both asynchronous.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Initializing FastAPI App with Async Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two asynchronous GET endpoints using `async def`: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint accepts an integer path parameter 'item_id' and an optional string query parameter 'q'. Using `async def` allows for non-blocking operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Initializing a Basic FastAPI Application with Async Functions
DESCRIPTION: This code initializes a basic FastAPI application with two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'.  It uses `async def` to define the route functions, indicating that they can handle asynchronous operations. The '/items/{item_id}' endpoint takes an integer item_id and an optional string query parameter q.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running FastAPI server with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, a fast ASGI server. The `--reload` flag enables automatic server restarts upon code changes, which is useful during development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_4

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: List Declaration (Python 3.9+)
DESCRIPTION: This snippet demonstrates how to declare a list of strings in Python 3.9+ using the built-in `list` type hint. It showcases the simplified syntax available in newer Python versions without needing to import `List` from the `typing` module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
items: list[str]
```

----------------------------------------

TITLE: Configuring CORS Middleware in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to add and configure `CORSMiddleware` to a FastAPI application. It defines a list of allowed origins, enables credentials, and permits all HTTP methods and headers for cross-origin requests, ensuring the API can be accessed from specified front-end applications. This setup is crucial for web applications hosted on different domains or ports than the API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/cors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Return Data from Path Operation
DESCRIPTION: This code snippet demonstrates returning a dictionary from a path operation function. FastAPI automatically converts the returned dictionary into a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function
DESCRIPTION: This code snippet defines a synchronous path operation function that returns a dictionary. This function is called when a GET request is made to the root path ('/').
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Defining a GET Path Operation Decorator
DESCRIPTION: This code snippet demonstrates how to define a path operation using the @app.get() decorator. It associates the function below it with the specified path ('/') and the HTTP GET method. FastAPI uses this to route incoming requests to the appropriate function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function
DESCRIPTION: This code snippet defines an asynchronous path operation function that returns a dictionary. This function is called when a GET request is made to the root path ('/').
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Database Dependency with Yield
DESCRIPTION: Creates a database session as a dependency and closes it after the operation is complete. The code before the `yield` statement is executed before creating a response, and the code after `yield` is executed after the response is delivered. The yielded value is injected into route operations and other dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: python
CODE:
```
from typing import Generator

from fastapi import Depends, FastAPI

app = FastAPI()


async def get_db() -> Generator:
    db = {"foo": "bar"}
    try:
        yield db
    finally:
        db.clear()


@app.get("/items/")
async def read_items(db: dict = Depends(get_db)):
    return db
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create a basic FastAPI application with two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint includes a path parameter 'item_id' and an optional query parameter 'q'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Handling Dependency Errors with HTTPException - Python
DESCRIPTION: This code demonstrates how dependencies can raise `HTTPException` to signal errors or unmet requirements. If a required header is missing or invalid, an appropriate HTTP status code and detail message are returned to the client, preventing the path operation from executing. This ensures robust error handling within the dependency chain.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_2

LANGUAGE: Python
CODE:
```
if x_key is None:
    raise HTTPException(status_code=400, detail="X-Key header required")
if x_token is None:
    raise HTTPException(status_code=400, detail="X-Token header required")
```

----------------------------------------

TITLE: Abhängigkeit mit yield und try
DESCRIPTION: Verwenden eines `try`-Blocks in einer Abhängigkeit mit `yield`, um alle Exceptions zu empfangen, die bei Verwendung der Abhängigkeit geworfen wurden. Verwendung von `finally`, um sicherzustellen, dass die Exit-Schritte ausgeführt werden, unabhängig davon, ob eine Exception geworfen wurde oder nicht.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    except SomeException:
        db.rollback()
    finally:
        db.close()
```

----------------------------------------

TITLE: Testing Authenticated FastAPI Endpoints with TestClient
DESCRIPTION: This snippet provides comprehensive tests for a FastAPI application with authenticated GET and POST endpoints. It demonstrates how to send headers and JSON bodies with `TestClient` requests, asserting various status codes and response contents for cases with valid, invalid, and missing authentication tokens.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from app.app_b.main import app

client = TestClient(app)

def test_read_items():
    response = client.get("/items/", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == [{"item_id": "Foo"}, {"item_id": "Bar"}]

def test_read_items_bad_token():
    response = client.get("/items/", headers={"X-Token": "bad-token"})
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}

def test_create_item():
    response = client.post(
        "/items/",
        headers={"X-Token": "fake-super-secret-token"},
        json={"name": "Baz", "description": "The Baz", "price": 50.2},
    )
    assert response.status_code == 200
    assert response.json() == {"name": "Baz", "description": "The Baz", "price": 50.2}

def test_create_item_bad_token():
    response = client.post(
        "/items/",
        headers={"X-Token": "bad-token"},
        json={"name": "Baz", "description": "The Baz", "price": 50.2},
    )
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}

def test_create_item_no_token():
    response = client.post(
        "/items/",
        json={"name": "Baz", "description": "The Baz", "price": 50.2},
    )
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}
```

----------------------------------------

TITLE: Dependency with Yield and Try
DESCRIPTION: Demonstrates how to use a `try` block in a dependency with `yield` to catch exceptions that may be raised during the dependency's usage. This allows for handling errors such as database transaction rollbacks and ensures that cleanup steps are executed using `finally`, regardless of exceptions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Generator

from fastapi import Depends, FastAPI

app = FastAPI()


async def get_db() -> Generator:
    db = {"foo": "bar"}
    try:
        yield db
    finally:
        db.clear()


@app.get("/items/")
async def read_items(db: dict = Depends(get_db)):
    return db
```

----------------------------------------

TITLE: Running FastAPI Application
DESCRIPTION: This command demonstrates how to start the FastAPI application using `fastapi dev`. This development server automatically reloads on code changes and is suitable for local development and testing. The output confirms that the Uvicorn server is running and accessible at the specified local address.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Console
CODE:
```
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Returning Dictionary Response from FastAPI Endpoint
DESCRIPTION: This snippet illustrates a typical return statement from a FastAPI endpoint, where a Python dictionary is returned. FastAPI automatically converts this dictionary into a JSON response, handling the serialization of Python types like str and int to network-compatible formats.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_8

LANGUAGE: Python
CODE:
```
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code defines a simple FastAPI application with two endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns an item ID and an optional query parameter. It demonstrates the basic structure of a FastAPI application, including importing necessary modules, creating an app instance, and defining API endpoints using decorators.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs FastAPI along with a set of commonly used standard optional dependencies, such as Uvicorn for the server and Pydantic for data validation. It is recommended to execute this command within an activated Python virtual environment to manage project dependencies effectively.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Defining a Pydantic Model in Python
DESCRIPTION: This code snippet defines a Pydantic model named User with fields for id (integer), name (string), and joined (date). Pydantic models are used for data validation and serialization. The example shows how to create instances of the User model using both direct initialization and dictionary unpacking.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List, Dict
from datetime import date

from pydantic import BaseModel

# Pydantic modeli
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Initializing FastAPI App with Basic Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint accepts an integer path parameter 'item_id' and an optional string query parameter 'q'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declaring Integer Path/Query Parameters in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to declare an integer type for a parameter in FastAPI using standard Python type hints. This single declaration enables automatic validation, conversion, and documentation for `item_id`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer as a Dependency
DESCRIPTION: Demonstrates how to use the OAuth2PasswordBearer instance as a dependency in a path operation function using Depends. This dependency extracts the Bearer token from the Authorization header and provides it as a string to the function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Updating Dependencies for Active Users in FastAPI
DESCRIPTION: This snippet illustrates how to update dependencies to ensure that only active users can access certain endpoints. It creates an additional dependency, `get_current_active_user`, which uses `get_current_user` as a dependency and returns an HTTP error if the user is inactive.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#_snippet_4

LANGUAGE: Python
CODE:
```
WWW-Authenticate
```

----------------------------------------

TITLE: Defining HeroUpdate Data Model
DESCRIPTION: Defines the `HeroUpdate` data model, used for updating hero data. It includes all the same fields as `HeroCreate`, but all fields are optional (nullable) to allow partial updates. This model inherits from `HeroBase` for consistency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_14

LANGUAGE: Python
CODE:
```
class HeroUpdate(HeroBase):
    name: Optional[str] = Field(default=None, index=True)
    age: Optional[int] = Field(default=None, index=True)
    secret_name: Optional[str] = None
```

----------------------------------------

TITLE: Initializing FastAPI Application with Lifespan
DESCRIPTION: This snippet shows how to integrate the defined `lifespan` async context manager into a FastAPI application by passing it to the `lifespan` parameter during `FastAPI` instance creation. This tells FastAPI to use the specified startup and shutdown logic for the application's lifecycle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_5

LANGUAGE: Python
CODE:
```
app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Get Heroes Endpoint
DESCRIPTION: This code defines a FastAPI endpoint for retrieving a list of `Hero` objects from the database. It uses a `select` statement to query the database, applies pagination using `limit` and `offset`, and returns the list of heroes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
@router.get("/heroes/")
async def read_heroes(offset: int = 0, limit: int = 100, session: SessionDep):
    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
    return heroes
```

----------------------------------------

TITLE: Create a FastAPI application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: a root endpoint that returns a greeting and an /items/{item_id} endpoint that returns the item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, a fast ASGI server. The `--reload` flag enables automatic server reloading upon code changes, which is highly beneficial during development. The application typically becomes accessible at `http://127.0.0.1:8000`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs the FastAPI framework along with its recommended standard dependencies. These dependencies include essential libraries like Uvicorn for serving the application and Pydantic for data validation and serialization, which are crucial for developing FastAPI applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn - Console
DESCRIPTION: Provides the command-line instruction to run the FastAPI application using Uvicorn. It specifies the application entry point ('app.main:app') and uses the '--reload' flag for development purposes, enabling automatic code reloading on changes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_11

LANGUAGE: Console
CODE:
```
$ uvicorn app.main:app --reload
<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Installing Uvicorn
DESCRIPTION: This command installs Uvicorn, an ASGI server, along with the 'standard' extras. Uvicorn is used to run the FastAPI application in a production environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Defining a Data Model Parameter in FastAPI
DESCRIPTION: This example shows how to define a parameter as a data model in FastAPI. The `item: Item` syntax specifies that the `item` parameter should be an instance of the `Item` model. FastAPI will automatically validate the input against the model's schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Pydantic Data Validation
DESCRIPTION: Pydantic is used for data validation in FastAPI. It allows you to define data structures using Python type annotations, which are then used to validate incoming data. This ensures that the data conforms to the expected format and type before it is processed by the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/features.md#_snippet_2

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Dockerfile for FastAPI Application
DESCRIPTION: Defines a Dockerfile to build a Docker image for a FastAPI application. It starts from the official Python 3.9 image, sets the working directory, copies the requirements file, installs the dependencies, and copies the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app
```

----------------------------------------

TITLE: Import FastAPI
DESCRIPTION: Imports the FastAPI class, which provides the core functionality for building APIs. This is the first step in creating a FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Initializing a Basic FastAPI Application
DESCRIPTION: This code initializes a basic FastAPI application with two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint takes an integer item_id and an optional string query parameter q.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Returning Item Details
DESCRIPTION: This code snippet returns a dictionary containing the item name and item ID.  It demonstrates how FastAPI automatically converts Python types to JSON for API responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining URL Route Parameters in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a URL route parameter in FastAPI using the same syntax as Python's string formatting. The value passed in the URL for `item_id` will be passed to the function as the argument `item_id`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Returning a Dictionary in FastAPI with Python
DESCRIPTION: This code snippet demonstrates how to return a dictionary from a FastAPI endpoint. It constructs a dictionary containing the item name and item ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the `item_id` path parameter is passed to the function as an argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining a PUT Endpoint with Request Body
DESCRIPTION: This code extends the FastAPI application to include a PUT endpoint at '/items/{item_id}'. It defines a Pydantic model `Item` to represent the request body, including data validation. The `update_item` function receives the `item_id` as a path parameter and the `item` as a request body, returning a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining a Pydantic Data Model in Python
DESCRIPTION: This code defines a Pydantic `Item` model inheriting from `BaseModel`. It specifies data types for `name`, `price`, and optional `description` and `tax` fields, which FastAPI uses for automatic data validation and serialization of request bodies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create a basic FastAPI application with two routes: a root route that returns a simple JSON response and an items route that accepts an item ID and an optional query parameter. It uses the FastAPI framework to define the application and the routes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running Uvicorn with Multiple Workers via CLI
DESCRIPTION: This command demonstrates how to start a Uvicorn server with four worker processes, binding it to all network interfaces on port 8080. The output shows the parent process managing the individual worker processes, each handling application startup, indicating increased concurrency for handling requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
<font color="#A6E22E">INFO</font>:     Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit)
<font color="#A6E22E">INFO</font>:     Started parent process [<font color="#A1EFE4"><b>27365</b></font>]
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27368</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27369</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27370</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27367</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
```

----------------------------------------

TITLE: Injecting the User Dependency
DESCRIPTION: This code shows how to inject the `get_current_user` dependency into a path operation. The `current_user` parameter will automatically receive the User object returned by the dependency function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

app = FastAPI()

@app.get("/users/me")
async def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user
```

----------------------------------------

TITLE: Response Model Declaration with Return Type Annotation
DESCRIPTION: This code snippet demonstrates how to declare the response type of a path operation by annotating the return type of the function. FastAPI uses this type to validate the data, generate a JSON schema, and limit the output data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "description": "", "price": 50.2, "tax": 20.3}


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Updating FastAPI Example with PUT Request and Pydantic Model
DESCRIPTION: This code modifies the FastAPI application to include a PUT endpoint at '/items/{item_id}'. It defines a Pydantic model `Item` to represent the request body, which includes a name (string), price (float), and an optional is_offer (boolean). The `update_item` function handles the PUT request, taking the item_id and the Item model as input.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Updating Item with PUT in FastAPI (Python)
DESCRIPTION: This snippet defines a FastAPI `PUT` endpoint to fully replace an existing item. It uses `jsonable_encoder` to convert the incoming Pydantic model data into a JSON-compatible format suitable for storage, ensuring types like `datetime` are properly serialized. The entire existing item is replaced with the new data provided in the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-updates.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(item_id: str, item: Item):
    update_item_encoded = jsonable_encoder(item)
    items[item_id] = update_item_encoded
    return update_item_encoded
```

----------------------------------------

TITLE: Awaiting an Asynchronous Function in Python
DESCRIPTION: Shows how to call an asynchronous function using the `await` keyword. The `await` keyword pauses the execution of the current function until the asynchronous function `get_burgers(2)` completes and returns its result, which is then stored in the `burgers` variable.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two asynchronous endpoints using `async def`: a root endpoint ('/') that returns a greeting and an endpoint ('/items/{item_id}') that returns an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declaring Dependencies in FastAPI Path Operations
DESCRIPTION: These FastAPI path operation functions (`/items/` and `/users/`) demonstrate how to declare a dependency using `Depends`. By assigning `Depends(common_parameters)` to a parameter, FastAPI automatically calls the `common_parameters` dependency function and injects its return value into the path operation, promoting code reuse.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons

@app.get("/users/")
async def read_users(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Adding Max Length Validation with Annotated and Query
DESCRIPTION: This snippet demonstrates how to apply a maximum length validation to an optional query parameter `q` using `Annotated` and `Query`. By including `Query(max_length=50)` within `Annotated`, FastAPI enforces that the provided string for `q` does not exceed 50 characters, while still keeping the parameter optional.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(max_length=50)] = None):
    if q:
        return {"q": q}
    return {"message": "No q parameter"}
```

----------------------------------------

TITLE: Securing Host Headers with TrustedHostMiddleware - Python
DESCRIPTION: Demonstrates how to integrate `TrustedHostMiddleware` to protect against HTTP Host Header attacks by validating the `Host` header of incoming requests against a predefined list of allowed domain names. Requests with invalid host headers will result in a `400 Bad Request` response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.trustedhost import TrustedHostMiddleware

app = FastAPI()

app.add_middleware(TrustedHostMiddleware, allowed_hosts=["example.com", "*.example.com"])
```

----------------------------------------

TITLE: Async FastAPI App
DESCRIPTION: Creates an asynchronous FastAPI application with two endpoints: a root endpoint that returns a "Hello World" message and an `/items/{item_id}` endpoint that returns the item ID and an optional query parameter. Uses `async def` for asynchronous execution.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code demonstrates how to create a simple FastAPI application with two asynchronous routes using `async def`.  It includes a root route that returns a "Hello World" message and an items route that returns an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Create Hero Endpoint
DESCRIPTION: This code defines a FastAPI endpoint for creating a new `Hero` in the database. It receives the `Hero` data from the request body, adds it to the database session, commits the changes, and returns the created `Hero`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import Depends


@app.post("/heroes/")
async def create_hero(hero: Hero, session: SessionDep):
    session.add(hero)
    session.commit()
    session.refresh(hero)
    return hero
```

----------------------------------------

TITLE: Using a Response Model
DESCRIPTION: Demonstrates how to declare a response model for a path operation using the `response_model` parameter. This ensures that the response data conforms to the specified Pydantic model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "price": 50.2}

```

----------------------------------------

TITLE: Response Model with `response_model` Parameter - Python
DESCRIPTION: This code snippet demonstrates the usage of the `response_model` parameter in the route decorator. This is useful when you want to return data that doesn't exactly match the declared type, such as returning a dictionary but declaring it as a Pydantic model. The `response_model` parameter takes precedence over the return type annotation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "description": "", "price": 50.2, "tax": 20.3}


@app.put("/items/{item_id}", response_model=Item)
async def update_item(item_id: int):
    return {"name": "Foo", "description": "", "price": 50.2, "tax": 20.3}
```

----------------------------------------

TITLE: Create FastAPI Instance with Title
DESCRIPTION: Creates an instance of the FastAPI class, which serves as the main entry point for defining the API. This instance is used to register path operations and other configurations. This example shows how to set the title.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
my_awesome_api = FastAPI()
```

----------------------------------------

TITLE: Implementing OAuth2 Scopes in FastAPI: Global View
DESCRIPTION: This comprehensive snippet demonstrates the full integration of OAuth2 scopes in a FastAPI application. It includes defining the OAuth2 security scheme with specific scopes, handling user authentication, creating JWT tokens that embed user scopes, and protecting API endpoints based on required permissions. It serves as a complete example of a secure API with scope-based authorization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI, HTTPException, status, Security
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm

# ... (User, Token, authenticate_user, create_access_token, get_current_user models and functions)

oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="token",
    scopes={
        "me": "Read information about the current user.",
        "items": "Read items."
    }
)

app = FastAPI()

@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]) -> Token:
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username, "scopes": form_data.scopes}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}


@app.get("/users/me/", response_model=User)
async def read_users_me(current_user: Annotated[User, Security(oauth2_scheme, scopes=["me"])]):
    return current_user


@app.get("/items/", response_model=list[Item])
async def read_items(current_user: Annotated[User, Security(oauth2_scheme, scopes=["items"])]):
    return [
        {"item_id": "Foo", "owner": "Alice"},
        {"item_id": "Bar", "owner": "Bob"}
    ]

# ... (Item model definition)
```

----------------------------------------

TITLE: Datenbank-Abhängigkeit mit yield
DESCRIPTION: Erstellen einer Datenbanksession und Schließen dieser nach Abschluss mit `yield`. Der Code vor und einschließlich der `yield`-Anweisung wird ausgeführt, bevor eine Response erzeugt wird. Der auf die `yield`-Anweisung folgende Code wird ausgeführt, nachdem die Response gesendet wurde.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Updating FastAPI Application with Pydantic Model and PUT Endpoint (Python)
DESCRIPTION: This Python code updates the `main.py` file to introduce a Pydantic `Item` model for data validation and a new `PUT` endpoint. The `Item` model defines the structure for incoming request bodies, ensuring type safety and enabling automatic documentation. The `update_item` function handles `PUT` requests to `/items/{item_id}`, accepting an `item_id` and an `Item` object as the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining a Custom Dependency Function in FastAPI
DESCRIPTION: This snippet shows how to create a reusable dependency function that reads a custom header (X-Token). It uses fastapi.Header to extract the header value and raises an HTTPException if the token is invalid, enforcing authentication or validation logic.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException

async def get_token_header(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token
```

----------------------------------------

TITLE: Overriding FastAPI Dependencies for Testing - Python
DESCRIPTION: This snippet illustrates how to override a FastAPI dependency (`get_settings`) for testing purposes using `app.dependency_overrides`. A mock `get_settings_override` function is defined to return a `Settings` object with a specific `admin_email`, allowing tests to run with controlled configurations without affecting the actual application settings.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_13

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from main import app, get_settings
from config import Settings

def get_settings_override():
    return Settings(admin_email="testing@example.com")

client = TestClient(app)

app.dependency_overrides[get_settings] = get_settings_override

def test_info_override():
    response = client.get("/info")
    assert response.status_code == 200
    assert response.json() == {
        "app_name": "Awesome API",
        "admin_email": "testing@example.com"
    }
```

----------------------------------------

TITLE: Installing Uvicorn for Serving FastAPI Applications
DESCRIPTION: This command installs Uvicorn, an ASGI server, with its standard dependencies. Uvicorn is a lightweight and fast server that is commonly used to run FastAPI applications in production environments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Defining a GET path operation in FastAPI
DESCRIPTION: This code snippet shows how to define a GET path operation in FastAPI. It uses the `@app.get()` decorator to associate the function `read_url` with the `/some/url` endpoint, returning a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Upgrading FastAPI with Pydantic Model and PUT Request
DESCRIPTION: This snippet extends the FastAPI application by introducing a Pydantic `BaseModel` to define the structure of a request body. It adds a `PUT` endpoint that accepts an `item_id` path parameter and an `Item` object as a request body, demonstrating how to handle structured input.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.9+)
DESCRIPTION: Defines a Pydantic model `User` with attributes `id`, `name`, and `signup_ts`. Pydantic validates and converts data to the appropriate types when an instance of the model is created.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: list[int] = []
```

----------------------------------------

TITLE: Declaring Typed Path Parameters in FastAPI
DESCRIPTION: This example shows how to add a type annotation (`int`) to a path parameter in FastAPI. This enables automatic data conversion from the URL string to a Python integer, providing type safety and better editor support.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Simple FastAPI App
DESCRIPTION: This is a minimal FastAPI application that defines a single endpoint at the root path ('/'). When accessed, it returns a JSON response containing the message 'Hello World'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Type Annotations for Route Parameters in FastAPI
DESCRIPTION: This code snippet shows how to declare the type of a route parameter in a FastAPI function using standard Python type annotations. In this case, `item_id` is declared as an `int`, enabling editor support, error checking, and autocompletion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Configuring APIRouter for Items
DESCRIPTION: Demonstrates configuring an `APIRouter` instance in `app/routers/items.py` for item-related path operations. It sets a common `prefix` (`/items`), `tags` (`items`), a required `dependencies` list (using the `get_token` dependency), and default `responses` for all included routes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException

from ..dependencies import get_token

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


@router.get("/{item_id}")
async def read_item(item_id: str):
    if item_id != "foo":
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item_id": item_id, "description": "The Foo description"}

```

----------------------------------------

TITLE: Initializing FastAPI App with Basic Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two GET endpoints: one for the root path ('/') that returns a simple JSON response, and another for '/items/{item_id}' that accepts an integer path parameter 'item_id' and an optional string query parameter 'q'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI App
DESCRIPTION: This code defines a FastAPI application with asynchronous endpoints using `async def`. It includes a root endpoint and an items endpoint that accepts an item ID and an optional query parameter. Use this when your code uses `async` / `await`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Async Path Operation Function with Await
DESCRIPTION: This code snippet demonstrates how to define an asynchronous path operation function in FastAPI using `async def`. It uses `await` to call a third-party library, allowing FastAPI to handle other tasks while waiting for the library to complete. This is suitable for I/O-bound operations where the function needs to wait for external resources.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Installing FastAPI
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It fetches and installs the latest version of FastAPI and its dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Install FastAPI using pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It fetches the latest version of FastAPI from the Python Package Index (PyPI) and installs it along with its dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/hu/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn
DESCRIPTION: This command starts the FastAPI application `app` located in `main.py` using Uvicorn. It configures the server to listen on all available network interfaces (`0.0.0.0`) on port `80`. The `--reload` option, though not shown in the snippet, is mentioned as a development-only feature.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 80
```

----------------------------------------

TITLE: Defining Admin Router (Basic) - Python
DESCRIPTION: Shows the definition of an 'APIRouter' instance in a separate file ('app/internal/admin.py'). This router is defined without specific prefixes, tags, or dependencies applied directly to the 'APIRouter' instance itself, allowing these configurations to be applied when the router is included in the main application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends
from app.dependencies import get_token_header

router = APIRouter()

@router.get("/admin", tags=["admin"])
async def read_admin(token: str = Depends(get_token_header)):
    return {"admin": True}
```

----------------------------------------

TITLE: Managing Database Connections with FastAPI `yield` Dependencies
DESCRIPTION: This snippet demonstrates how to manage a database connection using a FastAPI dependency with `yield`. The code before `yield` establishes the connection, which is then provided to path operations. The code in the `finally` block after `yield` ensures the connection is properly closed, even if errors occur during the request processing, making it suitable for resource management.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_database():
    # Assume connect_to_db() returns a database connection object
    db = connect_to_db()
    try:
        yield db
    finally:
        # This code runs after the response has been delivered
        db.close()
```

----------------------------------------

TITLE: Declaring Complex Model Body Parameters in FastAPI (Python)
DESCRIPTION: This snippet shows how to declare a complex `Item` model as a parameter in FastAPI. Using a Pydantic model (implied by `Item`), FastAPI automatically handles JSON body parsing, validation, and serialization, providing comprehensive editor support.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining a Basic FastAPI Application with Models
DESCRIPTION: This Python snippet demonstrates how to set up a simple FastAPI application. It defines a Pydantic `Item` model for data validation and a POST endpoint that accepts and returns data, showcasing the basic structure for API development and the use of `ResponseMessage`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union
from pydantic import BaseModel
from fastapi import FastAPI

class ResponseMessage(BaseModel):
    message: str

class Item(BaseModel):
    name: str

app = FastAPI()

@app.post("/items/", response_model=ResponseMessage)
def create_item(item: Item):
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Items APIRouter Module - Python
DESCRIPTION: Defines a simple APIRouter for item-related routes. This module is intended to be imported and included in the main application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()

@router.get("/items/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]
```

----------------------------------------

TITLE: Path Parameter with Type
DESCRIPTION: Declares a path parameter `item_id` with the type `int`. FastAPI will automatically parse the request and convert the string from the HTTP request into an integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Basic Dockerfile Configuration for FastAPI
DESCRIPTION: This Dockerfile sets up a FastAPI application within a Docker container. It starts from a Python base image, sets the working directory, copies the requirements file, installs dependencies, copies the application code, and defines the command to run the Uvicorn server.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9
WORKDIR /code
COPY ./requirements.txt /code/requirements.txt
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
COPY ./app /code/app
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Running Uvicorn in Docker for FastAPI
DESCRIPTION: This command defines the entry point for a Docker container, running the Uvicorn ASGI server. It specifies that the FastAPI application is located at 'app.main:app', listens on all network interfaces ('0.0.0.0'), and uses port '80'. This is a standard way to serve FastAPI applications within a Docker container.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_18

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Combining Body, Path, and Query Parameters in FastAPI
DESCRIPTION: This snippet demonstrates a FastAPI path operation that simultaneously handles a request body (`item`), a path parameter (`item_id`), and an optional query parameter (`q`). FastAPI automatically parses and validates each parameter from its respective source (body, URL path, or query string).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item, q: str | None = None):
    results = {"item_id": item_id, **item.dict()}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Creating SQLModel Database Model
DESCRIPTION: Defines a database model using SQLModel, specifying table name, primary key, and index. The Hero class inherits from SQLModel and defines the structure of the 'hero' table with columns for id, name, secret_name, and age.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlmodel import Field, SQLModel, create_engine


class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Creating main.py for OAuth2 Password Flow
DESCRIPTION: This code snippet demonstrates how to set up a basic FastAPI application with OAuth2 password flow for authentication. It includes importing necessary modules, defining a token URL, and creating a path operation that requires authentication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Creating an async FastAPI application
DESCRIPTION: This code defines a basic FastAPI application with two asynchronous endpoints: `/` which returns a simple JSON response, and `/items/{item_id}` which takes an item ID as a path parameter and an optional query parameter `q`.  It uses `async def` to define the functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: str = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Adding Min and Max Length Validations with Annotated - FastAPI Python
DESCRIPTION: This snippet demonstrates how to apply both `min_length` and `max_length` string validations to an optional query parameter `q` using `Annotated`. This approach ensures that the input string adheres to both minimum and maximum length constraints, providing robust data validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_9

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(min_length=3, max_length=50)] = None
```

----------------------------------------

TITLE: Adding Custom ASGI Middleware with FastAPI's `add_middleware()` - Python
DESCRIPTION: This snippet illustrates the recommended way to add custom ASGI middleware in FastAPI using `app.add_middleware()`. This method ensures proper integration with FastAPI's internal error handling and custom exception handlers. The middleware class is passed as the first argument, followed by any configuration parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/advanced/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: Lifespan Function Definition
DESCRIPTION: This code snippet shows the structure of a lifespan function in FastAPI. The function is an async generator (using `async def` and `yield`). The code before the `yield` is executed before the application starts, and the code after the `yield` is executed after the application shuts down.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    await fake_load_model("my_model")
    yield
    # Clean up the ML models and release the resources
    await fake_unload_model("my_model")
```

----------------------------------------

TITLE: Dependency Injection with yield and HTTPException (Python 3.8+ non-annotated)
DESCRIPTION: This code demonstrates how to use dependencies with `yield` and `HTTPException` in FastAPI. It includes a `try` block to catch exceptions and raise an `HTTPException` in the exit code after the `yield`. The dependency checks for a token and raises an exception if it's invalid, otherwise it yields control to the route function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_7

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: Optional[str] = Depends(oauth2_scheme)):
    if token == "jflsdkjf":
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password", headers={"WWW-Authenticate": "Bearer"})
    return "The user"


@app.get("/items/")
async def read_items(current_user: Optional[str] = Depends(get_current_user)):
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


async def get_db():
    try:
        db = "fake_db"
        yield db
    except:  # noqa: E722
        print("Oooops, there was an error")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal error")
    finally:
        print("Closing connection")


@app.get("/db-items/")
async def read_db_items(db: Optional[str] = Depends(get_db)):
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]
```

----------------------------------------

TITLE: Lifespan Event Definition with Startup and Shutdown Logic in FastAPI
DESCRIPTION: Defines an asynchronous lifespan function that simulates loading a machine learning model during startup (before requests are handled) and removing it from memory during shutdown (after requests are handled). This function is decorated with `@asynccontextmanager` to make it an async context manager.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
@asynccontextmanager
async def lifespan(app: FastAPI): # pragma: no cover
    # Load the ML model
    model = FakeModel()
    app.state.model = model
    yield
    # Clean up the ML models and release the resources
    del app.state.model
```

----------------------------------------

TITLE: Defining FastAPI Lifespan Async Context Manager
DESCRIPTION: This snippet defines the `lifespan` function as an `asynccontextmanager`, which is used by FastAPI to manage application startup and shutdown events. The code before `yield` executes on startup, and the code after `yield` executes on shutdown, making it suitable for initializing and cleaning up shared resources.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    ml_models["regression_model"] = RegressionModel()
    yield
    # Clean up the ML models
    ml_models.clear()
```

----------------------------------------

TITLE: Running FastAPI with Gunicorn and Uvicorn Workers
DESCRIPTION: This command starts the Gunicorn server, which acts as a master process, and spawns multiple Uvicorn worker processes to handle incoming requests. It specifies the application entry point (`main:app`), the number of workers (`--workers 4`), the worker class (`--worker-class uvicorn.workers.UvicornWorker`), and the binding address and port (`--bind 0.0.0.0:80`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80
```

----------------------------------------

TITLE: Mixed Required, Default, and Optional Query Parameters - FastAPI Python
DESCRIPTION: This example illustrates the flexibility of FastAPI in handling a mix of query parameter types: `needy` is required, `skip` has a default value, and `limit` is optional. This allows for robust API design accommodating various input requirements.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_user_item(
    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None
):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item
```

----------------------------------------

TITLE: Building a Docker Image for FastAPI
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the requirements file, installs dependencies, copies the application code, and defines the command to run the FastAPI application using Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Defining Asynchronous GET Path Operation in FastAPI
DESCRIPTION: This snippet defines an asynchronous path operation function for the root URL (`/`) using the `GET` HTTP method. FastAPI calls this `async` function when a `GET` request is received at the specified path, making it suitable for I/O-bound operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_9

LANGUAGE: Python
CODE:
```
@app.get("/")
async def root():
```

----------------------------------------

TITLE: Declaring Custom Model Type Hint in FastAPI
DESCRIPTION: This snippet illustrates how to declare a type hint for a custom `Item` model. FastAPI automatically validates and serializes data based on the structure defined in the `Item` class, leveraging Pydantic.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: FastAPI Application with Authenticated GET and POST Endpoints
DESCRIPTION: This snippet defines a FastAPI application with two endpoints, `/items/` (GET and POST), both requiring an `X-Token` header for authentication. It demonstrates how to use `Header` for dependency injection and raise `HTTPException` for invalid or missing tokens, ensuring secure access to resources.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Header, HTTPException

app = FastAPI()

@app.get("/items/")
async def read_items(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]

@app.post("/items/")
async def create_item(item: dict, x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return item
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This snippet shows how to install FastAPI using pip, the Python package installer. It also installs Uvicorn, an ASGI server, which is required for running FastAPI applications in production.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi

---> 100%
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application with `def`
DESCRIPTION: This snippet demonstrates how to create a basic FastAPI application with two GET endpoints: a root endpoint and an item endpoint with a path parameter and an optional query parameter. It uses standard Python `def` functions for route handlers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Updating Pydantic Model with update Parameter (Python)
DESCRIPTION: This snippet shows how to create an updated copy of an existing Pydantic model using `model_copy(update=...)` (or `.copy()` in Pydantic v1). The `update_data` dictionary, typically generated using `exclude_unset`, is merged into the `stored_item_model`, applying only the specified partial changes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-updates.md#_snippet_3

LANGUAGE: Python
CODE:
```
updated_item = stored_item_model.model_copy(update=update_data)
```

----------------------------------------

TITLE: Define GET Path Operation Decorator
DESCRIPTION: This code snippet shows how to define a path operation decorator using `@app.get("/")` to handle GET requests to the root path `/`. It tells FastAPI that the function immediately following it should handle requests to the specified path using the GET method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Create a Hero Endpoint
DESCRIPTION: This snippet defines an endpoint to create a new Hero. It uses the `SessionDep` dependency to get a database session, adds the new `Hero` to the session, commits the changes, and returns the created `Hero`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def create_hero(
    *, session: SessionDep, hero: HeroCreate
) -> Hero:
    db_hero = Hero.model_validate(hero)
    session.add(db_hero)
    await session.commit()
    await session.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Installing FastAPI Standard Dependencies
DESCRIPTION: This command installs FastAPI with its standard set of dependencies. This approach is often preferred for production deployments to minimize the installed footprint by including only essential packages.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_2

LANGUAGE: Shell
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Required Query Parameter using Ellipsis in FastAPI
DESCRIPTION: This snippet demonstrates how to make a query parameter 'q' required by using `...` (Ellipsis) as the default value in the `Query` function. This forces the client to provide a value for the parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: str = Query(default=..., min_length=3)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Sharing Dependencies with Annotated
DESCRIPTION: This code demonstrates how to share dependencies using `Annotated` in FastAPI. It defines a common dependency `common_parameters` and then uses it in multiple path operations by storing the `Annotated` value in a variable.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[dict, Depends(common_parameters)]
```

----------------------------------------

TITLE: Path Parameters with Types
DESCRIPTION: Declares the type of a path parameter item_id as an integer using standard Python type annotations. FastAPI uses this type information for data conversion and validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining Asynchronous Routes in FastAPI
DESCRIPTION: This code demonstrates how to define asynchronous routes in FastAPI using `async def`. It's suitable for I/O-bound operations and improves performance. The example includes asynchronous versions of the root path ('/') and item retrieval ('/items/{item_id}') routes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/az/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Async Path Operation Function with Await
DESCRIPTION: This code snippet demonstrates how to define an asynchronous path operation function using `async def` when interacting with a third-party library that requires the `await` keyword. The function retrieves results from `some_library()` and returns them.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: HeroCreate Model Definition
DESCRIPTION: Defines the `HeroCreate` model for data validation during hero creation. It includes all fields, including `secret_name`, which is used for storing the secret but not returning it in API responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_12

LANGUAGE: Python
CODE:
```
class HeroCreate(HeroBase):
    secret_name: str
```

----------------------------------------

TITLE: Defining Global Authentication Dependencies (Python)
DESCRIPTION: These asynchronous functions define two global dependencies, `verify_key` and `verify_token`, which validate specific HTTP header values (`X-Key` and `X-Token`). If the headers are missing or invalid, an `HTTPException` is raised, effectively blocking unauthorized requests. Although these functions return values, those values are not passed to the path operation functions when used as global dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def verify_key(x_key: str = Header(...)):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key

async def verify_token(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token
```

----------------------------------------

TITLE: Testing Asynchronous FastAPI Endpoints with Pytest and AsyncClient
DESCRIPTION: This snippet demonstrates how to write an asynchronous test for a FastAPI application using `pytest` and `httpx.AsyncClient`. The `@pytest.mark.anyio` decorator enables the test function to run asynchronously, allowing the use of `await` with `AsyncClient` to make requests to the FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_1

LANGUAGE: Python
CODE:
```
import pytest
from httpx import AsyncClient
from app.main import app

@pytest.mark.anyio
async def test_read_root():
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI endpoint using Python type hints. The `item_id` parameter is declared as an integer, enabling automatic validation and conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This console command initiates the FastAPI application using fastapi dev, which internally uses Uvicorn. It starts a development server, making the application accessible at http://127.0.0.1:8000. This command is essential for testing and running FastAPI applications locally.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_3

LANGUAGE: Console
CODE:
```
fastapi dev main.py
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a more complex `Item` model as a parameter in a FastAPI function.  This allows FastAPI to handle data validation and conversion for the `Item` object.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Insecure Credential Comparison (Timing Attack Vulnerable)
DESCRIPTION: This snippet illustrates a common, but insecure, way to compare usernames and passwords. Using direct string equality (`==`) can be vulnerable to timing attacks, as comparison might stop early upon finding a mismatch, revealing information about the correct prefix length to an attacker.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#_snippet_2

LANGUAGE: Python
CODE:
```
if not (credentials.username == "stanleyjobson") or not (credentials.password == "swordfish"):
    # Return some error
    ...
```

----------------------------------------

TITLE: Type Hinting Path Parameter
DESCRIPTION: Defines a path parameter `item_id` with a type hint of `int`. FastAPI will automatically convert the path parameter to an integer and validate that it is a valid integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a complex item model using FastAPI. The `item: Item` syntax indicates that the `item` parameter should conform to the structure defined by the `Item` model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Declaring a Complex Object Type
DESCRIPTION: This code snippet shows how to declare a more complex object type (Item) in FastAPI using Python type hints. This allows FastAPI to handle data validation and conversion for the object.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Securely Validating HTTP Basic Credentials with `secrets.compare_digest()` in FastAPI
DESCRIPTION: This snippet shows how to securely validate HTTP Basic credentials using Python's `secrets.compare_digest()` function. It converts the provided username and password to bytes before comparison to prevent timing attacks. If the credentials do not match the expected values, an `HTTPException` with a 401 Unauthorized status and a `WWW-Authenticate` header is raised.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/http-basic-auth.md#_snippet_1

LANGUAGE: Python
CODE:
```
import secrets

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()

@app.get("/users/me")
def read_current_user(credentials: HTTPBasicCredentials = Depends(security)):
    correct_username = secrets.compare_digest(credentials.username.encode("utf-8"), b"stanleyjobson")
    correct_password = secrets.compare_digest(credentials.password.encode("utf-8"), b"swordfish")
    if not (correct_username and correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return {"username": credentials.username, "password": credentials.password}
```

----------------------------------------

TITLE: Type Annotations and Editor Support in FastAPI
DESCRIPTION: Demonstrates the use of Python type annotations with Pydantic for defining data types and leveraging editor support for autocompletion and error checking.  It shows how to define a function with type hints and a Pydantic model with type annotations for fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Объявляем параметр user_id с типом `str`
# и получаем поддержку редактора внутри функции
def main(user_id: str):
    return user_id


# Модель Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Creating a Dependency Function with Query Parameters
DESCRIPTION: Defines a dependency function that accepts optional query parameters (q, skip, limit) and returns them as a dictionary. This function can be injected into path operation functions using Depends.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Typed Path Parameter
DESCRIPTION: Declares the type of a path parameter `item_id` as an integer (`int`) using Python type annotations. This enables editor support for error checking and autocompletion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This example shows how to declare an integer parameter named `item_id` in a FastAPI endpoint using Python type hints. FastAPI uses this declaration for validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/hu/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Update item with PUT request using Pydantic model
DESCRIPTION: This Python code defines a FastAPI application with an endpoint to update an item using a PUT request. It uses Pydantic to define the structure of the request body and type hints for data validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code snippet demonstrates the simplest possible FastAPI application. It defines a single endpoint that returns a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Declaring Variables and Pydantic Models with Types in Python
DESCRIPTION: This code demonstrates how to declare variables with type hints and define Pydantic models using Python's type annotations. It showcases the use of type hints for function parameters and return values, as well as the creation of a Pydantic model with type-annotated fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import List, Dict
from datetime import date

from pydantic import BaseModel

# Deklarieren Sie eine Variable als ein `str`
# und bekommen Sie Editor-Unterstützung innerhalb der Funktion
def main(user_id: str):
    return user_id


# Ein Pydantic-Modell
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Install Packages from requirements.txt using uv
DESCRIPTION: This command installs packages from a `requirements.txt` file using `uv`. The `-r` flag specifies the file containing the list of packages to install.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/virtual-environments.md#_snippet_13

LANGUAGE: Shell
CODE:
```
uv pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Enforcing HTTPS/WSS with HTTPSRedirectMiddleware - Python
DESCRIPTION: Shows how to add `HTTPSRedirectMiddleware` to a FastAPI application to automatically redirect all incoming HTTP or WS requests to their secure HTTPS or WSS counterparts. This middleware helps enforce secure communication across the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)
```

----------------------------------------

TITLE: Handling GZip Compression with GZipMiddleware - Python
DESCRIPTION: Illustrates how to add `GZipMiddleware` to a FastAPI application to automatically compress responses for clients that include `"gzip"` in their `Accept-Encoding` header. It supports configuration parameters like `minimum_size` to control when compression is applied and `compresslevel` for compression intensity.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.gzip import GZipMiddleware

app = FastAPI()

app.add_middleware(GZipMiddleware, minimum_size=1000)
```

----------------------------------------

TITLE: Defining Pydantic Models (Python 3.8+)
DESCRIPTION: Shows how to define a Pydantic model using type hints for data validation and structure, suitable for Python 3.8+ environments. Pydantic leverages these definitions for automatic data handling, including `List` from the `typing` module for collections.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_29

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional, List
from pydantic import BaseModel

class Order(BaseModel):
    order_id: int
    customer_name: str
    total_amount: float
    items: List[str] = []
    delivery_date: Optional[datetime] = None
```

----------------------------------------

TITLE: Type Hints with Metadata Annotations (Python 3.9+)
DESCRIPTION: Demonstrates how to use `Annotated` in Python 3.9+ to add metadata to type hints. This allows providing extra information about the type, such as a description, which can be used by FastAPI for validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_17

LANGUAGE: Python
CODE:
```
from typing import Annotated

from typing import Optional

from fastapi import Query


async def read_items(
    q: Annotated[Optional[str], Query(title="Search query", max_length=50)] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Using the Settings Object
DESCRIPTION: Instantiate the Settings class and access the configuration values. The values are automatically read from environment variables and converted to the specified data types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_4

LANGUAGE: python
CODE:
```
from .config import settings


async def get_app_name():
    return {"app_name": settings.app_name}

```

----------------------------------------

TITLE: Annotated Type Hint Example (Python 3.8+)
DESCRIPTION: This example shows how to use `Annotated` to add metadata to type hints in Python 3.8+. The `Annotated` type allows attaching extra metadata to type hints, which can be used by FastAPI to influence application behavior. The first type parameter passed to `Annotated` is the actual type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_24

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial013.py!}
```

----------------------------------------

TITLE: Token Endpoint Implementation in FastAPI
DESCRIPTION: This snippet shows how to implement a token endpoint in FastAPI that generates and returns a JWT token upon successful user authentication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: python
CODE:
```
@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Defining a Path Operation Function (Sync)
DESCRIPTION: This code snippet shows an example of a synchronous path operation function that returns a simple JSON response. FastAPI will call this function when it receives a GET request to the root path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Raising HTTPException with Status Code
DESCRIPTION: This code snippet demonstrates how to raise an HTTPException with a specific status code (404 in this case) when an item is not found. The detail parameter provides a message to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": {"name": "The Foo Wrestlers"}}


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return items[item_id]
```

----------------------------------------

TITLE: Query Parameter with min_length and max_length (Annotated)
DESCRIPTION: This snippet demonstrates how to define a query parameter with both minimum and maximum length constraints using the Annotated approach. It showcases the recommended way to validate string inputs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#_snippet_8

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(min_length=3, max_length=50)] = "george"
```

----------------------------------------

TITLE: 비동기 함수 정의하기
DESCRIPTION: `async def`를 사용하여 비동기를 지원하는 함수를 정의합니다. `await` 키워드는 파이썬에게 작업이 완료되기를 기다리라고 지시합니다.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Asynchronous Path Operation Function
DESCRIPTION: Defines a FastAPI path operation function using `async def` to handle asynchronous operations, such as calling an asynchronous library with `await`. This is suitable for I/O-bound operations where the function needs to wait for external resources.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Creating SQLModel Database Model
DESCRIPTION: Defines a Hero class inheriting from SQLModel, representing a database table. Includes fields for id (primary key), name, secret_name, age, and indexes for optimized querying. The table=True argument specifies that this model represents a database table.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlmodel import Field, SQLModel


class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Using `Annotated` for Metadata (Python 3.9+)
DESCRIPTION: Demonstrates the use of `Annotated` from the standard `typing` module in Python 3.9+ to add additional metadata to type hints. The first parameter to `Annotated` is the actual type, while subsequent parameters provide metadata for tools like FastAPI or Pydantic's `Field`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_30

LANGUAGE: Python
CODE:
```
from typing import Annotated
from pydantic import BaseModel, Field

class ModelWithAnnotated(BaseModel):
    item_name: Annotated[str, Field(min_length=3, max_length=50)]
```

----------------------------------------

TITLE: Dockerfile with Poetry for Dependency Management
DESCRIPTION: This Dockerfile uses a multi-stage build to manage dependencies with Poetry. The first stage installs Poetry and generates a requirements.txt file, which is then used in the second stage to install the application dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_18

LANGUAGE: Dockerfile
CODE:
```
# (1)
FROM python:3.9 as requirements-stage

# (2)
WORKDIR /tmp

# (3)
RUN pip install poetry

# (4)
COPY ./pyproject.toml ./poetry.lock* /tmp/

# (5)
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# (6)
FROM python:3.9

# (7)
WORKDIR /code

# (8)
COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

# (9)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (10)
COPY ./app /code/app

# (11)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Defining an Async Path Operation Function in FastAPI
DESCRIPTION: This code snippet shows how to define an asynchronous path operation function in FastAPI. This function is associated with a specific path and HTTP method using a decorator (e.g., `@app.get("/")`). FastAPI calls this function whenever it receives a request to the specified URL with the corresponding HTTP method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Using async def in FastAPI Path Operation
DESCRIPTION: Demonstrates how to define an asynchronous path operation function in FastAPI using `async def`. This allows the function to handle requests concurrently, improving performance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Dockerfile for FastAPI Application
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the application requirements and source code, installs the dependencies, and defines the command to run the FastAPI application using Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Pydantic Model Definition with Type Annotations (Python 3.10+)
DESCRIPTION: This code snippet demonstrates how to define a Pydantic model with type annotations in Python 3.10+. It defines a class User with attributes id, name, signup_ts, and friends, specifying their types. Pydantic uses these type annotations for data validation and conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_19

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(repr(user.signup_ts))
print(user.friends)
```

----------------------------------------

TITLE: Running Uvicorn Server Conditionally (Python)
DESCRIPTION: This line of Python code starts the Uvicorn server for the FastAPI application. It is typically placed inside an `if __name__ == "__main__":` block to ensure it only runs when the script is executed directly, not when imported as a module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/debugging.md#_snippet_3

LANGUAGE: Python
CODE:
```
uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Password Hashing and JWT Token Generation
DESCRIPTION: This snippet demonstrates password hashing using PassLib and JWT token generation using the `jose` library. It includes functions for hashing passwords, verifying passwords, generating access tokens, and defining a Pydantic model for token responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: Python
CODE:
```
from datetime import datetime, timedelta
from typing import Optional

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Optional[str] = None


SECRET_KEY = "YOUR_SECRET_KEY"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30


pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password):
    return pwd_context.hash(password)


def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Including Routers in Main App (Python)
DESCRIPTION: Uses app.include_router() to integrate path operations from APIRouter instances (users.router, items.router) defined in imported modules into the main FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_18

LANGUAGE: Python
CODE:
```
app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This instruction defines the command to run the FastAPI application using Uvicorn. It specifies the host, port, and application module to be executed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_24

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Defining a Dependency Function in FastAPI
DESCRIPTION: This Python function serves as a dependency, accepting parameters like `q`, `skip`, and `limit`. It processes these inputs and returns a dictionary containing their values, which can then be injected into FastAPI path operations. It demonstrates how a dependency function can take arguments similar to path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Database Dependency Setup with Yield (Python)
DESCRIPTION: This snippet demonstrates the initial part of a database dependency using `yield`. The code before and including `yield` is executed before the path operation, setting up the database session. The yielded value (`db`) is then injected into the dependent function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_db():
    db = DBSession()
    try:
        yield db
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This command starts the FastAPI development server using `fastapi dev`. It automatically reloads the application on code changes and provides URLs for the application and its interactive documentation. The server runs on `http://127.0.0.1:8000` by default.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: console
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Defining Path Operations using FastAPI APIRouter
DESCRIPTION: This example demonstrates how to define multiple path operations (GET requests in this case) using the APIRouter instance. Each operation is associated with a specific path and can include tags for documentation purposes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()

@router.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]

@router.get("/users/me", tags=["users"])
async def read_user_me():
    return {"username": "fakecurrentuser"}

@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Defining a Pydantic Data Model for Request Body - Python
DESCRIPTION: This code defines a Pydantic model named `Item` by inheriting from `BaseModel`. It specifies the expected data structure for a request body, including required fields (`name`, `price`) and optional fields (`description`, `tax`) with default `None` values, enabling automatic data validation and serialization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Reading Hero Data
DESCRIPTION: This snippet demonstrates how to read hero data from the database using select(). It includes limit and offset for pagination.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
statement = select(Hero).offset(offset).limit(limit)
    result = await session.execute(statement)
    heroes = result.scalars().all()
```

----------------------------------------

TITLE: Testing FastAPI Application with Relative Import
DESCRIPTION: This snippet illustrates how to test a FastAPI application when the test file (`test_main.py`) resides in the same Python package as the application file (`main.py`). It uses a relative import to access the `app` object and then tests the root endpoint using `TestClient`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from .main import app

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Defining FastAPI Models and Path Operations
DESCRIPTION: This Python snippet demonstrates a basic FastAPI application defining Pydantic models for request and response payloads (`Item` and `ResponseMessage`) and implementing path operations. These models are crucial as they provide the schema information used by OpenAPI for client generation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None

class ResponseMessage(BaseModel):
    message: str

app = FastAPI()

@app.get("/")
async def read_root():
    return {"Hello": "World"}

@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"name": "Foo", "price": 42.0, "is_offer": True}

@app.put("/items/{item_id}", response_model=ResponseMessage)
async def update_item(item_id: int, item: Item):
    return {"message": f"Item {item.name} updated successfully for ID {item_id}"}
```

----------------------------------------

TITLE: Returning Data from Path Operation Function
DESCRIPTION: This code snippet illustrates how to return data from a path operation function in FastAPI.  The returned data, in this case a dictionary, is automatically converted to JSON in the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Running FastAPI App (Console)
DESCRIPTION: Provides the command-line command fastapi dev app/main.py to start the FastAPI development server (Uvicorn) with auto-reloading for the specified application file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_22

LANGUAGE: Console
CODE:
```
fastapi dev app/main.py
```

----------------------------------------

TITLE: Prosty plik FastAPI
DESCRIPTION: Definiuje podstawową aplikację FastAPI z jednym endpointem zwracającym wiadomość JSON. Używa FastAPI do utworzenia instancji aplikacji i definiuje endpoint '/' zwracający słownik, który FastAPI konwertuje na odpowiedź JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Defining a GET Path Operation in FastAPI
DESCRIPTION: This snippet illustrates how to define a GET path operation in FastAPI. It uses the @app.get() decorator to associate the read_url function with the /some/url endpoint, returning a JSON response. This demonstrates FastAPI's server-side API building, mirroring the simplicity of Requests for client-side operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Using async def for Path Operation Functions in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a path operation function using `async def` in FastAPI to handle asynchronous operations. It uses `await` to call an asynchronous function `get_burgers` and returns the result.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/async.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.8+)
DESCRIPTION: Defines a Pydantic model `User` with attributes `id`, `name`, and `signup_ts`. Pydantic validates and converts data to the appropriate types when an instance of the model is created.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_22

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: list[int] = []
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.9+)
DESCRIPTION: This code defines a Pydantic model named `User` with attributes `id`, `name`, `signup_ts`, and `friends`. It demonstrates how Pydantic validates and converts data to the specified types. The `signup_ts` field is optional and can be `None`. The `friends` field is a list of `int`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/python-types.md#_snippet_20

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': 123,
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(user.friends)
```

----------------------------------------

TITLE: Configuring HTTPS Redirect Middleware in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to add the `HTTPSRedirectMiddleware` to a FastAPI application. This middleware automatically redirects all incoming `http` or `ws` requests to their secure `https` or `wss` counterparts, ensuring secure communication. It requires no additional parameters and is typically used to enforce secure connections across the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)
```

----------------------------------------

TITLE: Defining Separate Input and Output Models in FastAPI
DESCRIPTION: This example defines separate Pydantic models for input (`UserIn`) and output (`UserOut`), allowing you to control which data is included in the API response. The `response_model` parameter is used to specify the output model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, EmailStr


class UserIn(BaseModel):
    email: EmailStr
    password: str
    first_name: str
    last_name: Optional[str] = None


class UserOut(BaseModel):
    email: EmailStr
    first_name: str
    last_name: Optional[str] = None
```

----------------------------------------

TITLE: Defining Python Types and Pydantic Models
DESCRIPTION: This snippet demonstrates how to use standard Python type hints for function parameters and define a data model using Pydantic's BaseModel. Pydantic models provide data validation and serialization, leveraging Python's type annotations. It shows a simple function with a typed argument and a `User` model with `int`, `str`, and `date` fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Adding Middleware to FastAPI Application using add_middleware in Python
DESCRIPTION: This snippet illustrates the recommended way to add middleware in FastAPI (and Starlette) using the `app.add_middleware()` method. It takes the middleware class as the first argument, followed by any keyword arguments for the middleware's constructor. This method correctly integrates the middleware into the FastAPI application's processing chain, handling data and custom exceptions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: FastAPI Asynchronous Path Operation
DESCRIPTION: Demonstrates a FastAPI path operation defined as an `async def` function. This allows the endpoint to `await` asynchronous operations, such as fetching burgers, without blocking the server and enabling concurrent handling of multiple requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Using Context Managers in FastAPI Dependencies with yield
DESCRIPTION: Illustrates how to use context managers within FastAPI dependencies that use `yield`. This allows for resource management and cleanup within the dependency's lifecycle, ensuring resources are properly handled even if exceptions occur.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def get_db():
    db = FakeDatabase()
    try:
        yield db
    finally:
        await db.close()


@app.get("/items/", dependencies=[Depends(get_db)])
async def read_items():
    return [{
        "item_id": "Foo"
    }]
```

----------------------------------------

TITLE: Running the FastAPI application with Uvicorn
DESCRIPTION: This command runs the FastAPI application using Uvicorn. `main:app` specifies the module (`main.py`) and the application instance (`app`). The `--reload` flag enables automatic reloading upon code changes, suitable for development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/index.md#_snippet_4

LANGUAGE: shell
CODE:
```
$ uvicorn main:app --reload
```

----------------------------------------

TITLE: Importing HTTPException in FastAPI
DESCRIPTION: Import the HTTPException class from the fastapi module. This class is used to raise HTTP exceptions and return error responses to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException
```

----------------------------------------

TITLE: Running FastAPI server with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, a fast ASGI server. The `--reload` flag enables automatic server restart upon code changes, intended for development use.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_4

LANGUAGE: bash
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Building a FastAPI Docker Image
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a FastAPI application. It starts from a Python 3.9 base image, sets the working directory, copies `requirements.txt`, installs dependencies, copies the application code, and sets the default command to run the FastAPI application using `fastapi run`. It also includes a commented-out line for running behind a proxy.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["fastapi", "run", "app/main.py", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["fastapi", "run", "app/main.py", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Define Synchronous Path Operation Function
DESCRIPTION: This code snippet defines a synchronous path operation function `def root():` that will be called by FastAPI when it receives a GET request to the `/` URL. It returns a dictionary that FastAPI automatically converts to JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Building a FastAPI Docker Image
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a FastAPI application. It starts from a Python base image, sets the working directory, copies `requirements.txt`, installs dependencies, copies the application code, and defines the command to run the Uvicorn server.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a complex item model in FastAPI using Python type hints. FastAPI uses this type information for automatic data validation and conversion of request bodies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Activating Virtual Environment
DESCRIPTION: This command activates a Python virtual environment. It modifies the shell's environment variables to use the Python interpreter and packages installed within the specified virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_32

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Defining a Request Body with Pydantic
DESCRIPTION: This code extends the FastAPI application to handle PUT requests with a request body. It defines a Pydantic model `Item` to represent the structure of the request body, including name, price, and an optional offer flag.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Dict Declaration (Python 3.8+)
DESCRIPTION: This snippet demonstrates how to declare a dictionary with string keys and float values in Python 3.8+. It uses `Dict` from the `typing` module for type hinting.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Dict


prices: Dict[str, float]
```

----------------------------------------

TITLE: Type Hints for Error Detection
DESCRIPTION: This example demonstrates how type hints can help detect errors. The `age` parameter is annotated as an integer, but the code attempts to concatenate it directly with a string, which would raise a TypeError without proper conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
def get_name_with_age(name: str, age: int):
    name_with_age = name + " is this old: " + age
    return name_with_age
```

----------------------------------------

TITLE: Recommended CMD Exec Form for FastAPI
DESCRIPTION: Illustrates the correct 'exec' form for the `CMD` instruction in a Dockerfile, which is crucial for FastAPI applications to ensure proper shutdown and trigger lifespan events. This form passes arguments as a JSON array.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: Defining Pydantic Models (Python 3.9+)
DESCRIPTION: Illustrates defining a Pydantic model for data validation and structure, compatible with Python 3.9+ syntax. It shows how Pydantic uses type hints to validate and convert data, providing a robust way to define expected data shapes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_28

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional
from pydantic import BaseModel

class Product(BaseModel):
    product_id: int
    name: str
    price: float
    is_available: bool = True
    categories: list[str] = []
```

----------------------------------------

TITLE: Defining Path Operations with Specific Order in FastAPI
DESCRIPTION: This snippet demonstrates the importance of path operation order in FastAPI. The more specific path `/users/me` must be declared before the more general `/users/{user_id}` to ensure the correct handler is invoked, preventing the general path from incorrectly matching the specific one.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}

@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Returning Input User Object in FastAPI Endpoint
DESCRIPTION: This line within a FastAPI path operation function demonstrates returning the `user` object, which was received as input and potentially contains sensitive data like a password. Despite returning the full input object, FastAPI's `response_model` (set to `UserOut` in the decorator) will automatically filter the output to only include fields defined in `UserOut`, ensuring data security.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/response-model.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

class UserIn(BaseModel):
    username: str
    password: str
    email: Union[str, None] = None
    full_name: Union[str, None] = None

class UserOut(BaseModel):
    username: str
    email: Union[str, None] = None
    full_name: Union[str, None] = None

app = FastAPI()

@app.post("/user/", response_model=UserOut)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Defining Async Path Operation with Await - FastAPI Python
DESCRIPTION: This FastAPI path operation function `read_burgers` is defined as `async def`, allowing it to correctly `await` the `get_burgers` asynchronous function. This demonstrates the proper pattern for integrating asynchronous operations within FastAPI route handlers, ensuring that I/O-bound tasks do not block the event loop. The `@app.get('/burgers')` decorator registers this function as an HTTP GET endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Pydantic `BaseSettings` for Dependency Injection
DESCRIPTION: This `Settings` class is designed to be used with dependency injection frameworks (like FastAPI's dependency system). By not instantiating `Settings()` directly within the configuration file, it allows the framework to manage its lifecycle and provide it as a dependency where needed, promoting testability and modularity.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_10

LANGUAGE: python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field

class Settings(BaseSettings):
    model_config = SettingsConfigDict(env_file=".env", extra="ignore")

    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = Field(50, gt=0, le=100)
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi

---> 100%
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn - Command Line
DESCRIPTION: This command line snippet demonstrates how to run a FastAPI application using Uvicorn. `uvicorn main:app` specifies the module (`main`) and the FastAPI application instance (`app`), while `--reload` enables auto-reloading on code changes for development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_18

LANGUAGE: Shell
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Defining a Dependency with use_cache=False (Annotated)
DESCRIPTION: This snippet defines an asynchronous dependency `needy_dependency` that receives a `fresh_value`. It demonstrates how to explicitly disable caching for a dependency (`get_value`) by setting `use_cache=False` within `Depends`, ensuring the dependency is called on every request rather than using a cached value. This version utilizes `Annotated` for type hinting, which is the preferred modern Python syntax.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/sub-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):
    return {"fresh_value": fresh_value}
```

----------------------------------------

TITLE: Running Uvicorn Server in Docker Container
DESCRIPTION: This command sets the default command to run when the Docker container starts. It uses Uvicorn to serve the FastAPI application, specifying the module `app.main` and the `app` object. The `--host` and `--port` options configure the server to listen on all interfaces and port 80, respectively.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This command demonstrates how to start the FastAPI development server using `fastapi dev main.py`. It automatically detects the FastAPI application and runs it with Uvicorn, enabling auto-reload for local development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_5

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Running the FastAPI Development Server
DESCRIPTION: This console command demonstrates how to start the FastAPI development server using `fastapi dev main.py`. This command automatically detects the FastAPI application and runs it with Uvicorn, enabling auto-reload for local development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_3

LANGUAGE: Console
CODE:
```
$ fastapi dev main.py

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Running FastAPI Application
DESCRIPTION: This console command uses Uvicorn to serve the FastAPI application, enabling automatic reloading on code changes. It targets the app instance within the main.py file, making the API accessible locally.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: console
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Running Uvicorn behind a TLS Termination Proxy
DESCRIPTION: This Dockerfile command configures Uvicorn to run behind a TLS termination proxy (e.g., Nginx, Traefik) by adding the `--proxy-headers` option. This ensures that Uvicorn correctly handles forwarded headers from the proxy.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_19

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Dockerfile for TLS Proxy with Poetry
DESCRIPTION: This Dockerfile configures the FastAPI application to run behind a TLS termination proxy (like Nginx or Traefik) by adding the `--proxy-headers` option to the uvicorn command.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_20

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Creating a Docker Image for FastAPI
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the requirements file, installs the dependencies, copies the application code, and defines the command to run the FastAPI application using Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# Wenn Sie hinter einem Proxy wie Nginx oder Traefik sind, fügen Sie --proxy-headers hinzu
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Example Dockerfile for Single-File FastAPI App
DESCRIPTION: This Dockerfile configures a container for a FastAPI application contained in a single file (main.py). It copies the requirements.txt and main.py files, installs dependencies, and runs the Uvicorn server, importing the app from the main module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)
COPY ./main.py /code/

# (2)
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Installing Uvicorn Standard Dependencies
DESCRIPTION: This command installs Uvicorn, the ASGI server, with its standard dependencies. Uvicorn is a crucial component for running FastAPI applications efficiently, especially in production environments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_3

LANGUAGE: Shell
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet shows how to create an instance of the FastAPI class. This instance, typically named 'app', serves as the main point of interaction for defining and managing the API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.10+)
DESCRIPTION: Defines a Pydantic model `User` with attributes `id`, `name`, and `signup_ts`. Pydantic validates and converts data to the appropriate types when an instance of the model is created.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_20

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: list[int] = []
```

----------------------------------------

TITLE: Define API endpoints with FastAPI and Pydantic
DESCRIPTION: This Python code defines several API endpoints using FastAPI, including GET and PUT requests. It uses Pydantic to define the structure of the request body for the PUT request, ensuring data validation and type hints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_6

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining Python Types and Pydantic Models
DESCRIPTION: This snippet demonstrates the use of standard Python type hints for function parameters and the definition of a data model using Pydantic's BaseModel. It showcases how to declare a string type for a function argument and define a 'User' model with integer, string, and date fields, leveraging Python's built-in 'datetime.date' and Pydantic for structured data validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This snippet demonstrates how to install Uvicorn, an ASGI server, using pip. Uvicorn is required to run FastAPI applications in a production environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/yo/docs/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Defining a GET operation in FastAPI
DESCRIPTION: This snippet shows how to define a GET operation (route) in FastAPI using the `@app.get()` decorator. It demonstrates the similarity in syntax to Requests, making it easy to understand and use.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Updating Items with Request Body using Pydantic
DESCRIPTION: This code snippet demonstrates how to receive and process a request body in a FastAPI application using Pydantic for data validation and serialization. It defines a Pydantic model `Item` to represent the expected structure of the request body and uses it as a parameter in the `update_item` route.  The route then returns a JSON response containing the item name and ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Creating a Hero Entry in FastAPI with SQLModel
DESCRIPTION: This FastAPI endpoint handles the creation of a new `Hero` entry. It accepts a `Hero` object from the request body, adds it to the database session, commits the transaction, refreshes the object to include database-generated fields (like `id`), and returns the created hero.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.post("/heroes/", response_model=Hero)
def create_hero(*, session: SessionDep, hero: Hero):
    session.add(hero)
    session.commit()
    session.refresh(hero)
    return hero
```

----------------------------------------

TITLE: Declaring a Dependency in Path Operation
DESCRIPTION: This code snippet demonstrates how to declare a dependency in a FastAPI path operation function using `Depends`. The `common_parameters` function is passed to `Depends`, and FastAPI will automatically call this function and inject its return value into the path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Defining Asynchronous Functions with async def
DESCRIPTION: Illustrates how to define an asynchronous function using `async def`. This declaration signals to Python that the function can be 'paused' at `await` expressions, allowing the event loop to switch to other tasks.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Returning a Dictionary from a FastAPI Route
DESCRIPTION: Demonstrates returning a dictionary from a FastAPI route function. FastAPI automatically converts this dictionary into a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Importing CORSMiddleware in FastAPI
DESCRIPTION: This snippet demonstrates how to import the CORSMiddleware class, which is used to handle Cross-Origin Resource Sharing (CORS) policies in a FastAPI application. It allows you to configure which origins, methods, and headers are permitted for cross-origin requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/middleware.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.middleware.cors import CORSMiddleware
```

----------------------------------------

TITLE: Defining File and Form Parameters in FastAPI Path Operations
DESCRIPTION: This code defines parameters within a FastAPI path operation to accept both file uploads and form data. `file` receives raw bytes, `fileb` receives an `UploadFile` object for more metadata, and `token` captures a string from a form field. All are declared as required parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#_snippet_2

LANGUAGE: Python
CODE:
```
file: bytes = File(...),
fileb: UploadFile = File(...),
token: str = Form(...),
```

----------------------------------------

TITLE: Demonstrating Type Hint Error Detection - Python
DESCRIPTION: This snippet illustrates how type hints facilitate error detection in Python. The `get_name_and_age` function is defined with `name` as `str` and `age` as `int`. The code attempts to concatenate a string and an integer, which is a type mismatch, and editors can flag this as an error due to the type hints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
def get_name_and_age(name: str, age: int):
    return name + age
```

----------------------------------------

TITLE: Implementing Custom ID Validation with AfterValidator in Python
DESCRIPTION: This snippet demonstrates how to create a custom validator function (`validate_item_id`) using Pydantic's `AfterValidator` and `Annotated` in FastAPI. It ensures that an item ID string starts with either 'isbn-' or 'imdb-', raising a `ValueError` if the condition is not met, and shows how to apply this validator to a path parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_24

LANGUAGE: python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query
from pydantic import AfterValidator

app = FastAPI()

def validate_item_id(value: str):
    if not value.startswith(("isbn-", "imdb-")):
        raise ValueError("Item ID must start with 'isbn-' or 'imdb-'")
    return value

ItemId = Annotated[str, AfterValidator(validate_item_id)]

@app.get("/items/{item_id}")
async def read_item(item_id: ItemId):
    return {"item_id": item_id, "message": "Item ID is valid"}
```

----------------------------------------

TITLE: Declaring a Model Parameter in FastAPI
DESCRIPTION: This code snippet shows how to declare a parameter as a Pydantic model in a FastAPI endpoint. The `item` parameter is declared as an instance of the `Item` model, allowing for complex data validation and conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` using Python's format string syntax within a FastAPI route. The value of `item_id` is passed to the function as an argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining an Optional Query Parameter - Python
DESCRIPTION: This snippet defines a FastAPI path operation that accepts an optional query parameter `q` of type string. If `q` is provided, it's included in the response; otherwise, it's omitted. This demonstrates a basic optional query parameter without additional validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/query-params-str-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def read_items(q: Union[str, None] = None):
```

----------------------------------------

TITLE: Installing Uvicorn ASGI server
DESCRIPTION: This snippet shows how to install Uvicorn, an ASGI server, which is required for running FastAPI applications in production.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Simplified Parameter Ordering with Annotated (No * needed)
DESCRIPTION: This snippet demonstrates that when using `Annotated` for path and query parameters, the `*` trick for parameter ordering is unnecessary. `Annotated` allows flexible parameter declaration order as `Path` and `Query` are not used as default values.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_5

LANGUAGE: Python
CODE:
```
    item_id: Annotated[int, Path(title="The ID of the item to get")],
    q: Annotated[str, Query(min_length=3)]
```

----------------------------------------

TITLE: Dockerfile for Larger Applications with Uvicorn and Gunicorn
DESCRIPTION: This Dockerfile is tailored for larger applications with multiple files, using the tiangolo/uvicorn-gunicorn-fastapi base image, copying the requirements, installing dependencies, and copying the application code to a specific directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_16

LANGUAGE: dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

----------------------------------------

TITLE: Function with type hints
DESCRIPTION: This example shows how to add type hints to the function parameters. By specifying the types, editors and tools can provide better code completion and error checking.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Pydantic Model with Optional Fields and Default Values
DESCRIPTION: This Pydantic `Item` model demonstrates fields with default values: `description` is optional and defaults to `None`, `tax` defaults to `10.5`, and `tags` defaults to an empty list. These defaults are used when values are not explicitly provided, influencing how data is serialized and potentially omitted from responses using `response_model_exclude_unset`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/response-model.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import List, Union

from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: float = 10.5
    tags: List[str] = []

app = FastAPI()

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},
    "baz": {"name": "Baz", "description": None, "price": 50.2, "tax": 10.5, "tags": []}
}

@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Install FastAPI package using uv
DESCRIPTION: This command installs the FastAPI package with the 'standard' extras using uv. The 'standard' extras include commonly used dependencies that enhance FastAPI's functionality.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_11

LANGUAGE: console
CODE:
```
uv pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Initializing Database Session Dependency with FastAPI
DESCRIPTION: This snippet creates a FastAPI dependency using `yield` to provide a new database session for each request, ensuring a single session per request. It uses `Annotated` to simplify the code that uses this dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_session() -> Generator[Session, None, None]:
    async with async_engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)
        async with AsyncSession(conn) as session:
            yield session
```

----------------------------------------

TITLE: Raise HTTPException with status code
DESCRIPTION: This code snippet demonstrates how to raise an HTTPException with a specific status code (404 in this case) when an item is not found.  It shows how to return a custom detail message in the JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": "The Foo Wrestlers"}


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Implementing HTTP Basic Authentication in FastAPI
DESCRIPTION: This snippet demonstrates how to set up HTTP Basic Authentication in a FastAPI application. It imports `HTTPBasic` and `HTTPBasicCredentials`, initializes `HTTPBasic` as a security dependency, and then uses `Depends(security)` in a path operation function to automatically receive `HTTPBasicCredentials` containing the username and password provided by the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/http-basic-auth.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()

@app.get("/users/me")
def read_current_user(credentials: HTTPBasicCredentials = Depends(security)):
    return {"username": credentials.username, "password": credentials.password}
```

----------------------------------------

TITLE: Creating a Session Dependency
DESCRIPTION: This snippet shows how to create a FastAPI dependency using yield to create a new database session for each request. It also demonstrates how to create an Annotated dependency for easier use.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_session():
    async with async_session_maker() as session:
        yield session

SessionDep = Annotated[AsyncSession, Depends(get_session)]
```

----------------------------------------

TITLE: Pydantic Model Declaration
DESCRIPTION: Defines a Pydantic model `User` with type annotations for data validation and serialization. It showcases the use of `BaseModel` and type hints to define the structure of the `User` object, including `id` as an integer, `name` as a string, and `joined` as a date.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Zadeklaruj parametr jako str
# i uzyskaj wsparcie edytora wewnątrz funkcji
def main(user_id: str):
    return user_id


# Model Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn (Console)
DESCRIPTION: This command starts the Uvicorn server, pointing it to the FastAPI application instance (`app`) within the `main.py` file. It configures the server to listen on all available network interfaces (`0.0.0.0`) on port `80`, making the application accessible.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/manually.md#_snippet_3

LANGUAGE: console
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 80
```

----------------------------------------

TITLE: Pydantic Model Definition with Type Annotations (Python 3.9+)
DESCRIPTION: This code snippet demonstrates how to define a Pydantic model with type annotations in Python 3.9+. It defines a class User with attributes id, name, signup_ts, and friends, specifying their types. Pydantic uses these type annotations for data validation and conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_20

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(repr(user.signup_ts))
print(user.friends)
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, a fast ASGI server. `main:app` specifies the `app` instance from `main.py`. The `--reload` flag enables automatic server restart on code changes, which is highly useful for development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
<span style="color: green;">INFO</span>:     Started reloader process [28720]
<span style="color: green;">INFO</span>:     Started server process [28722]
<span style="color: green;">INFO</span>:     Waiting for application startup.
<span style="color: green;">INFO</span>:     Application startup complete.
```

----------------------------------------

TITLE: Password Hashing Example
DESCRIPTION: This code snippet shows how to hash passwords for security purposes. Hashing transforms a password into a seemingly random string of bytes, making it impossible to reverse engineer the original password from the hash.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#_snippet_3

LANGUAGE: Python
CODE:
```
return user
```

----------------------------------------

TITLE: Asynchronous Path Operation Function Definition
DESCRIPTION: When a path operation function is declared with `async def`, it's handled asynchronously. If the path operation function does not perform blocking I/O, using `async def` is recommended.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/async.md#_snippet_7

LANGUAGE: python
CODE:
```
async def path_operation_function():
    # some asynchronous operation
    return
```

----------------------------------------

TITLE: Awaiting Asynchronous Operations in Python
DESCRIPTION: This code snippet demonstrates how to use the `await` keyword in Python to wait for an asynchronous operation to complete before assigning the result to a variable. This allows Python to perform other tasks while waiting, improving efficiency in concurrent applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Dependency Injection with yield and HTTPException (Python 3.9+)
DESCRIPTION: This code demonstrates how to use dependencies with `yield` and `HTTPException` in FastAPI. It includes a `try` block to catch exceptions and raise an `HTTPException` in the exit code after the `yield`. The dependency checks for a token and raises an exception if it's invalid, otherwise it yields control to the route function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    if token == "jflsdkjf":
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password", headers={"WWW-Authenticate": "Bearer"})
    return "The user"


@app.get("/items/")
async def read_items(current_user: Annotated[str, Depends(get_current_user)]):
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


async def get_db():
    try:
        db = "fake_db"
        yield db
    except:  # noqa: E722
        print("Oooops, there was an error")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal error")
    finally:
        print("Closing connection")


@app.get("/db-items/")
async def read_db_items(db: Annotated[str, Depends(get_db)]):
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]
```

----------------------------------------

TITLE: Declaring Class Dependency in Path Operation (Annotated)
DESCRIPTION: This snippet shows the preferred way to declare a class-based dependency, `CommonQueryParams`, within a FastAPI path operation function using `Annotated` and `Depends`. The type annotation `CommonQueryParams` provides strong type hints for editor support, while `Depends(CommonQueryParams)` instructs FastAPI on how to resolve the dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]
```

----------------------------------------

TITLE: Importing Depends for Dependency Injection (Python)
DESCRIPTION: This snippet shows the essential import statement for `Depends` from the `fastapi` module. `Depends` is a crucial utility in FastAPI's dependency injection system, enabling the declaration and automatic injection of dependencies into path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends, Query
```

----------------------------------------

TITLE: Create Hero with HeroCreate and return HeroPublic
DESCRIPTION: Demonstrates how to receive a `HeroCreate` data model in a request, create a `Hero` table model based on it, and return a `HeroPublic` data model as the response. FastAPI handles the validation and serialization using the specified `response_model`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_14

LANGUAGE: Python
CODE:
```
@app.post("/heroes/", response_model=HeroPublic)
```

LANGUAGE: Python
CODE:
```
def create_hero(hero: HeroCreate, db: Session = Depends(get_db)):
    db_hero = Hero.from_orm(hero)
    db.add(db_hero)
    db.commit()
    db.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Defining HeroCreate Data Model in Python
DESCRIPTION: This snippet defines the `HeroCreate` Pydantic model, used for validating data received when creating a new hero. It includes the `secret_name` field, which is accepted during creation but not exposed in public responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Optional
from sqlmodel import Field, SQLModel

class HeroBase(SQLModel):
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)

class HeroCreate(HeroBase):
    secret_name: str
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet imports the FastAPI class, which is essential for creating a FastAPI application. It provides the core functionality for defining API endpoints and handling requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer as a Dependency
DESCRIPTION: This code snippet demonstrates how to use the OAuth2PasswordBearer scheme as a dependency in a FastAPI path operation. The dependency ensures that the client provides a valid Bearer token in the Authorization header. If the token is missing or invalid, FastAPI automatically returns a 401 Unauthorized error.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: FastAPI Application Code
DESCRIPTION: This FastAPI application defines two endpoints: a root endpoint that returns a simple greeting and an item endpoint that returns item details based on the provided item ID and optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Pydantic Model Definition
DESCRIPTION: Defines a Pydantic model with type annotations for data validation and conversion. This example showcases a simple model with a name and description field.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_16

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
```

----------------------------------------

TITLE: Defining Lifespan Events with FastAPI
DESCRIPTION: This code defines a lifespan event handler for a FastAPI application. It simulates loading a machine learning model during startup (before the application starts receiving requests) and unloading it during shutdown (after the application has finished processing requests). This allows for resource management and cleanup during the application's lifecycle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager

from fastapi import FastAPI


fake_models_db = {}


async def fake_load_model(model_name: str):
    fake_models_db[model_name] = {}


async def fake_unload_model(model_name: str):
    del fake_models_db[model_name]


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    await fake_load_model("my_model")
    yield
    # Clean up the ML models and release the resources
    await fake_unload_model("my_model")


app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Basic Dockerfile for FastAPI
DESCRIPTION: This Dockerfile sets up a basic FastAPI application using the tiangolo/uvicorn-gunicorn-fastapi base image. It copies the requirements file, installs dependencies, and copies the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_17

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Using jsonable_encoder in a FastAPI PUT Endpoint
DESCRIPTION: This snippet illustrates the application of FastAPI's `jsonable_encoder` within a PUT endpoint. It converts an incoming Pydantic model instance, which includes a `datetime` field, into a JSON-compatible Python dictionary. This processed data is then stored in a simulated database, demonstrating how `jsonable_encoder` facilitates storing complex objects in systems that require JSON-friendly formats, automatically converting `datetime` to an ISO-formatted string.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/encoder.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import datetime

from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel

class Item(BaseModel):
    title: str
    timestamp: datetime
    description: str | None = None

app = FastAPI()

fake_db = {}

@app.put("/items/{id}")
def update_item(id: str, item: Item):
    json_compatible_item_data = jsonable_encoder(item)
    fake_db[id] = json_compatible_item_data
    return json_compatible_item_data
```

----------------------------------------

TITLE: Mounting Sub-Application to Main FastAPI App
DESCRIPTION: This snippet demonstrates how to integrate an independent FastAPI sub-application (subapi) into the main application (app) using app.mount(). The sub-application is mounted at the /subapi path, making its routes accessible under this prefix. This operation requires both the main app and the subapi instances to be defined and imported from fastapi.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()
subapi = FastAPI()

app.mount("/subapi", subapi)
```

----------------------------------------

TITLE: Initializing FastAPI App with Global Dependencies - Python
DESCRIPTION: Illustrates the main application file (`app/main.py`) where the `FastAPI` instance is created. It demonstrates how to declare global dependencies that will be applied to all path operations in the application, including those from included routers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

from .dependencies import get_query_token

from .routers import items, users

app = FastAPI(dependencies=[Depends(get_query_token)])

app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Main Application File - main.py
DESCRIPTION: Creates a dependency to provide settings to the application.  It defines a `get_settings` function that returns a new `Settings` instance and uses `@lru_cache` for caching.  The settings are then injected into the path operation function as a dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_10

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI

from .config import Settings

app = FastAPI()


@lru_cache()
def get_settings():
    return Settings()


@app.get("/items/")
async def read_items(settings: Settings = Depends(get_settings)):
    return {"app_name": settings.app_name, "admin_email": settings.admin_email}

```

----------------------------------------

TITLE: Importing the Depends Function
DESCRIPTION: This code imports the `Depends` function from the `fastapi` module. `Depends` is used to declare dependencies in path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
```

----------------------------------------

TITLE: Declaring an Optional Query Parameter with None Default
DESCRIPTION: This snippet declares an optional query parameter `q` that can be either a string or `None`. By setting its default value to `None`, FastAPI treats it as an optional parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
q: Union[str, None] = None
```

----------------------------------------

TITLE: Copy Application Code to Docker Container (Caching)
DESCRIPTION: Copies the application code from the ./app directory to the /code/app directory in the Docker container. This is done at the end of the Dockerfile to minimize cache invalidation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_12

LANGUAGE: Dockerfile
CODE:
```
COPY ./app /code/app
```

----------------------------------------

TITLE: Importing Query and Annotated (Python 3.10+)
DESCRIPTION: This snippet shows how to import `Query` from `fastapi` and `Annotated` from `typing` in Python 3.10 or later. `Annotated` is used to add metadata to type hints, enabling additional validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query
```

----------------------------------------

TITLE: Declaring Tuple and Set with Specific Subtypes - Python
DESCRIPTION: This snippet demonstrates how to declare `tuple` and `set` types with their respective subtypes using `typing.Tuple` and `typing.Set`. `Tuple[int, int, str]` specifies a tuple with fixed types at each position, while `Set[bytes]` indicates a set containing only bytes objects. This provides precise type information for complex data structures.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Tuple, Set

def process_collections(items_t: Tuple[int, int, str], items_s: Set[bytes]):
    print(f"Tuple items: {items_t}")
    print(f"Set items: {items_s}")
```

----------------------------------------

TITLE: Comparing Enum Members in FastAPI Path Operation
DESCRIPTION: This code snippet demonstrates how to compare the value of a path parameter (which is an Enum member) with the Enum members of the `ModelName` class. This allows you to perform different actions based on the specific value of the path parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: Python
CODE:
```
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}
```

----------------------------------------

TITLE: Path Parameter Ordering
DESCRIPTION: This example demonstrates the importance of path operation order in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to avoid the latter incorrectly matching `/users/me`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Basic FastAPI Application Testing with TestClient
DESCRIPTION: This snippet demonstrates how to test a basic FastAPI application using `TestClient`. It initializes the client with the FastAPI app, sends a GET request to the root path, and asserts the status code and JSON response. Tests are standard `def` functions, not `async def`, allowing direct use with `pytest`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()


@app.get("/")
async def read_main():
    return {"msg": "Hello World"}


client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Declaring Header Parameters with Pydantic Model - FastAPI Python
DESCRIPTION: This snippet demonstrates how to define a group of related header parameters using a Pydantic `BaseModel`. The `CommonHeaders` model defines `x_token` and `x_api_key` as optional string headers. This model is then injected into a FastAPI path operation function, allowing FastAPI to automatically parse the corresponding request headers into an instance of `CommonHeaders`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/header-param-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Header
from pydantic import BaseModel

app = FastAPI()

class CommonHeaders(BaseModel):
    x_token: Annotated[str | None, Header()] = None
    x_api_key: Annotated[str | None, Header()] = None

@app.get("/items/")
async def read_items(common_headers: CommonHeaders):
    return common_headers
```

----------------------------------------

TITLE: Synchronous Route Operation without await
DESCRIPTION: This code snippet demonstrates how to define a synchronous route operation function using `def` when interacting with third-party libraries that do not support `await`. This is typically the case for many database libraries. The function executes synchronously without waiting for asynchronous operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Defining Path Operation with Extra Data Types in FastAPI
DESCRIPTION: This snippet defines a FastAPI path operation `/items/{item_id}` that accepts various extra data types as parameters, including UUID, datetime, date, time, and timedelta. These types are automatically validated and converted by FastAPI, leveraging Pydantic's capabilities, and are returned as part of a dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-data-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import datetime, date, time, timedelta
from uuid import UUID

from fastapi import FastAPI, Body

app = FastAPI()


@app.put("/items/{item_id}")
async def read_items(
    item_id: UUID,
    start_datetime: datetime | None = Body(default=None),
    end_date: date | None = Body(default=None),
    repeat_at: time | None = Body(default=None),
    process_after: timedelta | None = Body(default=None),
):
    return {
        "item_id": item_id,
        "start_datetime": start_datetime,
        "end_date": end_date,
        "repeat_at": repeat_at,
        "process_after": process_after,
    }
```

----------------------------------------

TITLE: Initializing FastAPI with Global Dependencies (Python)
DESCRIPTION: This snippet demonstrates how to apply global dependencies to a FastAPI application. By passing a list of `Depends()` objects to the `dependencies` parameter of the `FastAPI` constructor, the specified dependency functions (`verify_key` and `verify_token`) will be executed for every incoming request before any path operation, ensuring application-wide validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_0

LANGUAGE: Python
CODE:
```
app = FastAPI(dependencies=[Depends(verify_key), Depends(verify_token)])
```

----------------------------------------

TITLE: Generate a Random Hexadecimal Secret Key
DESCRIPTION: Uses the `openssl` command-line tool to generate a 32-byte (64-character hexadecimal) random string. This generated string is suitable for use as a `SECRET_KEY` for signing JWTs, ensuring cryptographic strength and uniqueness for security purposes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: console
CODE:
```
$ openssl rand -hex 32
```

----------------------------------------

TITLE: Setting Response Model to UserOut in FastAPI Post Endpoint
DESCRIPTION: This snippet shows the `response_model` parameter of the `@app.post()` decorator explicitly set to `UserOut`. This configuration instructs FastAPI to use the `UserOut` Pydantic model for data validation, serialization, and OpenAPI documentation of the response, effectively filtering out any fields (like passwords) not present in `UserOut` from the final API response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

class UserIn(BaseModel):
    username: str
    password: str
    email: Union[str, None] = None
    full_name: Union[str, None] = None

class UserOut(BaseModel):
    username: str
    email: Union[str, None] = None
    full_name: Union[str, None] = None

app = FastAPI()

@app.post("/user/", response_model=UserOut)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Building a Docker Image for FastAPI
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for the FastAPI application. It starts from a Python 3.9 base image, sets the working directory, copies the `requirements.txt` file, installs dependencies, and then copies the application code. This multi-stage approach optimizes image size and build time.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_4

LANGUAGE: dockerfile
CODE:
```
# (1)!
FROM python:3.9

# (2)!
WORKDIR /code

# (3)!
COPY ./requirements.txt /code/requirements.txt

# (4)!
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (5)!
COPY ./app /code/app
```

----------------------------------------

TITLE: Pydantic Model Example
DESCRIPTION: This snippet shows an example of a Pydantic model. Pydantic is used for data validation. You declare the "shape" of the data as classes with attributes. Each attribute has a type. Then you create an instance of that class with some values, and it will validate the values, convert them to the appropriate type (if that's the case) and give you an object with all the data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/python-types.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import List

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tags: List[str] = []


class Image(BaseModel):
    url: str
    name: Optional[str] = None


class Offer(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    items: List[Item]


class Model(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    items: List[Item]
    image: Optional[Image] = None
    offers: List[Offer]
```

----------------------------------------

TITLE: Defining a Dictionary-Returning Dependency Function
DESCRIPTION: This snippet defines a Python function `common_parameters` that serves as a dependency. It takes optional query parameters `q`, `skip`, and `limit`, and returns them as a dictionary. FastAPI uses this function to inject common parameters into path operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Enforcing HTTPS/WSS Redirection with HTTPSRedirectMiddleware - Python
DESCRIPTION: Illustrates how to add `HTTPSRedirectMiddleware` to a FastAPI application. This middleware automatically redirects all incoming HTTP or WS requests to their secure HTTPS or WSS counterparts, ensuring secure communication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)

@app.get("/")
async def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Path Order Matters
DESCRIPTION: Demonstrates the importance of path order when defining routes in FastAPI.  `/users/me` must be declared before `/users/{user_id}` to avoid incorrect matching.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Create Database Tables
DESCRIPTION: Creates the tables in the database based on the defined SQLModel models. It uses the metadata to create all tables associated with the models.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_2

LANGUAGE: Python
CODE:
```
def create_db_and_tables():
    SQLModel.metadata.create_all(engine)
```

----------------------------------------

TITLE: Creating a Dependency Function
DESCRIPTION: This code snippet defines a dependency function that takes optional query parameters `q`, `skip`, and `limit` and returns a dictionary containing these values. This function can be used as a dependency in FastAPI path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Create a Session Dependency with FastAPI
DESCRIPTION: This snippet creates a FastAPI dependency using `yield` to provide a new `Session` for each request, ensuring a single session per request. It uses `Annotated` to simplify the code that uses this dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_session():
    async with async_engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)
        async with AsyncSession(conn) as session:
            yield session

SessionDep = Annotated[AsyncSession, Depends(get_session)]
```

----------------------------------------

TITLE: Path Parameter with Type Annotation
DESCRIPTION: Declares the type of the path parameter `item_id` as an integer using type annotations. FastAPI uses this type information for data validation and automatic documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring Pydantic Model Attributes with Field in Python
DESCRIPTION: This snippet illustrates how to use `Field` within a Pydantic `BaseModel` to define attributes with default values, validation, and metadata. It shows how `Field` parameters like `default`, `title`, `max_length`, `gt` (greater than), and `description` are applied to model fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-fields.md#_snippet_1

LANGUAGE: Python
CODE:
```
description: Union[str, None] = Field(
    default=None, title="Description of the item", max_length=300
)
price: float = Field(gt=0, description="The price must be greater than zero")
```

----------------------------------------

TITLE: Multi-stage Dockerfile for Poetry-based FastAPI Applications
DESCRIPTION: This multi-stage Dockerfile is designed for FastAPI projects that use Poetry for dependency management. The first stage (`requirements-stage`) installs Poetry and exports dependencies to a `requirements.txt` file. The second stage then uses this `requirements.txt` to install dependencies efficiently, resulting in a smaller final image. This approach optimizes image size and build time.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_17

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9 as requirements-stage

WORKDIR /tmp

RUN pip install poetry

COPY ./pyproject.toml ./poetry.lock* /tmp/

RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

FROM python:3.9

WORKDIR /code

COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app
```

----------------------------------------

TITLE: Declaring Dependencies in FastAPI Path Operations (Python)
DESCRIPTION: These snippets illustrate how to integrate a dependency into FastAPI path operation functions using `Annotated` and `Depends`. The `common_parameters` function is automatically called, and its return value is injected into the `commons` parameter, streamlining the use of shared logic across different endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons


@app.get("/users/")
async def read_users(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Basic FastAPI Application Testing with TestClient and Pytest
DESCRIPTION: This snippet demonstrates how to set up basic tests for a FastAPI application using `TestClient` and `pytest`. It shows importing `TestClient`, initializing it with the FastAPI app instance, and writing a test function to make a GET request and assert the response's status code and JSON content.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: JWT Token Authentication and User Retrieval
DESCRIPTION: This snippet demonstrates how to decode a JWT token, verify its contents, and retrieve the current user based on the token's subject. It includes error handling for invalid or expired tokens.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user(username=token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Defining FastAPI Lifespan Context Manager (Yield Block)
DESCRIPTION: This snippet shows the core `yield` block within an `asynccontextmanager` decorated function. Code before `yield` runs on application startup, and code after `yield` runs on application shutdown. This is used for managing resources like database connections.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
    await db.connect()
    print("Application startup complete.")
    yield
    await db.disconnect()
```

----------------------------------------

TITLE: Defining a Pydantic Model in Python
DESCRIPTION: This code snippet defines a Pydantic model named `User` with type annotations for its attributes: `id` (integer), `name` (string), and `joined` (date). Pydantic models are used in FastAPI for data validation and serialization. The example shows how to define the model and then how to instantiate it using both keyword arguments and a dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Activating a Virtual Environment (Linux, macOS)
DESCRIPTION: This snippet shows how to activate a virtual environment on Linux and macOS systems. It uses the source command to execute the activate script located in the '.venv/bin' directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_3

LANGUAGE: Shell
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Creating a Settings Object with Pydantic v2
DESCRIPTION: This snippet demonstrates how to create a settings object using Pydantic's `BaseSettings` class. It defines a subclass with type-annotated attributes and default values, similar to Pydantic models. It showcases how Pydantic reads environment variables and converts/validates data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/settings.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseSettings, Field


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = Field(50, alias="items_per_page")

    class Config:
        env_prefix = "app_"

```

----------------------------------------

TITLE: Reusing Annotated Dependency with Type Alias in FastAPI
DESCRIPTION: This code demonstrates how to reuse an Annotated dependency by assigning it to a variable (type alias). This avoids code duplication when using the same dependency in multiple path operations. The type information is preserved, allowing for autocompletion and inline error detection.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI

app = FastAPI()


async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}


CommonQueryParams = Annotated[dict, Depends(common_parameters)]


@app.get("/items/")
async def read_items(commons: CommonQueryParams):
    return commons


@app.get("/users/")
async def read_users(commons: CommonQueryParams):
    return commons
```

----------------------------------------

TITLE: Type Annotations with Metadata using Annotated (Python 3.8+)
DESCRIPTION: This code snippet demonstrates the use of `Annotated` in Python 3.8+ to add metadata to type annotations. It imports `Annotated` from `typing_extensions` and uses it to add a `Field` with a description to the `name` attribute of the `Item` class. FastAPI can then use this metadata for documentation or validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_23

LANGUAGE: Python
CODE:
```
from typing import Optional

from typing_extensions import Annotated

from pydantic import BaseModel, Field


class Item(BaseModel):
    name: Annotated[str, Field(description='Name of the item')] = 'Foo'
    description: Annotated[Optional[str], Field(description='A long description')] = None
    price: Annotated[float, Field(description='Price in USD')] = 35.4
    tax: Annotated[Optional[float], Field(description='Applicable tax')] = None
```

----------------------------------------

TITLE: Defining Items Router with APIRouter (Python)
DESCRIPTION: Creates an `APIRouter` instance for item-related path operations. It is configured with a path prefix `/items`, a tag `items`, a default 404 response, and the `get_token` dependency applied to all its path operations. It includes example path operations for `/` and `/{item_id}`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException

from ..dependencies import get_token

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


@router.get("/{item_id}")
async def read_item(item_id: str):
    if item_id != "foo":
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item_id": "baz"}
```

----------------------------------------

TITLE: Pydantic v2: Reading Settings from .env
DESCRIPTION: Updates the config.py file to read settings from a .env file using Pydantic v2. The env_file setting is used to specify the path to the .env file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_11

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings


class Settings(BaseSettings):
    admin_email: str = "admin@example.com"
    items_per_user: int = 50

    model_config = {"env_file": ".env"}

```

----------------------------------------

TITLE: JWT Token Decoding and User Retrieval
DESCRIPTION: This snippet updates the `get_current_user` function to decode and verify JWT tokens. It retrieves the current user based on the token's subject and raises an HTTP exception if the token is invalid.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = fake_users_db.get(token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Reading a Single Hero by ID in FastAPI
DESCRIPTION: This FastAPI endpoint retrieves a single `Hero` object from the database using its `hero_id`. It queries the session for the hero and raises an `HTTPException` with a 404 status if the hero is not found, ensuring proper error handling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.get("/heroes/{hero_id}", response_model=Hero)
def read_hero(*, session: SessionDep, hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: List of Sub-models in Pydantic
DESCRIPTION: Demonstrates how to use Pydantic models as types within lists. This allows for validation and documentation of JSON content containing lists of objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/body-nested-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import List

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: List[str] = []
    images: List[Image] | None = None



```

----------------------------------------

TITLE: Create Tables on Startup
DESCRIPTION: This code defines an event handler that creates the database tables when the FastAPI application starts up. It uses the `create_db_and_tables` function to ensure that the tables exist before the application begins processing requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.on_event("startup")
def on_startup():
    create_db_and_tables()
```

----------------------------------------

TITLE: Defining a Nested Pydantic Submodel (Image)
DESCRIPTION: This snippet defines a simple Pydantic `Image` model with `url` and `name` attributes. This model can then be used as a type for attributes in other Pydantic models, enabling nested data structures.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
class Image(BaseModel):
    url: str
    name: str
```

----------------------------------------

TITLE: Delete Single Hero
DESCRIPTION: This code defines a FastAPI endpoint for deleting a single `Hero` from the database by its ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException


@app.delete("/heroes/{hero_id}")
async def delete_hero(hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Defining an Integer Parameter in FastAPI
DESCRIPTION: This example demonstrates how to define an integer parameter in FastAPI using Python's type hinting. The `item_id: int` syntax specifies that the `item_id` parameter should be an integer. FastAPI will automatically validate the input and return an error if it is not an integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies (Python)
DESCRIPTION: This command installs FastAPI along with its 'standard' group of optional dependencies. These include libraries for email validation, HTTP client functionality for testing, template rendering, form parsing, and a high-performance ASGI server like Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_13

LANGUAGE: Python
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Using OpenAPI-Specific Examples in FastAPI Body
DESCRIPTION: This snippet demonstrates how to use the `openapi_examples` parameter with `Body()` in FastAPI to provide multiple, richly described examples for a request body. Unlike `examples` which are part of JSON Schema, `openapi_examples` are specific to OpenAPI and are fully supported by Swagger UI, allowing for detailed summaries, descriptions (with Markdown), and distinct values for each example, enhancing API documentation significantly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Body
from pydantic import BaseModel, Field

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Annotated[str | None, Field(examples=["A very long description"])] = None
    price: float
    tax: float | None = None


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Annotated[
        Item,
        Body(
            openapi_examples={
                "normal": {
                    "summary": "A normal example",
                    "description": "A **normal** item works correctly.",
                    "value": {
                        "name": "Foo",
                        "description": "A very nice Item",
                        "price": 35.4,
                        "tax": 3.2,
                    },
                },
                "bad_tax": {
                    "summary": "An example with a bad tax",
                    "description": "The tax is too high, it will not be accepted.",
                    "value": {
                        "name": "Bar",
                        "price": 42,
                        "tax": 200,
                    },
                },
            }
        ),
    ],
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Using Annotated with Depends for FastAPI Dependencies
DESCRIPTION: This code demonstrates how to use `Annotated` with `Depends` to define and reuse dependencies in FastAPI. By storing the `Annotated` value in a variable, you can avoid code repetition and maintain type information for better code completion and error checking.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Annotated, Optional

from fastapi import Depends, FastAPI, Query


async def common_parameters(q: Optional[str] = Query(None, max_length=50)):
    return {"q": q}


app = FastAPI()


@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons


@app.get("/items2/")
async def read_items2(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Compartilhando dependências com Annotated
DESCRIPTION: Este snippet demonstra como usar `Annotated` para definir um type alias para uma dependência, permitindo reutilizá-la em múltiplos locais sem repetição de código. A informação de tipo é preservada, garantindo preenchimento automático e detecção de erros no editor de texto.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[dict, Depends(common_parameters)]
```

----------------------------------------

TITLE: Create Hero with HeroCreate, Return HeroPublic
DESCRIPTION: Demonstrates how to use the `HeroCreate` model to receive data from a request and create a `Hero` database model. The `response_model` parameter is used to validate and serialize the data using the `HeroPublic` model before returning it in the API response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_14

LANGUAGE: Python
CODE:
```
response_model=HeroPublic
```

----------------------------------------

TITLE: Pydantic Model Usage
DESCRIPTION: Demonstrates the use of Pydantic models for data validation and type conversion. Pydantic models allow you to define data structures as classes with type annotations, and automatically validate and convert data when an instance of the class is created.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import List

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tags: List[str] = []


class Image(BaseModel):
    url: str
    name: str


class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]


class Product(BaseModel):
    name: str
    description: str | None = None
    price: float
    tags: List[str] = []
    image: Image | None = None
```

----------------------------------------

TITLE: Protecting Against Host Header Attacks with TrustedHostMiddleware - Python
DESCRIPTION: Shows how to integrate `TrustedHostMiddleware` to validate the `Host` header of incoming requests, preventing HTTP Host Header attacks. It requires a list of `allowed_hosts`, which can include wildcard domains, and returns a `400` response for invalid hosts.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/middleware.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.trustedhost import TrustedHostMiddleware

app = FastAPI()

app.add_middleware(TrustedHostMiddleware, allowed_hosts=["example.com", "*.example.com"])

@app.get("/")
async def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.10+)
DESCRIPTION: This example demonstrates a Pydantic model definition with type annotations. Pydantic validates data, converts it to the appropriate type, and provides an object with all the data. This snippet is designed for Python 3.10 and above.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_20

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011_py310.py!}
```

----------------------------------------

TITLE: Declaring a Dependency in a Route
DESCRIPTION: Demonstrates how to use Depends to inject a dependency into a route operation function. The common_parameters function is passed to Depends, and its return value is assigned to the commons parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI


async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}


app = FastAPI()


@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons


@app.get("/users/")
async def read_users(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Users APIRouter Module - Python
DESCRIPTION: Defines a simple APIRouter for user-related routes. This module is intended to be imported and included in the main application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()

@router.get("/users/")
async def read_users():
    return [{"username": "Foo"}, {"username": "Bar"}]
```

----------------------------------------

TITLE: Declaring Optional Types with Union Operator (`|`)
DESCRIPTION: Shows how to declare optional types using the `|` operator, available in Python 3.10 and later, as a more concise alternative to `typing.Optional`. This syntax explicitly states that a parameter can be either the specified type or `None`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Optional

def greet_optional(name: Optional[str] = None):
    if name:
        print(f"Hello, {name}!")
    else:
        print("Hello, World!")
```

LANGUAGE: Python
CODE:
```
from typing import Optional

def greet_optional_b(name: Optional[str]):
    if name:
        print(f"Hello, {name}!")
    else:
        print("Hello, there!")
```

LANGUAGE: Python
CODE:
```
def greet_optional_py310(name: str | None = None):
    if name:
        print(f"Hello, {name}!")
    else:
        print("Hello, there!")
```

----------------------------------------

TITLE: Uvicorn Command Referencing FastAPI Instance
DESCRIPTION: This command demonstrates how Uvicorn references the `app` instance from `main.py`. The `app` variable is the instantiated `FastAPI` object, serving as the application entry point for the ASGI server to run your API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Dockerfile for FastAPI application
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for the FastAPI application. It starts from a Python 3.9 base image, sets the working directory, copies the requirements file, installs the dependencies, and copies the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app
```

----------------------------------------

TITLE: Annotated Type Hint Example (Python 3.9+)
DESCRIPTION: This code demonstrates the use of `Annotated` from the `typing` module to add metadata to type hints. The `name` parameter is annotated with `str` as the type and `Field(title='User Name', max_length=32)` as metadata, providing additional information about the field for tools like FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/python-types.md#_snippet_22

LANGUAGE: Python
CODE:
```
from typing import Annotated

from pydantic import Field

name: Annotated[str, Field(title='User Name', max_length=32)]
```

----------------------------------------

TITLE: Dockerfile for Single-File FastAPI App
DESCRIPTION: Dockerfile example for a FastAPI application contained in a single file (main.py). It copies the requirements.txt and main.py files, installs dependencies, and sets up the working directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_13

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

----------------------------------------

TITLE: Response Model with Return Type Annotation - Python
DESCRIPTION: This code snippet demonstrates how to declare the response type using the return type annotation of a route operation function. FastAPI uses this type for validation, generating a JSON schema for the response in the OpenAPI documentation, and limiting/filtering the output data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "description": "", "price": 50.2, "tax": 20.3}
```

----------------------------------------

TITLE: Using Union Type Hint with Pipe Operator in Python 3.10+
DESCRIPTION: This snippet shows the Python 3.10+ syntax for defining a `Union` type hint using the pipe (`|`) operator. It indicates that `some_variable` can be either a `PlaneItem` or a `CarItem`, providing a more concise alternative to `typing.Union`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/extra-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
some_variable: PlaneItem | CarItem
```

----------------------------------------

TITLE: Uvicorn mit Workerprozessen starten
DESCRIPTION: Dieser Befehl startet Uvicorn mit der angegebenen Host-, Port- und Workeranzahl. Die Option --workers weist Uvicorn an, die angegebene Anzahl von Workerprozessen zu starten.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/server-workers.md#_snippet_4

LANGUAGE: console
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: Using a Pydantic Model as Response Model in FastAPI
DESCRIPTION: This FastAPI path operation illustrates using the `Item` Pydantic model as an output (response model) via the `response_model` parameter. When a model with default values is used for output, fields like `description` are marked as required in the OpenAPI schema because they will always have a value (even if `null`), ensuring clients can consistently expect the field to be present in the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union
from pydantic import BaseModel
from fastapi import FastAPI

app = FastAPI()

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None

@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: str):
    return {"name": "Foo", "price": 42}
```

----------------------------------------

TITLE: Example requirements.txt content
DESCRIPTION: This shows the typical content of a requirements.txt file, which lists the packages and their specific versions required for a project. This file is used for dependency management and ensures consistent environments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/virtual-environments.md#_snippet_16

LANGUAGE: Text
CODE:
```
fastapi[standard]==0.113.0
pydantic==2.8.0
```

----------------------------------------

TITLE: Activating a Virtual Environment on Windows PowerShell
DESCRIPTION: This command activates a Python virtual environment in Windows PowerShell by executing the Activate.ps1 script. It modifies environment variables, including PATH, to prioritize the virtual environment's Python interpreter and packages.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_21

LANGUAGE: powershell
CODE:
```
.venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Activating a Virtual Environment on Windows PowerShell
DESCRIPTION: This command activates a virtual environment in Windows PowerShell by executing the Activate.ps1 script located in the .venv\Scripts directory. This script configures the environment variables to use the virtual environment's Python interpreter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_20

LANGUAGE: powershell
CODE:
```
.venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Type Annotations with Metadata using Annotated (Python 3.9+)
DESCRIPTION: This code snippet demonstrates the use of `Annotated` in Python 3.9+ to add metadata to type annotations. It imports `Annotated` from the `typing` module and uses it to add a `Field` with a description to the `name` attribute of the `Item` class. FastAPI can then use this metadata for documentation or validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_22

LANGUAGE: Python
CODE:
```
from typing import Annotated

from pydantic import BaseModel, Field


class Item(BaseModel):
    name: Annotated[str, Field(description='Name of the item')] = 'Foo'
    description: Annotated[Optional[str], Field(description='A long description')] = None
    price: Annotated[float, Field(description='Price in USD')] = 35.4
    tax: Annotated[Optional[float], Field(description='Applicable tax')] = None
```

----------------------------------------

TITLE: Declaring List of Pydantic Models (Python 3.9+)
DESCRIPTION: This snippet demonstrates the Python 3.9+ syntax for type-hinting a variable as a list containing `Image` Pydantic models. It uses the built-in `list` type directly with type parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
images: list[Image]
```

----------------------------------------

TITLE: Running FastAPI with Proxy Headers (Dockerfile)
DESCRIPTION: Configures the FastAPI application to trust headers from a TLS Termination Proxy (e.g., Nginx, Traefik) by adding the `--proxy-headers` option to the `fastapi run` command. This ensures Uvicorn correctly interprets HTTPS and other proxy-related information.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--proxy-headers", "--port", "80"]
```

----------------------------------------

TITLE: Copying Requirements File in Dockerfile
DESCRIPTION: This Dockerfile instruction copies the `requirements.txt` file from the current directory on the host machine to the `/code/requirements.txt` location within the Docker image. This is a crucial step for installing Python dependencies using pip.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
COPY ./requirements.txt /code/requirements.txt
```

----------------------------------------

TITLE: Type Hints with Metadata Annotations (Python 3.8+)
DESCRIPTION: Demonstrates how to use `Annotated` in Python 3.8+ to add metadata to type hints. This allows providing extra information about the type, such as a description, which can be used by FastAPI for validation and documentation.  It imports Annotated from typing_extensions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_18

LANGUAGE: Python
CODE:
```
from typing import Optional

from typing_extensions import Annotated

from fastapi import Query


async def read_items(
    q: Annotated[Optional[str], Query(title="Search query", max_length=50)] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Declaring a Union Type (Python 3.10+)
DESCRIPTION: This snippet demonstrates how to declare a variable that can be either an integer or a string using the union operator `|` in Python 3.10 and later.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_11

LANGUAGE: Python
CODE:
```
item: int | str = 123
```

----------------------------------------

TITLE: Type Hints with Annotated (Python 3.9+)
DESCRIPTION: This code snippet shows how to use `Annotated` from the `typing` module to add metadata to type hints in Python 3.9 and later.  `Annotated` allows providing additional information about the type for tools like FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_25

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial013_py39.py!}
```

----------------------------------------

TITLE: Query Parameter with Maximum Length Validation in FastAPI
DESCRIPTION: This snippet shows how to use the `Query` class to define a query parameter 'q' with a maximum length of 50 characters.  It demonstrates how to set a default value of None, making the parameter optional.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, max_length=50)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Adding Max Length Validation to Optional Query Parameter
DESCRIPTION: This snippet demonstrates adding a `max_length` validation to an optional query parameter `q`. The `Query` dependency is used to specify that the string value for `q` must not exceed 50 characters, while still allowing it to be `None`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_4

LANGUAGE: Python
CODE:
```
q: Union[str, None] = Query(default=None, max_length=50)
```

----------------------------------------

TITLE: Declaring Single File Parameter with bytes
DESCRIPTION: This snippet shows how to declare a single file parameter using `bytes` and the `File` dependency. The `File(...)` indicates that the file is a required parameter. FastAPI automatically reads the entire file content into memory as `bytes`, which is suitable for small files. The endpoint returns the size of the uploaded file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, File

app = FastAPI()

@app.post("/files/")
async def create_file(file: bytes = File(...)):
    return {"file_size": len(file)}
```

----------------------------------------

TITLE: Sub-dependencies with yield in FastAPI
DESCRIPTION: Illustrates how to create sub-dependencies with `yield` and ensure that the exit code in each dependency is executed in the correct order. The example shows a dependency tree where `dependency_c` depends on `dependency_b`, which depends on `dependency_a`, and all of them use `yield`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_2

LANGUAGE: python
CODE:
```
async def dependency_a():
    yield "A"


async def dependency_b(dep_a=Depends(dependency_a)):
    yield f"B depends on {dep_a}"


async def dependency_c(dep_b=Depends(dependency_b)):
    yield f"C depends on {dep_b}"
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create an asynchronous FastAPI application using `async def` for the route handlers. This is useful when your code uses `async` / `await` for asynchronous operations. It defines two routes: a root route and an items route, both using asynchronous functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Define Synchronous Path Function
DESCRIPTION: Defines a synchronous path function that will be called when a request is made to the associated path. This function returns a dictionary, which FastAPI automatically converts to JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/")
def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Importing and Initializing APIRouter in FastAPI
DESCRIPTION: This snippet shows how to import the APIRouter class from the fastapi library and create an instance of it. This router instance will be used to define path operations for a specific part of the application, like user-related routes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()
```

----------------------------------------

TITLE: Defining Deeply Nested Pydantic Models
DESCRIPTION: This snippet demonstrates the creation of arbitrarily deeply nested Pydantic models. It defines `Image`, `Item` (which can contain a list of `Image`s), and `Offer` (which contains a list of `Item`s), showcasing complex data structures with FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: set[str] = set()
    images: Optional[list[Image]] = None

class Offer(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    items: list[Item]
```

----------------------------------------

TITLE: Exception Handling in Dependencies with yield (Python 3.9+)
DESCRIPTION: This code snippet shows how to properly handle exceptions within a dependency that uses `yield`. If an exception is caught, it's crucial to re-raise it to ensure FastAPI can identify and log the error correctly. This prevents the server from missing error indications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_8

LANGUAGE: python
CODE:
```
raise InternalError(detail="Oooops, there was an error")
```

----------------------------------------

TITLE: Performing Asynchronous HTTP Requests in Pytest with AsyncClient
DESCRIPTION: This snippet shows how to use `httpx.AsyncClient` within an asynchronous `pytest` function to make requests to a FastAPI application. It demonstrates instantiating `AsyncClient` with the FastAPI `app` object and using `await` to send a GET request and receive the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_3

LANGUAGE: Python
CODE:
```
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Adding a Background Task to a Path Operation
DESCRIPTION: This line demonstrates how to add a background task using the `add_task()` method of the `BackgroundTasks` object. It takes the task function (`write_notification`), positional arguments (`email`), and keyword arguments (`message="some notification"`) for the task function. The task will execute after the HTTP response is sent.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#_snippet_2

LANGUAGE: Python
CODE:
```
    background_tasks.add_task(write_notification, email, message="some notification")
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet demonstrates how to import the FastAPI class, which provides the core functionality for building APIs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This command installs Uvicorn, an ASGI server, using pip. Uvicorn is required for running FastAPI applications in a production environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Configuration in a separate module (config.py)
DESCRIPTION: Example of defining the settings class in a separate config.py file. This promotes modularity and separation of concerns.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_6

LANGUAGE: python
CODE:
```
from typing import Optional

from pydantic import BaseSettings, Field


class Settings(BaseSettings):
    app_name: str = Field("Awesome API", env="APP_NAME")
    admin_email: Optional[str] = Field(None, env="ADMIN_EMAIL")
    items_per_user: int = Field(50, env="ITEMS_PER_USER")

    class Config:
        env_file = ".env"


settings = Settings()

```

----------------------------------------

TITLE: Declaring Integer Type Hint in FastAPI
DESCRIPTION: This snippet shows how to declare a type hint for an integer parameter, `item_id`, in FastAPI. FastAPI uses this standard Python type hint for automatic data validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Declaring Query Parameters with Pydantic Model in FastAPI
DESCRIPTION: This snippet demonstrates how to define a group of related query parameters using a Pydantic `BaseModel`. Each field in the model corresponds to a query parameter, allowing for type validation, default values, and additional metadata. The model is then injected into a FastAPI path operation using `Query()`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#_snippet_0

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query
from pydantic import BaseModel

app = FastAPI()

class CommonQueryParams(BaseModel):
    q: Optional[str] = None
    skip: int = 0
    limit: int = 100

@app.get("/items/")
async def read_items(commons: CommonQueryParams = Query()):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = [{"item_id": "Foo"}, {"item_id": "Bar"}]
    response.update({"items": items[commons.skip : commons.skip + commons.limit]})
    return response
```

----------------------------------------

TITLE: Define SQLModel Model
DESCRIPTION: Defines a SQLModel model named `Hero` that represents a table in the SQL database. It includes fields for `id` (primary key), `name` (indexed), `secret_name`, and `age`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlmodel import Field, SQLModel, create_engine


class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = None
```

----------------------------------------

TITLE: Using response_model to Filter Output
DESCRIPTION: The `response_model` parameter is used to specify the `UserOut` model, ensuring that the API response only includes the fields defined in `UserOut`, effectively filtering out the password.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.post("/users/", response_model=UserOut)
async def create_user(user: UserIn): # (1)
    return user
```

----------------------------------------

TITLE: Defining HeroPublic Data Model in Python
DESCRIPTION: This snippet defines the `HeroPublic` Pydantic model, which represents the data structure returned to API clients. It inherits from `HeroBase` and re-declares the `id` field as a non-optional integer, ensuring clients always receive an ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Optional
from sqlmodel import Field, SQLModel

class HeroBase(SQLModel):
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)

class HeroPublic(HeroBase):
    id: int
```

----------------------------------------

TITLE: Reading Multiple Heroes with HeroPublic in FastAPI
DESCRIPTION: This FastAPI endpoint retrieves a list of all heroes from the database. It uses `response_model=List[HeroPublic]` to ensure that each hero object in the returned list is validated and serialized according to the `HeroPublic` data model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_16

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter
from sqlmodel import Session, select
from typing import List

# Assuming Hero, HeroPublic are defined
router = APIRouter()

@router.get("/heroes/", response_model=List[HeroPublic])
def read_heroes(*, session: Session):
    heroes = session.exec(select(Hero)).all()
    return heroes
```

----------------------------------------

TITLE: Incorrectly Calling an Asynchronous Function
DESCRIPTION: Highlights an incorrect attempt to call an `async def` function (`get_burgers`) without using the `await` keyword. Asynchronous functions must be awaited to ensure proper execution within an `async` context.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_6

LANGUAGE: Python
CODE:
```
# This won't work, because get_burgers was defined with: async def
burgers = get_burgers(2)
```

----------------------------------------

TITLE: Initializing FastAPI App with Async Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two asynchronous GET endpoints using `async def`: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint takes an integer item_id and an optional string query parameter q. Using `async def` is recommended for I/O-bound operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/yo/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code defines a simple FastAPI application with two asynchronous endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns an item ID and an optional query parameter. It demonstrates the basic structure of a FastAPI application, including importing necessary modules, creating an app instance, and defining API endpoints using decorators.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declaring a Pydantic Model as a Request Body Parameter
DESCRIPTION: This snippet shows how to declare a Pydantic `Item` model as a parameter in a FastAPI path operation. FastAPI automatically recognizes this as a request body, validates the incoming data against the model, and provides it as a Python object.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Creating an Enum Class for Predefined Values in FastAPI
DESCRIPTION: This example shows how to create an Enum class in Python for use with FastAPI.  The Enum class inherits from both `str` and `Enum` to ensure the API documentation correctly identifies the values as strings. Class attributes are defined with fixed values representing the valid options.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: python
CODE:
```
from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Copying Application Code in Dockerfile
DESCRIPTION: Copies the application code from the ./app directory on the host machine to the /code/app directory in the Docker image. This step is placed at the end of the Dockerfile to minimize cache invalidation during development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
COPY ./app /code/app
```

----------------------------------------

TITLE: Default Uvicorn Command in Dockerfile
DESCRIPTION: This command sets the default command to run when the Docker container starts. It uses Uvicorn to serve the FastAPI application, specifying the module `app.main` and the `app` object. The `--host` and `--port` options configure the server to listen on all interfaces and port 80, respectively.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_14

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Declaring Optional Query Parameters in Python
DESCRIPTION: These Python snippets show two ways to declare an optional query parameter `q` in a FastAPI path operation, using `typing.Union` (Python < 3.10) and the new `|` operator (Python 3.10+).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_6

LANGUAGE: Python
CODE:
```
q: Union[str, None] = None
```

LANGUAGE: Python
CODE:
```
q: str | None = None
```

----------------------------------------

TITLE: FastAPI OAuth2 Password Flow Initial Setup
DESCRIPTION: This complete example demonstrates the foundational setup for implementing OAuth2 password flow in FastAPI. It defines the OAuth2PasswordBearer scheme with a tokenUrl and protects a path operation, automatically generating OpenAPI documentation for authentication. Requires python-multipart for form data parsing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/users/me")
async def read_users_me(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Defining Pydantic v2 BaseSettings Class
DESCRIPTION: This Python snippet defines a `Settings` class inheriting from `BaseSettings` (from `pydantic_settings`). It declares application configuration attributes with type annotations and default values, enabling Pydantic to automatically load and validate settings from environment variables.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_2

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50
```

----------------------------------------

TITLE: Database Dependency Teardown with Yield (Python)
DESCRIPTION: This snippet shows the cleanup part of a database dependency. The code after the `yield` statement is executed after the response has been created but before it is sent, ensuring resources like database sessions are properly closed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_2

LANGUAGE: Python
CODE:
```
    finally:
        db.close()
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.9+)
DESCRIPTION: This example demonstrates a Pydantic model definition with type annotations. Pydantic validates data, converts it to the appropriate type, and provides an object with all the data. This snippet is designed for Python 3.9 and above.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011_py39.py!}
```

----------------------------------------

TITLE: Function with Simple Type Hints
DESCRIPTION: This Python function demonstrates the use of simple type hints for function parameters, including `int`, `float`, `bool`, and `bytes`. It shows how to specify the expected data types for the input arguments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
def process_data(id: int, price: float, is_active: bool, data: bytes):
    print(id, price, is_active, data)
```

----------------------------------------

TITLE: Using Context Managers in FastAPI Dependencies with Yield
DESCRIPTION: This code snippet demonstrates how to use context managers within FastAPI dependencies using the `yield` keyword. It utilizes `with` inside the dependency function to ensure proper resource management. The dependency is then injected into a FastAPI endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Generator

from fastapi import Depends, FastAPI


async def get_db() -> Generator:
    db = FakeDatabase()
    try:
        yield db
    finally:
        db.close()


app = FastAPI()


@app.get("/items/")
async def read_items(db: FakeDatabase = Depends(get_db)):
    item = db.get_item("portal gun")
    return item
```

----------------------------------------

TITLE: Path Operation Ordering
DESCRIPTION: This example demonstrates the importance of path operation ordering in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to prevent the latter from incorrectly matching `me` as a user ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Updating a Hero with HeroUpdate in FastAPI
DESCRIPTION: This snippet demonstrates how to update a hero's data using a PATCH request in FastAPI with SQLModel. It retrieves only the data sent by the client, excluding default values, using `exclude_unset=True`. Then, it updates the hero in the database using `hero_db.sqlmodel_update(hero_data)`. This function updates the `hero_db` with the data from `hero_data`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_17

LANGUAGE: Python
CODE:
```
@app.patch("/heroes/{hero_id}", response_model=HeroRead)
async def update_hero(
    hero_id: int, hero: HeroUpdate, db: Session = Depends(get_db)
):
    hero_db = db.get(Hero, hero_id)
    if not hero_db:
        raise HTTPException(status_code=404, detail="Hero not found")
    hero_data = hero.dict(exclude_unset=True)
    hero_db.sqlmodel_update(hero_data)
    db.add(hero_db)
    db.commit()
    db.refresh(hero_db)
    return hero_db
```

----------------------------------------

TITLE: Initialize FastAPI App with Global Dependencies
DESCRIPTION: Demonstrates importing the FastAPI class and creating an application instance. It shows how to declare global dependencies that will be applied to all path operations in the application, including those defined in included APIRouters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_13

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

# Assume get_query_token is a dependency function
async def get_query_token(token: str):
    ...

app = FastAPI(dependencies=[Depends(get_query_token)])
```

----------------------------------------

TITLE: StreamingResponse with File-Like Objects in FastAPI
DESCRIPTION: This code snippet demonstrates how to use StreamingResponse with a generator function to stream data from a file-like object without loading the entire file into memory. It uses the `yield from` statement to iterate over the file-like object and ensures the file is closed after the response is finished.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_11

LANGUAGE: python
CODE:
```
from typing import Generator

from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()


def iterfile() -> Generator[bytes, None, None]:
    with open("file.txt", mode="rb") as file_like:
        yield from file_like


@app.get("/files")
async def get_file() -> StreamingResponse:
    return StreamingResponse(iterfile(), media_type="text/plain")
```

----------------------------------------

TITLE: Defining a Request Body with Pydantic
DESCRIPTION: This code snippet extends the basic FastAPI application to include a PUT endpoint that receives a request body. It defines a Pydantic model `Item` to represent the structure of the request body, including name (string), price (float), and an optional is_offer (boolean) field. The `update_item` function handles PUT requests to '/items/{item_id}' and receives an `Item` object in the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/it/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: bool = Optional[None]


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Function with Multiple Type Hints in Python
DESCRIPTION: This function showcases the use of type hints for various standard Python types, including string, integer, float, boolean, and bytes. It demonstrates how to declare the expected types for function parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
def process_data(name: str, age: int, price: float, is_active: bool, data: bytes):
    print(f"Name: {name}, Age: {age}, Price: {price}, Is Active: {is_active}, Data: {data}")
```

----------------------------------------

TITLE: Defining BackgroundTasks Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to import `BackgroundTasks` from `fastapi` and declare it as a parameter in a path operation function. FastAPI automatically injects an instance of `BackgroundTasks` for managing background operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, BackgroundTasks

app = FastAPI()

def write_notification(email: str, message=""): # This function is defined later
    with open("log.txt", mode="a") as log:
        log.write(f"notification for {email}: {message}\n")

@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
```

----------------------------------------

TITLE: Defining Independent FastAPI Sub-Application
DESCRIPTION: This snippet creates an independent FastAPI application instance (subapi) that is designed to be mounted within a larger application. It includes a basic path operation at /sub specific to this sub-application. This instance functions as a standalone FastAPI app before integration.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

subapi = FastAPI()

@subapi.get("/sub")
async def read_sub():
    return {"message": "Hello from sub app"}
```

----------------------------------------

TITLE: Defining Nested Response Models with Pydantic Dataclasses in FastAPI
DESCRIPTION: This snippet demonstrates how to use `pydantic.dataclasses` to define complex, nested response models in FastAPI. It shows the creation of `Item` and `Author` dataclasses, where `Author` contains a list of `Item` objects. The `response_model` parameter in the path operation decorator is used to specify the `Author` dataclass, enabling automatic data validation, serialization, and OpenAPI documentation generation for the nested structure. The example also highlights that the path operation can return a plain dictionary, which FastAPI will automatically convert to the specified `response_model` type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/dataclasses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from dataclasses import field
from typing import List, Optional

from pydantic.dataclasses import dataclass

@dataclass
class Item:
    name: str
    price: float
    tags: List[str] = field(default_factory=list)
    description: Optional[str] = None
    tax: Optional[float] = None

@dataclass
class Author:
    name: str
    items: List[Item]

from fastapi import FastAPI

app = FastAPI()

@app.get("/authors/{author_id}", response_model=Author)
def get_author(author_id: str):
    return {
        "name": "John Doe",
        "items": [
            {"name": "Item A", "price": 10.0, "tags": ["tag1", "tag2"]},
            {"name": "Item B", "price": 20.0, "description": "A description"},
        ],
    }
```

----------------------------------------

TITLE: Abhängigkeit mit yield und HTTPException
DESCRIPTION: This code snippet demonstrates how to use `yield` in a dependency to manage resources and handle exceptions, specifically `HTTPException`. It shows how to raise an `HTTPException` after the `yield` statement.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def dependency_a():
    try:
        print("Bevor yield")
        yield
        print("Nach yield")
    except Exception:
        print("Innerhalb der Abhängigkeit, die die Exception behandelt")
        raise HTTPException(status_code=400, detail="Fehler in der Abhängigkeit")


async def dependency_b(dependency_a):
    print("Dependency B wurde ausgeführt")


@app.get("/items/", dependencies=[Depends(dependency_b)])
async def read_items():
    return {"Nach der Abhängigkeit": True}
```

----------------------------------------

TITLE: Full FastAPI Lifespan Context Manager Definition
DESCRIPTION: This snippet defines the `lifespan` asynchronous context manager using `@asynccontextmanager`. It demonstrates how to establish a database connection during application startup (before `yield`) and disconnect it during application shutdown (after `yield`), ensuring resources are properly managed throughout the application's lifecycle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Code to run before the application starts
    await db.connect()
    print("Application startup complete.")
    yield
    # Code to run after the application shuts down
    await db.disconnect()
```

----------------------------------------

TITLE: Highlighting Function Definition with Type Hints - Python
DESCRIPTION: This snippet highlights the function definition with type hints, showing how to declare the expected type of the parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_3

LANGUAGE: Python
CODE:
```
first_name: str, last_name: str
```

----------------------------------------

TITLE: Installing from requirements.txt with pip
DESCRIPTION: Installs packages listed in the requirements.txt file using pip. This is useful for managing project dependencies in a structured way.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_12

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Running FastAPI in Development Mode with CLI
DESCRIPTION: This snippet demonstrates how to start a FastAPI application in development mode using the `fastapi dev` command. It shows the console output, including server startup details, documentation links, and the auto-reload feature. This mode is suitable for development due to auto-reloading and listening on localhost.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/fastapi-cli.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ fastapi dev main.py

  FastAPI   Starting development server 🚀

             Searching for package file structure from directories with
             __init__.py files
             Importing from /home/user/code/awesomeapp

    module   🐍 main.py

      code   Importing the FastAPI app object from the module with the
             following code:

             from main import app

       app   Using import string: main:app

    server   Server started at http://127.0.0.1:8000
    server   Documentation at http://127.0.0.1:8000/docs

       tip   Running in development mode, for production use:
             fastapi run

             Logs:

      INFO   Will watch for changes in these directories:
             ['/home/user/code/awesomeapp']
      INFO   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to
             quit)
      INFO   Started reloader process [383138] using WatchFiles
      INFO   Started server process [383153]
      INFO   Waiting for application startup.
      INFO   Application startup complete.
```

----------------------------------------

TITLE: Annotated Type Hint Example (Python 3.8+)
DESCRIPTION: This code demonstrates the use of `Annotated` from the `typing_extensions` module to add metadata to type hints. The `name` parameter is annotated with `str` as the type and `Field(title='User Name', max_length=32)` as metadata, providing additional information about the field for tools like FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/python-types.md#_snippet_23

LANGUAGE: Python
CODE:
```
from typing_extensions import Annotated

from pydantic import Field

name: Annotated[str, Field(title='User Name', max_length=32)]
```

----------------------------------------

TITLE: Declaring a Path Parameter with Enum Type in FastAPI
DESCRIPTION: This example demonstrates how to declare a path parameter using the Enum class created previously.  The `model_name` parameter is type-annotated with the `ModelName` Enum, restricting its possible values to those defined in the Enum.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
```

----------------------------------------

TITLE: Sub-dependencies with Yield (Python 3.8+ non-annotated)
DESCRIPTION: Illustrates how to create nested dependencies with `yield`, where one dependency relies on another. FastAPI ensures that the exit code in each dependency with `yield` is executed in the correct order. This example uses Python 3.8+ syntax without Annotated.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Generator

from fastapi import Depends, FastAPI

app = FastAPI()


async def dependency_a() -> Generator[str, None, None]:
    yield "dependency_a"


async def dependency_b(dep_a: str = Depends(dependency_a)) -> Generator[str, None, None]:
    yield f"dependency_b with {dep_a}"


async def dependency_c(dep_b: str = Depends(dependency_b)) -> str:
    return f"dependency_c with {dep_b}"


@app.get("/items/")
async def read_items(dep_c: str = Depends(dependency_c)):
    return dep_c
```

----------------------------------------

TITLE: Asynchronous Route Operation Function
DESCRIPTION: Defines an asynchronous route operation function using `async def` and `await` to handle asynchronous operations like fetching data. This ensures the server doesn't block while waiting for the operation to complete.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/async.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Deleting a Hero by ID in FastAPI
DESCRIPTION: This FastAPI endpoint handles the deletion of a `Hero` entry by its ID. It retrieves the hero, raises a 404 error if not found, deletes it from the session, commits the change, and returns a success message or the deleted hero's ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_9

LANGUAGE: Python
CODE:
```
@app.delete("/heroes/{hero_id}")
def delete_hero(*, session: SessionDep, hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Using TestClient with a Context Manager in Python
DESCRIPTION: This snippet demonstrates how to use FastAPI's `TestClient` within a `with` statement. This pattern ensures that the test client's resources are properly managed and closed after the test, preventing resource leaks. It shows a basic GET request and assertions on the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/testing-websockets.md#_snippet_0

LANGUAGE: Python
CODE:
```
with TestClient(app) as client:
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Reading Settings from .env File with Pydantic v2
DESCRIPTION: Shows how to configure Pydantic to read settings from a .env file.  The `env_file` attribute in `model_config` specifies the path to the .env file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_13

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    admin_email: str
    app_name: str

    model_config = SettingsConfigDict(env_file='.env')
```

----------------------------------------

TITLE: Handling WebSocket Messages (Receive and Send)
DESCRIPTION: This code block illustrates the core logic within a FastAPI WebSocket endpoint for accepting a connection, continuously receiving text messages, and sending a response back to the client. It utilizes `await websocket.receive_text()` to get data and `await websocket.send_text()` to send data asynchronously.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/websockets.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, WebSocket

app = FastAPI()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Traefik Routes Configuration
DESCRIPTION: Configures Traefik to strip the /api/v1 path prefix and redirect requests to a Uvicorn server running at http://127.0.0.1:8000. It defines a middleware to strip the prefix and a router to apply the middleware to requests with the /api/v1 prefix.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_5

LANGUAGE: TOML
CODE:
```
[http]
  [http.middlewares]

    [http.middlewares.api-stripprefix.stripPrefix]
      prefixes = ["/api/v1"]

  [http.routers]

    [http.routers.app-http]
      entryPoints = ["http"]
      service = "app"
      rule = "PathPrefix(`/api/v1`)"
      middlewares = ["api-stripprefix"]

  [http.services]

    [http.services.app]
      [http.services.app.loadBalancer]
        [[http.services.app.loadBalancer.servers]]
          url = "http://127.0.0.1:8000"
```

----------------------------------------

TITLE: Declaring Additional Response Model in FastAPI
DESCRIPTION: This snippet demonstrates how to define an additional response for a FastAPI path operation using the `responses` parameter. It specifies a 404 status code with a `Message` Pydantic model, which FastAPI uses to generate the OpenAPI schema for this error response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#_snippet_0

LANGUAGE: Python
CODE:
```
responses={
    404: {"description": "Additional Response", "model": Message},
}
```

----------------------------------------

TITLE: Installing Dependencies with Caching in Dockerfile
DESCRIPTION: Installs Python dependencies from the requirements.txt file using pip. The --no-cache-dir option is used to prevent pip from storing the downloaded packages, reducing the image size.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

----------------------------------------

TITLE: Including APIRouter Instances in Main App - FastAPI Python
DESCRIPTION: Demonstrates how to include the imported `APIRouter` instances (`users.router`, `items.router`) into the main `FastAPI` application instance using `app.include_router()`. This integrates the routes defined in the submodules into the main application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

from .dependencies import get_query_token

from .routers import items, users

app = FastAPI(dependencies=[Depends(get_query_token)])

app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Dockerfile for Larger FastAPI Applications with pip
DESCRIPTION: This Dockerfile is designed for larger FastAPI applications with multiple files. It copies the requirements file, installs dependencies using pip, and then copies the application code into a subdirectory within the /app directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_17

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

----------------------------------------

TITLE: Install Packages from requirements.txt using pip
DESCRIPTION: This command installs packages from a `requirements.txt` file using `pip`. The `-r` flag specifies the file containing the list of packages to install.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/virtual-environments.md#_snippet_12

LANGUAGE: Shell
CODE:
```
pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Response Model with `response_model` Parameter
DESCRIPTION: This example shows how to use the `response_model` parameter in a FastAPI path operation decorator to specify the response model. This is useful when you want to return a different type than what is declared in the function's return type annotation, allowing FastAPI to still validate, document, and filter the output.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "description": "A very nice Item", "price": 50.2, "tax": 20.3}


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Asynchronous Route Definition in FastAPI
DESCRIPTION: This code demonstrates how to define an asynchronous route in FastAPI using `async def`. The route calls an asynchronous function `get_burgers` using `await` and returns the result.  The `@app.get` decorator registers the function as a handler for GET requests to the '/burgers' endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/async.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Wrapping Optional Type Hint with Annotated (Python 3.10+)
DESCRIPTION: This snippet demonstrates how to wrap an optional string type hint (`str | None`) with `Annotated` in Python 3.10+. `Annotated` allows adding metadata, such as validation rules, to type hints without altering the core type, preparing it for FastAPI's advanced parameter handling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_4

LANGUAGE: Python
CODE:
```
q: Annotated[str | None] = None
```

----------------------------------------

TITLE: Injecting Settings into FastAPI Path Operations - Python
DESCRIPTION: This code demonstrates how to inject the `Settings` object into a FastAPI path operation using `Depends(get_settings)`. The `info` endpoint retrieves and returns the `app_name` and `admin_email` from the application settings, ensuring consistent configuration access across the API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_12

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from .config import get_settings, Settings

app = FastAPI()

@app.get("/info")
async def info(settings: Settings = Depends(get_settings)):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email
    }
```

----------------------------------------

TITLE: Type Hinting Example in FastAPI with Pydantic
DESCRIPTION: Demonstrates how to use Python type hints and Pydantic models for data validation and automatic documentation in FastAPI. It shows a simple function with type hints and a Pydantic model defining user data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Déclare une variable comme étant une str
# et profitez de l'aide de votre IDE dans cette fonction
def main(user_id: str): 
    return user_id


# Un modèle Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Adding Custom ASGI Middleware with FastAPI - Python
DESCRIPTION: Demonstrates the recommended way to add any ASGI middleware to a FastAPI application using `app.add_middleware()`. This method ensures proper handling of server errors and custom exception handlers. It takes the middleware class as the first argument and any additional arguments for the middleware.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: Settings in a Separate Module
DESCRIPTION: This snippet shows how to define settings in a separate `config.py` module.  It defines a `Settings` class inheriting from `BaseSettings` and includes configuration options like `app_name` and `admin_email`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/settings.md#_snippet_9

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str


settings = Settings()
```

----------------------------------------

TITLE: Hashing and Verifying Passwords with Passlib
DESCRIPTION: This snippet demonstrates how to hash a password using Passlib and verify if a given password matches the stored hash. It includes helper functions for hashing passwords and verifying them against stored hashes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: Python
CODE:
```
from datetime import timedelta
from typing import Annotated

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: str | None = None


fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
    }
}


SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)


def authenticate_user(form_data: OAuth2PasswordRequestForm) -> str | bool:
    user = fake_users_db.get(form_data.username)
    if not user:
        return False
    if not verify_password(form_data.password, user["hashed_password"]):
        return False
    return user
```

----------------------------------------

TITLE: Importing and Using Settings from a Separate `config.py` File
DESCRIPTION: This snippet demonstrates how to import the `settings` instance from a `config.py` module into the main application file (`main.py`). This modular approach allows the application to access its configuration without direct knowledge of how the settings are loaded, promoting cleaner code and better separation of concerns.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_9

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

from .config import settings

app = FastAPI()

@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Creating Database Tables on FastAPI Startup
DESCRIPTION: This snippet demonstrates how to automatically create all defined database tables when the FastAPI application starts. It uses the `on_event('startup')` decorator to execute `SQLModel.metadata.create_all(engine)`, ensuring the database schema is ready before handling requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: Python
CODE:
```
def create_db_and_tables():
    SQLModel.metadata.create_all(engine)

@app.on_event("startup")
def on_startup():
    create_db_and_tables()
```

----------------------------------------

TITLE: Adding Max Length Validation to Optional Query Parameter - FastAPI Python
DESCRIPTION: This snippet extends the `Query()` declaration to include `max_length=50`, adding a string validation rule. FastAPI will automatically validate the input, provide clear error messages for invalid data, and document this constraint in the OpenAPI schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_5

LANGUAGE: Python
CODE:
```
q: Union[str, None] = Query(default=None, max_length=50)
```

----------------------------------------

TITLE: Delete Hero Endpoint
DESCRIPTION: This code defines a FastAPI endpoint for deleting a `Hero` object from the database. It retrieves the hero by ID, deletes it from the session, commits the changes, and returns a success message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: Python
CODE:
```
@router.delete("/heroes/{hero_id}")
async def delete_hero(hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    if hero:
        session.delete(hero)
        session.commit()
        return {"ok": True}
```

----------------------------------------

TITLE: Overriding Settings for Testing in FastAPI
DESCRIPTION: Demonstrates how to override settings during testing by creating a dependency override for the `get_settings` function. This allows you to inject a different `Settings` object with modified values for testing purposes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_12

LANGUAGE: Python
CODE:
```
async def get_settings():
    return Settings(admin_email="testing@example.com")

app.dependency_overrides[get_settings] = get_settings

assert app.dependency_overrides[get_settings]() == Settings(admin_email="testing@example.com")
```

----------------------------------------

TITLE: Defining User Input Model with Plaintext Password
DESCRIPTION: This Pydantic model, `UserIn`, defines the structure for user input, including a `password` field as a plain string. While suitable for input, using this same model as a `response_model` (as shown in the subsequent snippet) would expose the password in the API response, which is a security vulnerability.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/response-model.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

class UserIn(BaseModel):
    username: str
    password: str
    email: Union[str, None] = None
    full_name: Union[str, None] = None

app = FastAPI()

@app.post("/user/", response_model=UserIn)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Delete Hero using SQLModel and FastAPI
DESCRIPTION: This snippet shows how to delete a hero from the database using a DELETE request in FastAPI with SQLModel. It retrieves the hero from the database, raises an HTTP 404 error if the hero is not found, and then deletes the hero from the database using `db.delete(hero)`. Finally, it commits the changes to the database.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_16

LANGUAGE: Python
CODE:
```
@app.delete("/heroes/{hero_id}")
async def delete_hero(
    hero_id: int,
    db: Session = Depends(get_db),
):
    hero = db.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    db.delete(hero)
    db.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Read a Single Hero from Database
DESCRIPTION: This snippet reads a single `Hero` from the database based on its ID. It retrieves a specific hero from the database using a `select()` statement with a where clause.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: Python
CODE:
```
async def get_hero(*, session: SessionDep, hero_id: int) -> Optional[Hero]:
    hero = await session.get(Hero, hero_id)
    return hero
```

----------------------------------------

TITLE: Initializing OAuth2PasswordBearer for token authentication in FastAPI
DESCRIPTION: Creates an instance of OAuth2PasswordBearer, specifying the token URL where clients can send usernames and passwords to obtain a token.  The tokenUrl parameter defines the endpoint for token retrieval, which is used by FastAPI to generate OpenAPI documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Read Heroes with HeroPublic
DESCRIPTION: Shows how to use `response_model=list[HeroPublic]` to ensure that the data is validated and serialized correctly when reading multiple `Hero` objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_15

LANGUAGE: Python
CODE:
```
response_model=list[HeroPublic]
```

----------------------------------------

TITLE: List Declaration with Type Hinting (Python 3.9+)
DESCRIPTION: Declares a variable `items` as a list of strings using the built-in `list` type hint in Python 3.9 and later. This eliminates the need to import `List` from the `typing` module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
items: list[str]
```

----------------------------------------

TITLE: Defining Asynchronous Function with async def
DESCRIPTION: Defines an asynchronous function using `async def`. This allows the use of `await` within the function to pause execution and allow other tasks to run concurrently.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI application. FastAPI uses this type declaration for validation and automatic API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/az/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Using Jinja2Templates in FastAPI
DESCRIPTION: This snippet demonstrates how to integrate Jinja2 templates into a FastAPI application. It shows how to initialize `Jinja2Templates`, declare a `Request` object in a path operation, and render an HTML template using `TemplateResponse`, passing the `request` object and other data to the template context.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/templates.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

app = FastAPI()

templates = Jinja2Templates(directory="templates")

@app.get("/items/{id}", response_class=HTMLResponse)
async def read_item(request: Request, id: str):
    return templates.TemplateResponse("item.html", {"request": request, "id": id})
```

----------------------------------------

TITLE: Defining Optional Query Parameter with Query() - FastAPI Python
DESCRIPTION: This code shows how to declare an optional query parameter `q` by setting its default value to `Query(default=None)`. This makes the parameter non-required, similar to setting `q = None`, but explicitly declares it as a FastAPI query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
q: Union[str, None] = Query(default=None)
```

----------------------------------------

TITLE: Defining a Basic FastAPI App
DESCRIPTION: This code defines a basic FastAPI application with a single endpoint that returns a JSON response. It imports FastAPI, creates an app instance, and defines a GET route at the root path ('/').
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: En Sade FastAPI Uygulaması
DESCRIPTION: Bu kod parçacığı, en basit FastAPI uygulamasını tanımlar. Uygulama, "/" yolunda bir GET isteğine yanıt verir ve bir JSON nesnesi döndürür.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating FastAPI Endpoints with `async def`
DESCRIPTION: This snippet shows an alternative implementation of the basic FastAPI application, utilizing `async def` for the route handlers. This is suitable for applications that perform asynchronous I/O operations, allowing for better concurrency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It fetches the latest version of FastAPI and its dependencies from the Python Package Index (PyPI).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/it/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: Include APIRouter in another APIRouter (Python)
DESCRIPTION: This snippet shows how to include one APIRouter instance (`other_router`) into another (`router`). This allows nesting router structures. Ensure this inclusion is done before the parent router (`router`) is included in the main FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_23

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code demonstrates how to create an asynchronous FastAPI application using `async def` for the route functions. This is useful for handling I/O-bound operations without blocking the main thread.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/hu/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Using async def with await
DESCRIPTION: This code snippet demonstrates how to define a path operation function using `async def` when calling external libraries that require `await`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Overriding Settings for Testing
DESCRIPTION: This snippet demonstrates how to override the settings dependency during testing. It defines a new `override_settings` function that returns a `Settings` object with modified values. It then uses `app.dependency_overrides` to replace the original `get_settings` dependency with the override function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/settings.md#_snippet_14

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.routing import APIRoute
from httpx import AsyncClient
import pytest

from .main import get_settings, app


@pytest.fixture(scope="function")
async def client() -> AsyncClient:
    def override_settings():
        return Settings(admin_email="testing@example.com")

    app.dependency_overrides[get_settings] = override_settings

    async with AsyncClient(app=app, base_url="http://test") as client:
        yield client

    app.dependency_overrides = {}
```

----------------------------------------

TITLE: Accessing Request Body in RequestValidationError - Python
DESCRIPTION: This snippet demonstrates how to access the received body with invalid data from the RequestValidationError. This can be useful for logging, debugging, or returning the body to the user.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field

app = FastAPI()


class Item(BaseModel):
    title: str
    size: int = Field(..., gt=0, lt=10)


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content=jsonable_encoder({"detail": exc.errors(), "body": exc.body}),
    )
```

----------------------------------------

TITLE: Clearing All Dependency Overrides in FastAPI
DESCRIPTION: This snippet shows how to clear all active dependency overrides by reassigning `app.dependency_overrides` to an empty dictionary. This is crucial for resetting the application state between tests, ensuring that overrides from previous tests do not affect subsequent ones.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/testing-dependencies.md#_snippet_1

LANGUAGE: Python
CODE:
```
app.dependency_overrides = {}
```

----------------------------------------

TITLE: Implementing Active User Dependencies for Authentication in FastAPI
DESCRIPTION: This snippet defines two FastAPI dependencies: `get_current_user` for basic authentication and `get_current_active_user` which builds upon it to ensure the authenticated user is also active. Both raise `HTTPException` for unauthenticated or inactive users, providing robust access control for protected routes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from pydantic import BaseModel

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None

class UserInDB(User):
    hashed_password: str

# Placeholder for a function that retrieves user from a database
def get_user(username: str):
    # In a real app, this would query your database
    fake_users_db = {
        "johndoe": {"username": "johndoe", "full_name": "John Doe", "email": "john@example.com", "hashed_password": "fakehashedsecret", "disabled": False},
        "janedoe": {"username": "janedoe", "full_name": "Jane Doe", "email": "jane@example.com", "hashed_password": "fakehashedsecret", "disabled": True}
    }
    if username in fake_users_db:
        return UserInDB(**fake_users_db[username])
    return None

async def get_current_user(token: str = Depends(oauth2_scheme)):
    user = get_user(token)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return user

async def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Inactive user")
    return current_user

@app.get("/users/me/")
async def read_users_me(current_user: User = Depends(get_current_active_user)):
    return current_user
```

----------------------------------------

TITLE: Using context managers in dependencies with yield
DESCRIPTION: Shows how to use `with` statements within FastAPI dependency functions that use `yield`. This allows for custom resource management within dependencies, ensuring resources are properly released when the dependency is finished.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_7

LANGUAGE: Python
CODE:
```
async def get_db():
    db = FakeDatabase()
    try:
        yield db
    finally:
        await db.close()
```

----------------------------------------

TITLE: Annotated Dockerfile for FastAPI
DESCRIPTION: This Dockerfile provides a step-by-step guide to building a FastAPI Docker image, with inline comments explaining each command. It covers selecting a base image, setting the working directory, copying dependencies, installing Python packages, and copying the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
# (1)
FROM python:3.9

# (2)
WORKDIR /code

# (3)
COPY ./requirements.txt /code/requirements.txt

# (4)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (5)
COPY ./app /code/app
```

----------------------------------------

TITLE: Installing FastAPI with all optional dependencies
DESCRIPTION: This command installs FastAPI along with all of its optional dependencies, including those required by Pydantic and Starlette. This ensures that all features and functionalities are available.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/hu/docs/index.md#_snippet_9

LANGUAGE: bash
CODE:
```
pip install "fastapi[all]"
```

----------------------------------------

TITLE: Defining Optional Query Parameter (Python 3.10+) - FastAPI Python
DESCRIPTION: This snippet demonstrates defining an optional query parameter `q` using the Python 3.10+ union syntax (`str | None`) and `Query(default=None)`. It achieves the same optionality as `Union[str, None]` while explicitly marking it as a FastAPI query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
q: str | None = Query(default=None)
```

----------------------------------------

TITLE: Create Session Dependency
DESCRIPTION: This code creates a dependency that yields a new database session for each request. It uses `Session` from SQLModel to manage database interactions. The `yield` statement ensures that the session is closed after the request is completed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends
from sqlmodel import Session


def get_session():
    with Session(engine) as session:
        yield session


SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: Defining Application Settings with Pydantic - Python
DESCRIPTION: This snippet defines the `Settings` class using Pydantic's `BaseSettings` to manage application configuration. It includes `app_name` and `admin_email` fields. The `get_settings` function, decorated with `@lru_cache`, ensures that the `Settings` object is instantiated only once, optimizing performance for subsequent calls.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_11

LANGUAGE: Python
CODE:
```
from functools import lru_cache
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str

@lru_cache
def get_settings():
    return Settings()
```

----------------------------------------

TITLE: Initializing OAuth2 Password Bearer in FastAPI
DESCRIPTION: This snippet initializes a FastAPI application and configures OAuth2 security using `OAuth2PasswordBearer`. It defines a dependency that expects a token from the client, enabling the automatic generation of an 'Authorize' button in the interactive API documentation (Swagger UI) and enforcing authentication for protected endpoints. The `tokenUrl` parameter specifies the endpoint where the client should send username and password to obtain a token.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Pydantic v2 settings configuration
DESCRIPTION: This Python snippet demonstrates how to configure Pydantic settings in v2 to read from a `.env` file. The `env_file` configuration specifies the path to the `.env` file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/settings.md#_snippet_16

LANGUAGE: Python
CODE:
```
model_config = SettingsConfigDict(env_file='.env')
```

----------------------------------------

TITLE: Defining and Using a Pydantic Model - Python
DESCRIPTION: This snippet defines a `Person` class that inherits from Pydantic's `BaseModel`, allowing for data validation and type conversion. It declares `name` as a required string and `age` as an optional integer. The example demonstrates creating instances of the `Person` model from dictionaries, which automatically validates and converts data, providing strong type support.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel

class Person(BaseModel):
    name: str
    age: Optional[int] = None

def greet_person(person: Person):
    print(f"Hello, {person.name}. You are {person.age} years old.")

# Example usage
person_data = {"name": "Alice", "age": 30}
alice = Person(**person_data)
greet_person(alice)

person_data_no_age = {"name": "Bob"}
bob = Person(**person_data_no_age)
greet_person(bob)
```

----------------------------------------

TITLE: Declaring an Item Model
DESCRIPTION: This code snippet shows how to declare a more complex `Item` model using Python's type hinting. This allows FastAPI to perform data validation, conversion, and automatic API documentation generation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining Asynchronous Functions in Python
DESCRIPTION: This code snippet shows how to define an asynchronous function in Python using the `async def` syntax.  Asynchronous functions can use the `await` keyword to pause execution until an asynchronous operation completes, allowing other tasks to run concurrently.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/async.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Opérations asynchrones pour créer les burgers
    return burgers
```

----------------------------------------

TITLE: Reutilizando dependências Annotated
DESCRIPTION: Este snippet demonstra como reutilizar uma dependência definida com `Annotated` em diferentes funções, mantendo a tipagem e evitando duplicação de código.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
{* ../../docs_src/dependencies/tutorial001_02_an_py310.py hl[12,16,21] *}
```

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: This Python snippet demonstrates how to read an environment variable named `MY_NAME` using the `os.getenv()` function. It provides a default value of "World" if the environment variable is not set. The script then prints a greeting using the value of the environment variable or the default value.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_2

LANGUAGE: Python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Basic FastAPI Application (main.py)
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: a root endpoint that returns 'Hello: World' and an item endpoint that accepts an `item_id` and an optional query parameter `q`. It demonstrates basic routing and type hinting in FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Union Type Declaration (Python 3.8+)
DESCRIPTION: Demonstrates declaring a variable that can be either an integer or a string using the Union type from the typing module in Python 3.8 and later.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Union

item: Union[int, str]
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints. The root endpoint (`/`) returns a 'Hello: World' message, and the `/items/{item_id}` endpoint demonstrates path parameters and optional query parameters. This serves as the core application logic to be containerized.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Executing Python Script from Console
DESCRIPTION: This console command shows how to directly execute a Python script named `myapp.py` from the command line. When run this way, the `__name__` variable inside `myapp.py` will be set to `"__main__"`, allowing conditional code blocks to execute.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/debugging.md#_snippet_1

LANGUAGE: console
CODE:
```
$ python myapp.py
```

----------------------------------------

TITLE: Tuple and Set Type Declaration (Python 3.8+)
DESCRIPTION: Declares a tuple and a set with specific types using the `typing` module in Python 3.8+. The variable `items_t` is a tuple containing two integers and a string. The variable `items_s` is a set containing bytes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Tuple, Set

items_t: Tuple[int, int, str] = (1, 2, "Foo")
items_s: Set[bytes] = {b"Foo", b"Bar"}
```

----------------------------------------

TITLE: Declaring Synchronous Path Operation Function (FastAPI, Python)
DESCRIPTION: This snippet illustrates how to define a FastAPI path operation function using a standard `def` when interacting with a synchronous (blocking) third-party library, such as most traditional database clients. FastAPI automatically runs these `def` functions in a separate thread pool, preventing them from blocking the main asynchronous event loop and maintaining responsiveness.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Loading Settings from .env with Pydantic - Python
DESCRIPTION: This Python snippet demonstrates how to configure Pydantic's `Settings` class to automatically load environment variables from a `.env` file. By setting `model_config = SettingsConfigDict(env_file=".env")` within the `Settings` class, Pydantic will look for and parse the specified `.env` file during instantiation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_15

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str

    model_config = SettingsConfigDict(env_file=".env")
```

----------------------------------------

TITLE: Defining Pydantic Models (Python 3.10+)
DESCRIPTION: Demonstrates defining a Pydantic model using standard type hints, including `Optional` and `list[str]`, for data validation and structure. This example is tailored for Python 3.10+ syntax, showcasing how Pydantic validates and converts input data into structured objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_27

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list[str] = []
```

----------------------------------------

TITLE: Reading Heroes from the Database
DESCRIPTION: This snippet demonstrates how to read heroes from the database using a `select()` statement. It includes `limit` and `offset` parameters for pagination.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
async def get_heroes(
    *, session: AsyncSession, offset: int = 0, limit: int = 100
) -> List[Hero]:
    heroes = await session.exec(select(Hero).offset(offset).limit(limit))
    return heroes.all()
```

----------------------------------------

TITLE: Defining a GET Path Operation Decorator in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a GET path operation decorator in FastAPI using the `@app.get("/")` decorator. It associates the function below it with the root path ("/") and the HTTP GET method, allowing FastAPI to route incoming GET requests to that path to the decorated function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Define Path Operations with Correct Order - Python
DESCRIPTION: This code snippet demonstrates how to define path operations in FastAPI with the correct order to avoid conflicts. The `/users/me` path must be declared before `/users/{user_id}`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Filtering Response Data with response_model_exclude (List) - FastAPI Python
DESCRIPTION: This snippet illustrates using the `response_model_exclude` parameter with a `list` (which FastAPI converts to a `set`) to omit specific attributes from the API response. Here, 'tax' and 'description' are excluded. FastAPI gracefully handles lists/tuples for these parameters, converting them to sets internally for correct functionality.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}", response_model=Item, response_model_exclude=["tax", "description"])
async def read_item_exclude(item_id: str):
    return {
        "name": "Bar",
        "description": "Another description",
        "price": 20.0,
        "tax": 1.0,
    }
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This snippet shows an alternative implementation of the basic FastAPI application using `async def` for the route functions. This is suitable for applications that perform asynchronous operations, allowing for better concurrency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Basic Dockerfile for FastAPI with Uvicorn/Gunicorn
DESCRIPTION: This Dockerfile provides a basic setup for a FastAPI application using the `tiangolo/uvicorn-gunicorn-fastapi` base image. It copies `requirements.txt`, installs dependencies, and then copies the application code into the `/app` directory. This is suitable for standard FastAPI projects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_15

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Setting Max Length for Optional Query Parameter - Python
DESCRIPTION: This snippet demonstrates how to use `Query` to add a `max_length` validation to an optional string query parameter `q`. The parameter `q` will be optional (defaulting to `None`), but if provided, its length must not exceed 50 characters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/query-params-str-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def read_items(q: Union[str, None] = Query(default=None, max_length=50)):
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a complex item model in FastAPI using Python type hints. FastAPI uses this declaration for validation and documentation of the item's structure.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Import OAuth2PasswordRequestForm and use it as a dependency
DESCRIPTION: This code snippet demonstrates how to import the `OAuth2PasswordRequestForm` from `fastapi.security` and use it as a dependency in a FastAPI endpoint to handle username, password, and optional scope from a form.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm

app = FastAPI()


@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    return {"access_token": form_data.username, "token_type": "bearer"}
```