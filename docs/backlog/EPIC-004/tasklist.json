{
  "epic_id": "EPIC-004",
  "tasks": [
    {
      "task_id": 1,
      "title": "Define Data Models for Learning Tracks & User Progress",
      "status": "pending",
      "description": "Design and define database schemas (Supabase) and corresponding Pydantic models for Learning Tracks, Learning Units, and User Progress.",
      "dependencies": ["EPIC-001/4"],
      "phase": "core",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "SQL schema definitions, Pydantic models in `backend/app/db/models.py`. This is a data model contract task.",
      "service_focus": "Database schema design",
      "parallel_work": ["EPIC-004_TASK_3", "EPIC-004_TASK_6"],
      "blocking_dependencies": ["EPIC-001/4"],
      "contract_dependencies": [],
      "enables_parallel_work": "Unblocks backend development of learning path management logic and frontend display of track information."
    },
    {
      "task_id": 2,
      "title": "Implement CRUD Operations for Learning Tracks & Units",
      "status": "pending",
      "description": "Develop backend CRUD operations for creating, reading, updating, and deleting Learning Tracks and their constituent Learning Units.",
      "dependencies": [1],
      "phase": "core",
      "priority": "high",
      "estimated_hours": 7,
      "scope": "FastAPI service functions and Supabase interaction logic for managing learning path content.",
      "service_focus": "Backend data access layer (CRUD for learning paths)",
      "parallel_work": ["EPIC-004_TASK_6"],
      "blocking_dependencies": [1],
      "contract_dependencies": ["Learning Track data models from EPIC-004_TASK_1"],
      "enables_parallel_work": "Allows administrative interfaces or scripts to start populating learning content."
    },
    {
      "task_id": 3,
      "title": "Design and Implement `LearningPathWorkflow` in Temporal",
      "status": "pending",
      "description": "Design a new Temporal workflow (`LearningPathWorkflow`) to manage a user's progression through an entire learning track, orchestrating activities and tracking state.",
      "dependencies": ["EPIC-001/7", 1],
      "phase": "core",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Temporal workflow definition in `workflows.py`, including states, signals, and activities for managing a learning journey.",
      "service_focus": "Temporal workflows (backend)",
      "parallel_work": ["EPIC-004_TASK_4"],
      "blocking_dependencies": ["EPIC-001/7", 1],
      "contract_dependencies": ["Learning Track data models from EPIC-004_TASK_1"],
      "enables_parallel_work": "Provides the backbone for personalized, multi-step learning experiences."
    },
    {
      "task_id": 4,
      "title": "AI Agent Logic for Guiding Users Through Learning Tracks",
      "status": "pending",
      "description": "Enhance the AI agent to understand learning tracks, guide users to the next step, and interact with the `LearningPathWorkflow`.",
      "dependencies": ["EPIC-002/3", 3],
      "phase": "core",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Updates to `tutor_agent.py` to interact with `LearningPathWorkflow` and make decisions based on user progress.",
      "service_focus": "AI Agent implementation (backend)",
      "parallel_work": ["EPIC-004_TASK_5"],
      "blocking_dependencies": ["EPIC-002/3", 3],
      "contract_dependencies": ["Learning Track data models from EPIC-004_TASK_1"],
      "enables_parallel_work": "Makes the AI agent capable of long-term guidance."
    },
    {
      "task_id": 5,
      "title": "Basic Adaptive Logic: Content Adjustment Based on Performance",
      "status": "pending",
      "description": "Implement a simple adaptive learning algorithm, e.g., if a user fails an MCQ, the system offers a prerequisite unit or a different explanation.",
      "dependencies": ["EPIC-003/7", 4],
      "phase": "core",
      "priority": "medium",
      "estimated_hours": 8,
      "scope": "Logic within `LearningPathWorkflow` or `tutor_agent.py` to adjust activity sequence based on rich component outcomes.",
      "service_focus": "AI Agent logic, Temporal workflow logic",
      "parallel_work": [],
      "blocking_dependencies": ["EPIC-003/7", 4],
      "contract_dependencies": ["Rich component interaction outcomes from EPIC-003 tasks"],
      "enables_parallel_work": "Introduces initial personalization into the learning flow."
    },
    {
      "task_id": 6,
      "title": "Frontend UI for Learning Track Discovery and Navigation",
      "status": "pending",
      "description": "Implement UI elements (e.g., interactive cards/carousels) for users to discover, select, and see their position in learning tracks.",
      "dependencies": ["EPIC-001/2", 2],
      "phase": "core",
      "priority": "medium",
      "estimated_hours": 7,
      "scope": "New React components in `frontend/src/features/ai-tutor/components/learning-paths/`. Service calls to fetch track data.",
      "service_focus": "Frontend UI, Learning Path display",
      "parallel_work": ["EPIC-004_TASK_7"],
      "blocking_dependencies": ["EPIC-001/2", 2],
      "contract_dependencies": ["Learning Track data models from EPIC-004_TASK_1 (for display)"],
      "enables_parallel_work": "Allows users to engage with structured learning content."
    },
    {
      "task_id": 7,
      "title": "Frontend Display of Progress Within Learning Tracks",
      "status": "pending",
      "description": "Implement UI elements to visually represent the user's progress within a selected learning track.",
      "dependencies": [6, 8],
      "phase": "core",
      "priority": "medium",
      "estimated_hours": 6,
      "scope": "React components for progress visualization (e.g., progress bar, checklist).",
      "service_focus": "Frontend UI, User progress display",
      "parallel_work": [],
      "blocking_dependencies": [6, 8],
      "contract_dependencies": ["User Progress data model from EPIC-004_TASK_1 (via EPIC-004_TASK_8)"],
      "enables_parallel_work": "Provides users with feedback on their learning journey."
    },
    {
      "task_id": 8,
      "title": "Store and Retrieve User Progress in Learning Tracks (Supabase & Temporal)",
      "status": "pending",
      "description": "Implement backend logic to persist user progress in Supabase, orchestrated by `LearningPathWorkflow`. Provide API/service functions for frontend to fetch progress.",
      "dependencies": [1, 3],
      "phase": "core",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Updates to `LearningPathWorkflow` activities to save progress using `crud.py`. API endpoints if needed.",
      "service_focus": "Database interaction (CRUD for user progress), Temporal activities, Backend API/services",
      "parallel_work": ["EPIC-004_TASK_7"],
      "blocking_dependencies": [1, 3],
      "contract_dependencies": ["User Progress data models from EPIC-004_TASK_1"],
      "enables_parallel_work": "Critical for personalization and for FE to display progress."
    }
  ]
}
