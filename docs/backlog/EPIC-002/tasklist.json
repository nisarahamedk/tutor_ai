{
  "epic_id": "EPIC-002",
  "tasks": [
    {
      "task_id": 1,
      "title": "Define AI Agent Interaction Contract & AG-UI Events",
      "status": "pending",
      "description": "Specify the data structures for messages passed to the AI agent and the responses/commands received from it. Define any new AG-UI events needed for the AI to communicate basic instructions or text back to the frontend.",
      "dependencies": ["EPIC-001/1"],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 6,
      "scope": "Data models for AI agent input/output. AG-UI event definitions for AI-driven chat interactions. This is a contract-only task.",
      "service_focus": "AI Agent interface contract, AG-UI event contract",
      "parallel_work": ["EPIC-002_TASK_2", "EPIC-002_TASK_3"],
      "blocking_dependencies": ["EPIC-001/1"],
      "contract_dependencies": ["Basic chat AG-UI events from EPIC-001/1"],
      "enables_parallel_work": "Unblocks FE work to handle AI responses and BE work to integrate the AI agent."
    },
    {
      "task_id": 2,
      "title": "Choose and Setup AI Agent Framework (e.g., LangGraph/CrewAI)",
      "status": "pending",
      "description": "Research and select an initial AI agent framework (LangGraph or CrewAI as suggested). Set up the basic structure for this framework within the backend (`app/agents/`).",
      "dependencies": ["EPIC-001/3"],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 7,
      "scope": "Framework selection, installation, creating placeholder agent files (e.g., `tutor_agent.py`), basic configuration.",
      "service_focus": "AI Agent framework setup (backend)",
      "parallel_work": ["EPIC-002_TASK_1", "EPIC-002_TASK_3"],
      "blocking_dependencies": ["EPIC-001/3"],
      "contract_dependencies": [],
      "enables_parallel_work": "Allows AI engineers to start developing the agent logic."
    },
    {
      "task_id": 3,
      "title": "Develop Simple AI Agent for Text Processing & LLM Integration",
      "status": "pending",
      "description": "Implement a basic AI agent using the chosen framework (Task 2.2) that can receive text input (based on contract from Task 2.1), pass it to an LLM (e.g., OpenAI API via a stub/mock initially), and formulate a simple text response.",
      "dependencies": [1, 2],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Agent logic in `tutor_agent.py`, LLM API call (can be mocked), response generation. Focus on the flow, not sophisticated AI logic yet.",
      "service_focus": "AI Agent implementation (backend)",
      "parallel_work": [],
      "blocking_dependencies": [1, 2],
      "contract_dependencies": ["AI Agent I/O contract from EPIC-002_TASK_1"],
      "enables_parallel_work": "Provides a testable AI agent for backend integration."
    },
    {
      "task_id": 4,
      "title": "Integrate AI Agent with Backend via Temporal Activity",
      "status": "pending",
      "description": "Create a new Temporal activity that calls the AI agent (developed in Task 2.3). Modify the existing `ChatSessionWorkflow` (from Task 1.7) to invoke this activity when a user sends a message.",
      "dependencies": ["EPIC-001/7", 3],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "New Temporal activity in `activities.py` to interface with `tutor_agent.py`. Updates to `ChatSessionWorkflow` in `workflows.py` to orchestrate the call.",
      "service_focus": "Temporal workflow and activities (backend), AI Agent service integration",
      "parallel_work": ["EPIC-002_TASK_5"],
      "blocking_dependencies": ["EPIC-001/7", 3],
      "contract_dependencies": ["AI Agent I/O contract from EPIC-002_TASK_1"],
      "enables_parallel_work": "Connects the AI logic to the backend messaging flow."
    },
    {
      "task_id": 5,
      "title": "Relay AI Agent Responses to Frontend via AG-UI",
      "status": "pending",
      "description": "Modify the backend AG-UI server logic to take the AI agent's response (obtained via the Temporal workflow in Task 2.4) and send it to the appropriate frontend client using the AG-UI event contracts defined in Task 2.1.",
      "dependencies": [1, 4],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 7,
      "scope": "Updates to `chat.py` (or a chat service) to handle AI responses from Temporal and emit AG-UI events.",
      "service_focus": "Backend AG-UI integration, Chat service",
      "parallel_work": ["EPIC-002_TASK_6"],
      "blocking_dependencies": [1, 4],
      "contract_dependencies": ["AG-UI AI event contracts from EPIC-002_TASK_1"],
      "enables_parallel_work": "Allows the frontend to receive and display AI-generated messages."
    },
    {
      "task_id": 6,
      "title": "Frontend Handling of AI Agent Text Responses",
      "status": "pending",
      "description": "Update the frontend AG-UI client and chat UI to handle and display the new AG-UI events containing text responses from the AI agent (as defined in Task 2.1).",
      "dependencies": ["EPIC-001/6", 1],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 6,
      "scope": "Updates to `ag-ui-client.ts` and relevant React components to subscribe to and render AI messages.",
      "service_focus": "Frontend AG-UI service, Chat UI components",
      "parallel_work": [],
      "blocking_dependencies": ["EPIC-001/6", 1],
      "contract_dependencies": ["AG-UI AI event contracts from EPIC-002_TASK_1"],
      "enables_parallel_work": "Completes the loop for basic AI-driven chat."
    },
    {
      "task_id": 7,
      "title": "Define Initial Learning Content Snippets (Data Model & Storage)",
      "status": "pending",
      "description": "Define a simple data model for very basic learning content snippets (e.g., a topic name and a short piece of text). Implement CRUD operations in Supabase for this content.",
      "dependencies": ["EPIC-001/4"],
      "phase": "foundation",
      "priority": "medium",
      "estimated_hours": 6,
      "scope": "Pydantic models for `LearningContent`, Supabase table schema, `crud.py` functions for content.",
      "service_focus": "Database schema, Content service (backend - data access layer)",
      "parallel_work": ["EPIC-002_TASK_8"],
      "blocking_dependencies": ["EPIC-001/4"],
      "contract_dependencies": [],
      "enables_parallel_work": "Allows for content to be created and used by the AI agent in later tasks/epics."
    },
    {
      "task_id": 8,
      "title": "Basic AI Agent Content Delivery (Proof of Concept)",
      "status": "pending",
      "description": "Enhance the AI agent (Task 2.3) to retrieve a piece of learning content (from Task 2.7's mechanism) based on a very simple trigger (e.g., user types \"teach me about X\") and include it in its response.",
      "dependencies": [3, 7],
      "phase": "foundation",
      "priority": "medium",
      "estimated_hours": 7,
      "scope": "Minor enhancement to `tutor_agent.py` to call content CRUD function and incorporate into LLM prompt/response.",
      "service_focus": "AI Agent logic, Content service integration",
      "parallel_work": [],
      "blocking_dependencies": [3, 7],
      "contract_dependencies": ["Content data model from EPIC-002_TASK_7"],
      "enables_parallel_work": "Demonstrates basic content delivery capability."
    }
  ]
}
