{
  "epic_id": "EPIC-003",
  "tasks": [
    {
      "task_id": 1,
      "title": "Define AG-UI Event Contracts for Rich Components",
      "status": "pending",
      "description": "Specify the AG-UI event structures for the backend/AI to instruct the frontend to render various rich components (e.g., multiple-choice question, slider, interactive card). Define events for user interactions with these components back to the backend.",
      "dependencies": ["EPIC-002/1"],
      "phase": "core",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Detailed JSON schemas for AG-UI events related to ~3-4 key rich component types. This is a contract-only task. Include component configuration options.",
      "service_focus": "AG-UI event contract (shared)",
      "parallel_work": ["EPIC-003_TASK_2", "EPIC-003_TASK_4"],
      "blocking_dependencies": ["EPIC-002/1"],
      "contract_dependencies": ["AI AG-UI event contracts from EPIC-002/1"],
      "enables_parallel_work": "Unblocks FE development of the rich component library and BE work on AI agent logic to use them."
    },
    {
      "task_id": 2,
      "title": "Develop Reusable React Rich Component Library (Initial Set)",
      "status": "pending",
      "description": "Design and implement a library of 2-3 core reusable rich React components (e.g., MultipleChoiceQuestion, SkillSlider) based on the PRD and Task 3.1 contracts.",
      "dependencies": ["EPIC-001/2", 1],
      "phase": "core",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "React component implementation in `frontend/src/features/ai-tutor/components/rich/`. Focus on props-based configuration and emitting interaction events. Covers 2 components.",
      "service_focus": "Frontend rich component library",
      "parallel_work": ["EPIC-003_TASK_4", "EPIC-003_TASK_6"],
      "blocking_dependencies": ["EPIC-001/2", 1],
      "contract_dependencies": ["Rich Component AG-UI Contracts from EPIC-003_TASK_1"],
      "enables_parallel_work": "Provides the UI elements for advanced interactivity."
    },
    {
      "task_id": 3,
      "title": "Frontend AG-UI Client Handling for Rich Component Rendering & Events",
      "status": "pending",
      "description": "Extend the frontend AG-UI client (`agUiService.ts`) to handle incoming AG-UI events for rendering rich components (from Task 3.1). Implement logic to dynamically display the correct component and pass it the specified configuration. Handle user interaction events from components and send them to the backend.",
      "dependencies": ["EPIC-002/6", 1, 2],
      "phase": "core",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Updates to `agUiService.ts` and main chat UI to manage rich component lifecycle based on AG-UI messages.",
      "service_focus": "Frontend AG-UI service, Rich component integration",
      "parallel_work": [],
      "blocking_dependencies": ["EPIC-002/6", 1, 2],
      "contract_dependencies": ["Rich Component AG-UI contracts from EPIC-003_TASK_1"],
      "enables_parallel_work": "Allows the frontend to dynamically display and interact with rich components."
    },
    {
      "task_id": 4,
      "title": "AI Agent Logic to Select and Configure Rich Components",
      "status": "pending",
      "description": "Enhance the AI agent to decide when a rich component is appropriate for an interaction. Implement logic for the agent to select a component type and configure it based on the learning context.",
      "dependencies": ["EPIC-002/3", 1],
      "phase": "core",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Updates to `tutor_agent.py` to include decision logic for component selection and formatting output according to Task 3.1 AG-UI contracts.",
      "service_focus": "AI Agent implementation (backend)",
      "parallel_work": ["EPIC-003_TASK_2"],
      "blocking_dependencies": ["EPIC-002/3", 1],
      "contract_dependencies": ["Rich Component AG-UI contracts from EPIC-003_TASK_1"],
      "enables_parallel_work": "Enables the AI to drive more interactive experiences."
    },
    {
      "task_id": 5,
      "title": "Backend AG-UI Server & Temporal Workflow - Rich Component Event Handling",
      "status": "pending",
      "description": "Modify the backend AG-UI server and relevant Temporal workflows to relay AI agent's instructions for rich components to the frontend, receive and process data submitted by users through these components, and pass this interaction data to the AI agent.",
      "dependencies": ["EPIC-002/5", 1, 4],
      "phase": "core",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Updates to `chat.py`, Temporal activities, and `ChatSessionWorkflow` to manage the two-way communication for rich components.",
      "service_focus": "Backend AG-UI integration, Temporal workflows, AI Agent service integration",
      "parallel_work": [],
      "blocking_dependencies": ["EPIC-002/5", 1, 4],
      "contract_dependencies": ["Rich Component AG-UI contracts from EPIC-003_TASK_1"],
      "enables_parallel_work": "Completes the backend loop for rich component interactions."
    },
    {
      "task_id": 6,
      "title": "Develop Additional Rich Component (e.g., Interactive Card)",
      "status": "pending",
      "description": "Design and implement one more distinct rich component (e.g., an InteractiveCard) based on PRD and refined contracts from Task 3.1.",
      "dependencies": ["EPIC-001/2", 1],
      "phase": "core",
      "priority": "medium",
      "estimated_hours": 7,
      "scope": "Similar to Task 3.2 but for a different component type.",
      "service_focus": "Frontend rich component library",
      "parallel_work": [],
      "blocking_dependencies": ["EPIC-001/2", 1],
      "contract_dependencies": ["Rich Component AG-UI Contracts from EPIC-003_TASK_1"],
      "enables_parallel_work": "Expands the library of interactive tools."
    },
    {
      "task_id": 7,
      "title": "AI Agent - Processing User Input from Rich Components",
      "status": "pending",
      "description": "Implement logic within the AI agent to understand and act upon data received from user interactions with rich components (e.g., evaluate an MCQ answer).",
      "dependencies": [4, 5],
      "phase": "core",
      "priority": "medium",
      "estimated_hours": 7,
      "scope": "Updates to `tutor_agent.py` to handle new input types from rich components.",
      "service_focus": "AI Agent implementation (backend)",
      "parallel_work": [],
      "blocking_dependencies": [4, 5],
      "contract_dependencies": ["Rich Component AG-UI contracts from EPIC-003_TASK_1 (specifically, the data format from FE)"],
      "enables_parallel_work": "Makes the rich components truly interactive and part of the learning dialogue."
    },
    {
      "task_id": 8,
      "title": "Temporal Workflow State Management for Rich Component Interactions",
      "status": "pending",
      "description": "Update Temporal workflows (`ChatSessionWorkflow`) to manage any necessary state related to ongoing rich component interactions (e.g., tracking if a question has been answered).",
      "dependencies": [5],
      "phase": "core",
      "priority": "medium",
      "estimated_hours": 6,
      "scope": "Enhancements to `workflows.py` for more detailed state tracking within a session.",
      "service_focus": "Temporal workflows (backend)",
      "parallel_work": [],
      "blocking_dependencies": [5],
      "contract_dependencies": [],
      "enables_parallel_work": "Improves robustness and allows for more complex multi-step interactions involving components."
    }
  ]
}
