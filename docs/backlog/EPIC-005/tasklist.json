{
  "epic_id": "EPIC-005",
  "tasks": [
    {
      "task_id": 1,
      "title": "Develop Comprehensive Unit Tests for Backend Services & Agents",
      "status": "pending",
      "description": "Write unit tests for key backend services (chat, learning path) and critical AI agent logic. Focus on business logic and service interactions.",
      "dependencies": ["EPIC-004/8"],
      "phase": "polish",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Pytest test cases for `backend/app/services/`, `agents/`, `temporal/activities.py`. Mock external dependencies.",
      "service_focus": "Backend services, AI Agents, Temporal Activities",
      "parallel_work": ["EPIC-005_TASK_2", "EPIC-005_TASK_3"],
      "blocking_dependencies": ["EPIC-004/8"],
      "contract_dependencies": ["Service interfaces from EPIC-001 to EPIC-004", "Agent I/O contracts"],
      "enables_parallel_work": "Can be done by QA or dedicated developers alongside final feature tweaks."
    },
    {
      "task_id": 2,
      "title": "Develop Integration Tests for Key Backend Flows",
      "status": "pending",
      "description": "Create integration tests for interactions between backend components (API -> Temporal -> AI Agent -> DB).",
      "dependencies": ["EPIC-004/8"],
      "phase": "polish",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Pytest integration tests using test Supabase and local Temporal. Test chat flow, AI response, learning path state changes.",
      "service_focus": "Backend system integration",
      "parallel_work": ["EPIC-005_TASK_1", "EPIC-005_TASK_3"],
      "blocking_dependencies": ["EPIC-004/8"],
      "contract_dependencies": ["API contracts", "AG-UI event contracts from prior epics"],
      "enables_parallel_work": "Validates system integrity."
    },
    {
      "task_id": 3,
      "title": "Develop Basic End-to-End (E2E) Tests for Core User Journeys",
      "status": "pending",
      "description": "Implement key E2E tests (Playwright/Cypress) simulating user interaction from frontend to backend. Test basic chat, AI interaction, starting a learning path.",
      "dependencies": ["EPIC-004/7", "EPIC-004/8"],
      "phase": "polish",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Test scripts for user login, sending message, AI response, viewing learning tracks.",
      "service_focus": "Full system E2E testing",
      "parallel_work": ["EPIC-005_TASK_1", "EPIC-005_TASK_2"],
      "blocking_dependencies": ["EPIC-004/7", "EPIC-004/8"],
      "contract_dependencies": ["UI element selectors", "API responses from prior epics"],
      "enables_parallel_work": "Provides highest level of confidence in system functionality."
    },
    {
      "task_id": 4,
      "title": "Production Infrastructure Setup (Hosting, DB, Temporal Cluster)",
      "status": "pending",
      "description": "Provision and configure production-level infrastructure for Next.js frontend, FastAPI backend, Supabase, and Temporal cluster.",
      "dependencies": ["EPIC-001/8"],
      "phase": "polish",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Cloud service configurations (Vercel/Netlify, AWS/Google Cloud), database provisioning, networking. Temporal Cloud or self-hosted setup.",
      "service_focus": "DevOps, Infrastructure",
      "parallel_work": ["EPIC-005_TASK_5"],
      "blocking_dependencies": ["EPIC-001/8"],
      "contract_dependencies": [],
      "enables_parallel_work": "Prepares the ground for actual deployment."
    },
    {
      "task_id": 5,
      "title": "Finalize CI/CD Pipeline for Automated Deployments",
      "status": "pending",
      "description": "Extend CI/CD pipeline to include build, automated testing (unit, integration), and deployment scripts for staging/production.",
      "dependencies": ["EPIC-001/8", 4],
      "phase": "polish",
      "priority": "high",
      "estimated_hours": 7,
      "scope": "GitHub Actions workflows for Docker builds, registry push, deployment to hosting.",
      "service_focus": "DevOps, CI/CD",
      "parallel_work": [],
      "blocking_dependencies": ["EPIC-001/8", 4],
      "contract_dependencies": [],
      "enables_parallel_work": "Automates the release process."
    },
    {
      "task_id": 6,
      "title": "Implement Basic Logging and Monitoring for All System Components",
      "status": "pending",
      "description": "Integrate structured logging in backend. Set up basic monitoring dashboards for system health and key metrics.",
      "dependencies": [5],
      "phase": "polish",
      "priority": "medium",
      "estimated_hours": 7,
      "scope": "Add logging (e.g., `loguru`). Configure log aggregation. Set up alerts for critical errors. Use Supabase logs, Temporal UI, or dedicated monitoring service.",
      "service_focus": "Backend observability, System health",
      "parallel_work": [],
      "blocking_dependencies": [5],
      "contract_dependencies": [],
      "enables_parallel_work": "Essential for maintaining a production system."
    },
    {
      "task_id": 7,
      "title": "Conduct Usability Testing (Internal Walkthrough)",
      "status": "pending",
      "description": "Organize and conduct internal usability testing sessions for core user journeys. Collect feedback on UI/UX and overall experience.",
      "dependencies": [3, 6],
      "phase": "polish",
      "priority": "medium",
      "estimated_hours": 6,
      "scope": "Define test scenarios. Observe users. Document findings. Requires a mostly feature-complete staging version.",
      "service_focus": "UX/UI validation",
      "parallel_work": [],
      "blocking_dependencies": [3, 6],
      "contract_dependencies": [],
      "enables_parallel_work": "Provides qualitative feedback for pre-launch improvements."
    },
    {
      "task_id": 8,
      "title": "Create Initial Documentation for System Overview & Setup",
      "status": "pending",
      "description": "Write basic documentation covering system architecture, key components, and setup instructions for new developers or operational reference.",
      "dependencies": ["EPIC-004/8"],
      "phase": "polish",
      "priority": "medium",
      "estimated_hours": 6,
      "scope": "README updates, wiki pages, or documents in `docs/`. Summarize `architecture.md` and add deployment notes. System architecture should be stable.",
      "service_focus": "Developer and operational documentation",
      "parallel_work": [],
      "blocking_dependencies": ["EPIC-004/8"],
      "contract_dependencies": [],
      "enables_parallel_work": "Helps with onboarding and system maintenance."
    }
  ]
}
