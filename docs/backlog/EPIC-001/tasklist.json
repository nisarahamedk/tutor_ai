{
  "epic_id": "EPIC-001",
  "tasks": [
    {
      "task_id": 1,
      "title": "Define Chat API and AG-UI Event Contracts",
      "status": "pending",
      "description": "Define the precise request/response schemas for chat message submission and broadcasting, and the initial AG-UI event structures for user joining, sending messages, and receiving messages. This includes status codes and error handling.",
      "dependencies": [],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 6,
      "scope": "Create OpenAPI/Swagger specification for chat message API endpoints. Document AG-UI event names, payload structures for basic chat interactions. Does not include implementing the API, only defining its contract.",
      "service_focus": "API contract definition (backend), AG-UI event contract (shared)",
      "parallel_work": ["EPIC-001_TASK_2", "EPIC-001_TASK_3", "EPIC-001_TASK_4"],
      "blocking_dependencies": [],
      "contract_dependencies": [],
      "enables_parallel_work": "Unblocks FE development of chat message sending/receiving UI against a mock, and BE development of the API endpoint stubs."
    },
    {
      "task_id": 2,
      "title": "Setup Frontend Project (Next.js) & Basic Chat UI Structure",
      "status": "pending",
      "description": "Initialize the Next.js project, set up the basic directory structure (`app/`, `components/ui/`, `features/ai-tutor/`, `lib/ag-ui-client.ts`). Implement a very basic, non-functional UI for displaying messages and an input field.",
      "dependencies": [],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Next.js project creation, folder structure, placeholder chat page, basic HTML/CSS for message list and input. No API integration yet. Install shadcn/ui.",
      "service_focus": "Frontend UI structure",
      "parallel_work": ["EPIC-001_TASK_1", "EPIC-001_TASK_3", "EPIC-001_TASK_4"],
      "blocking_dependencies": [],
      "contract_dependencies": [],
      "enables_parallel_work": "Allows FE developers to start building out static UI components."
    },
    {
      "task_id": 3,
      "title": "Setup Backend Project (FastAPI) & Basic API Structure",
      "status": "pending",
      "description": "Initialize the FastAPI project, set up the basic directory structure (`app/api/v1/endpoints/`, `app/core/`, `app/db/`, `app/temporal/`). Create stub files for chat API endpoints based on Task 1.1 contract.",
      "dependencies": [],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "FastAPI project creation, folder structure, placeholder endpoint functions for chat that return dummy data or \"Not Implemented\" based on the contract from Task 1.1.",
      "service_focus": "Backend API structure",
      "parallel_work": ["EPIC-001_TASK_1", "EPIC-001_TASK_2", "EPIC-001_TASK_4"],
      "blocking_dependencies": [],
      "contract_dependencies": ["EPIC-001_TASK_1"],
      "enables_parallel_work": "Allows BE developers to start implementing basic application logic and configuration."
    },
    {
      "task_id": 4,
      "title": "Define and Setup Initial Supabase Database Schema & User Auth",
      "status": "pending",
      "description": "Set up a Supabase project. Define and implement the initial database schemas for users (leveraging Supabase Auth) and basic chat messages (e.g., `chat_messages` table with user_id, content, timestamp). Implement basic user signup/login functionality using Supabase Auth.",
      "dependencies": [],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Supabase project creation, SQL schema definition for users and messages, configuring Supabase Auth. Basic backend logic to interact with Supabase for user auth.",
      "service_focus": "Database schema, Authentication service (backend)",
      "parallel_work": ["EPIC-001_TASK_1", "EPIC-001_TASK_2", "EPIC-001_TASK_3"],
      "blocking_dependencies": [],
      "contract_dependencies": [],
      "enables_parallel_work": "Unblocks backend development requiring user context or message persistence. Unblocks frontend work on login/signup pages."
    },
    {
      "task_id": 5,
      "title": "Implement Backend Chat Message Handling (API Endpoint & AG-UI Stub)",
      "status": "pending",
      "description": "Implement the backend logic for the chat API endpoint defined in Task 1.1. This includes receiving a message, (optionally) persisting it via Supabase (as per Task 1.4 schema), and preparing it for broadcast. Set up AG-UI server endpoint to receive connections but not yet fully integrated with Temporal.",
      "dependencies": [1, 4],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "FastAPI endpoint implementation for sending messages, basic validation, interaction with Supabase `crud.py` for messages. Stub AG-UI server setup.",
      "service_focus": "Backend chat service, AG-UI integration",
      "parallel_work": ["EPIC-001_TASK_6"],
      "blocking_dependencies": [1, 4],
      "contract_dependencies": ["Chat API Contract from EPIC-001_TASK_1", "User & Message data models from EPIC-001_TASK_4"],
      "enables_parallel_work": "Allows frontend to start integrating with a live (though simple) backend for sending messages."
    },
    {
      "task_id": 6,
      "title": "Implement Frontend Chat Message Sending/Receiving (AG-UI Client Stub)",
      "status": "pending",
      "description": "Implement the frontend logic to send messages to the backend via AG-UI (as per Task 1.1 contract) and display messages received from the AG-UI server. Use a mock AG-UI client initially if the backend endpoint (Task 1.5) is not fully ready, then integrate.",
      "dependencies": [1, 2],
      "phase": "foundation",
      "priority": "high",
      "estimated_hours": 8,
      "scope": "Frontend JavaScript/TypeScript logic in `ag-ui-client.ts` and relevant React components to handle WebSocket/SSE connection, send JSON payloads, and receive/render messages.",
      "service_focus": "Frontend AG-UI service, Chat UI components",
      "parallel_work": ["EPIC-001_TASK_5", "EPIC-001_TASK_7"],
      "blocking_dependencies": [1, 2],
      "contract_dependencies": ["AG-UI Event Contracts from EPIC-001_TASK_1"],
      "enables_parallel_work": "Enables end-to-end testing of the basic chat functionality."
    },
    {
      "task_id": 7,
      "title": "Setup Basic Temporal.io Workflow for Chat Sessions",
      "status": "pending",
      "description": "Set up a local Temporal.io development environment. Define a simple Temporal workflow that is initiated when a user starts a chat session. This workflow will initially be minimal, perhaps just logging session start/end or persisting a session ID. Integrate Temporal SDK with FastAPI.",
      "dependencies": [3],
      "phase": "foundation",
      "priority": "medium",
      "estimated_hours": 7,
      "scope": "Temporal server setup (local), workflow definition for `ChatSessionWorkflow` (e.g., takes user_id, session_id), basic activity to log data. FastAPI integration to start this workflow.",
      "service_focus": "Temporal workflow definition (backend)",
      "parallel_work": ["EPIC-001_TASK_6", "EPIC-001_TASK_8"],
      "blocking_dependencies": [3],
      "contract_dependencies": [],
      "enables_parallel_work": "Prepares the backend for more complex state management and AI agent integration in future epics."
    },
    {
      "task_id": 8,
      "title": "Basic CI/CD Pipeline and Backend Containerization",
      "status": "pending",
      "description": "Set up an initial CI/CD pipeline (e.g., GitHub Actions) for linting, running basic backend tests (if any stubs exist). Containerize the backend FastAPI application using Docker.",
      "dependencies": [3],
      "phase": "foundation",
      "priority": "medium",
      "estimated_hours": 6,
      "scope": "GitHub Actions workflow for `on: push` to run linters (e.g., flake8, black) and pytest (with minimal tests). Create `backend/Dockerfile` and `docker-compose.yml` for local backend service.",
      "service_focus": "DevOps, Backend deployment",
      "parallel_work": ["EPIC-001_TASK_7"],
      "blocking_dependencies": [3],
      "contract_dependencies": [],
      "enables_parallel_work": "Improves code quality and prepares for easier local development and future deployments."
    }
  ]
}
