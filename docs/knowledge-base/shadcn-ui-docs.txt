TITLE: Creating a Tailwind CSS Class Name Utility Helper in TypeScript
DESCRIPTION: This TypeScript function `cn` combines `clsx` and `tailwind-merge` to conditionally apply and intelligently merge Tailwind CSS classes. It prevents style conflicts and simplifies class management, making it a common and highly useful utility in projects utilizing Tailwind CSS.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

----------------------------------------

TITLE: Anatomy of a FormField Component in React Hook Form (TSX)
DESCRIPTION: This snippet illustrates the basic structure and composition of a form field using the <Form>, <FormField>, and related Radix UI components. It shows how to wrap a form field with FormItem, FormLabel, FormControl, FormDescription, and FormMessage for proper accessibility and styling within a React Hook Form context.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<Form>
  <FormField
    control={...}
    name="..."
    render={() => (
      <FormItem>
        <FormLabel />
        <FormControl>
          { /* Your form field */}
        </FormControl>
        <FormDescription />
        <FormMessage />
      </FormItem>
    )}
  />
</Form>
```

----------------------------------------

TITLE: Complete List of Theming CSS Variables (CSS)
DESCRIPTION: This comprehensive CSS snippet from `app/globals.css` defines a wide range of CSS variables for both light (`:root`) and dark (`.dark`) themes. These variables control various UI elements, including background, foreground, card, popover, primary, secondary, muted, accent, destructive, border, input, ring, chart, and sidebar colors, providing extensive customization options for the application's theme.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_6

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.269 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.371 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.439 0 0);
}
```

----------------------------------------

TITLE: Starting the Development Server (Bash)
DESCRIPTION: This command initiates the local development server for the `shadcn-ui/ui` project. It allows developers to preview and test their block changes in real-time within a browser, facilitating an iterative development process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/blocks.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
pnpm www:dev
```

----------------------------------------

TITLE: Creating a Reusable DataTable Component (shadcn/ui, React Table, TSX)
DESCRIPTION: This component defines a generic and reusable data table using `@tanstack/react-table` for core table logic and shadcn/ui's `Table` components for rendering. It accepts `columns` and `data` as props, dynamically renders headers and rows, and includes a fallback for no results.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
"use client"

import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
}

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  })

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          {table.getHeaderGroups().map((headerGroup) => (
            <TableRow key={headerGroup.id}>
              {headerGroup.headers.map((header) => {
                return (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                )
              })}
            </TableRow>
          ))}
        </TableHeader>
        <TableBody>
          {table.getRowModel().rows?.length ? (
            table.getRowModel().rows.map((row) => (
              <TableRow
                key={row.id}
                data-state={row.getIsSelected() && "selected"}
              >
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={columns.length} className="h-24 text-center">
                No results.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  )
}
```

----------------------------------------

TITLE: Defining Global CSS Variables for Light and Dark Themes in CSS
DESCRIPTION: This CSS snippet defines a comprehensive set of custom properties (CSS variables) within the `:root` pseudo-class for the default (light) theme and overrides them within the `.dark` class for dark mode. These variables control various aspects of the UI's appearance, including background, foreground, component-specific colors (card, popover, primary, secondary, muted, accent, destructive), borders, inputs, rings, and chart colors. They are designed to be easily consumed by other CSS rules or JavaScript to maintain a consistent design system.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_11

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}
```

----------------------------------------

TITLE: Implementing Shadcn UI Sheet Component in TypeScript
DESCRIPTION: This snippet provides the full implementation of the Shadcn UI Sheet component using React and Radix UI primitives. It defines the core `Sheet` component along with `SheetTrigger`, `SheetClose`, `SheetPortal`, `SheetOverlay`, `SheetContent`, `SheetHeader`, `SheetFooter`, `SheetTitle`, and `SheetDescription`. It utilizes `class-variance-authority` for dynamic styling based on the `side` prop (top, bottom, left, right) and `cn` utility for combining class names.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#_snippet_24

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = ({
  className,
  ...props
}: SheetPrimitive.DialogPortalProps) => (
  <SheetPrimitive.Portal className={cn(className)} {...props} />
)
SheetPortal.displayName = SheetPrimitive.Portal.displayName

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm"
      }
    },
    defaultVariants: {
      side: "right"
    }
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
```

----------------------------------------

TITLE: Creating a Theme Provider in React (TypeScript)
DESCRIPTION: This snippet defines a `ThemeProvider` component and a `useTheme` hook. The provider manages the application's theme state (light, dark, system) using `localStorage` for persistence and `useEffect` to apply the theme to the document's root element. The `useTheme` hook allows child components to access and modify the current theme.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/vite.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { createContext, useContext, useEffect, useState } from "react"

type Theme = "dark" | "light" | "system"

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider")

  return context
}
```

----------------------------------------

TITLE: Creating a Reusable DataTable Component with React Table (TypeScript)
DESCRIPTION: This snippet defines a generic `DataTable` component that leverages `@tanstack/react-table` for core table functionalities and shadcn/ui's `Table` components for presentation. It accepts `columns` and `data` as props, dynamically renders headers and rows, and includes a fallback for no results.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
"use client"

import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
}

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  })

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          {table.getHeaderGroups().map((headerGroup) => (
            <TableRow key={headerGroup.id}>
              {headerGroup.headers.map((header) => {
                return (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                )
              })}
            </TableRow>
          ))}
        </TableHeader>
        <TableBody>
          {table.getRowModel().rows?.length ? (
            table.getRowModel().rows.map((row) => (
              <TableRow
                key={row.id}
                data-state={row.getIsSelected() && "selected"}
              >
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={columns.length} className="h-24 text-center">
                No results.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  )
}
```

----------------------------------------

TITLE: Importing and using the shadcn/ui Switch component in TSX
DESCRIPTION: This TypeScript React (TSX) snippet demonstrates how to import the `Switch` component from the local `components/ui/switch` path. It then shows how to render the `Switch` component within a functional React component named `MyPage`, illustrating its basic usage in a UI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Switch } from "@/components/ui/switch"

const MyPage = () => {
  return (
    <div>
      <Switch />
    </div>
  )
}

export default MyPage
```

----------------------------------------

TITLE: Basic FormField Usage with React Hook Form in TSX
DESCRIPTION: This example demonstrates how to integrate the `FormField` component with `react-hook-form`'s `useForm` hook. It shows how to pass the `control` object and `name` prop, render an `Input` component, and include `FormLabel`, `FormDescription`, and `FormMessage` for a complete form field.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
const form = useForm()

<FormField
  control={form.control}
  name="username"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Username</FormLabel>
      <FormControl>
        <Input placeholder="shadcn" {...field} />
      </FormControl>
      <FormDescription>This is your public display name.</FormDescription>
      <FormMessage />
    </FormItem>
  )}
/>
```

----------------------------------------

TITLE: Formatting Amount Cell in Column Definition (TypeScript)
DESCRIPTION: This snippet illustrates how to customize the `header` and `cell` properties within a `ColumnDef` for the 'amount' column. It uses `Intl.NumberFormat` to format numerical amounts as currency (USD) and aligns the text to the right, enhancing data readability.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export const columns: ColumnDef<Payment>[] = [
  {
    accessorKey: "amount",
    header: () => <div className="text-right">Amount</div>,
    cell: ({ row }) => {
      const amount = parseFloat(row.getValue("amount"))
      const formatted = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(amount)

      return <div className="text-right font-medium">{formatted}</div>
    },
  },
]
```

----------------------------------------

TITLE: Configuring Shadcn/ui Custom Theme (JSON)
DESCRIPTION: This JSON configuration defines a custom theme for shadcn/ui, specifying various CSS variables for both light and dark modes. It includes definitions for `background`, `foreground`, `primary`, `primary-foreground`, `ring`, and `sidebar` related colors using the `oklch` color format. This allows for comprehensive customization of the application's visual appearance.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-theme",
  "type": "registry:theme",
  "cssVars": {
    "light": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.141 0.005 285.823)",
      "primary": "oklch(0.546 0.245 262.881)",
      "primary-foreground": "oklch(0.97 0.014 254.604)",
      "ring": "oklch(0.746 0.16 232.661)",
      "sidebar-primary": "oklch(0.546 0.245 262.881)",
      "sidebar-primary-foreground": "oklch(0.97 0.014 254.604)",
      "sidebar-ring": "oklch(0.746 0.16 232.661)"
    },
    "dark": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.141 0.005 285.823)",
      "primary": "oklch(0.707 0.165 254.624)",
      "primary-foreground": "oklch(0.97 0.014 254.604)",
      "ring": "oklch(0.707 0.165 254.624)",
      "sidebar-primary": "oklch(0.707 0.165 254.624)",
      "sidebar-primary-foreground": "oklch(0.97 0.014 254.604)",
      "sidebar-ring": "oklch(0.707 0.165 254.624)"
    }
  }
}
```

----------------------------------------

TITLE: Building a Profile Form with shadcn/ui and React Hook Form (TSX)
DESCRIPTION: This snippet demonstrates how to create a client-side validated form using shadcn/ui's Form components, react-hook-form for state management, and Zod for schema validation. It defines a simple username field with a minimum length requirement and renders the form with an input and submit button.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#_snippet_6

LANGUAGE: TSX
CODE:
```
"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"

import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"

const formSchema = z.object({
  username: z.string().min(2, {
    message: "Username must be at least 2 characters.",
  }),
})

export function ProfileForm() {
  // ...

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="shadcn" {...field} />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}
```

----------------------------------------

TITLE: Defining Primary Color CSS Variables
DESCRIPTION: This CSS snippet defines a pair of CSS variables, `--primary` and `--primary-foreground`, using the `oklch` color format. These variables establish a convention where `--primary` is intended for background colors and `--primary-foreground` for text colors, demonstrating a common pattern for accessible color pairings.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_4

LANGUAGE: css
CODE:
```
--primary: oklch(0.205 0 0);
--primary-foreground: oklch(0.985 0 0);
```

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: This JSON snippet demonstrates how to configure path aliases in `tsconfig.json`, specifically setting `@/*` to resolve to the project root (`./*`). This alias simplifies module imports by allowing absolute paths from the project base, improving code readability and maintainability. It's crucial for projects using TypeScript.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  }
}
```

----------------------------------------

TITLE: Configuring TypeScript paths in Astro's tsconfig.json
DESCRIPTION: Modifies the `tsconfig.json` file to add `baseUrl` and `paths` configurations. This allows for absolute imports using the `@/*` alias, resolving to the `src` directory, which simplifies module imports.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
{
  "compilerOptions": {
    // ...
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
    // ...
  }
}
```

----------------------------------------

TITLE: Defining Custom Style from Scratch (JSON)
DESCRIPTION: This JSON configuration defines a custom `shadcn/ui` style without extending the default framework (`extends: none`). It includes dependencies (`tailwind-merge`, `clsx`), adds `utils` and other components from a remote registry, and defines a comprehensive set of custom CSS variables (`main`, `bg`, `border`, `text`, `ring`) for both light and dark themes. This style can be used to build new components and themes from scratch.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "extends": "none",
  "name": "new-style",
  "type": "registry:style",
  "dependencies": ["tailwind-merge", "clsx"],
  "registryDependencies": [
    "utils",
    "https://example.com/r/button.json",
    "https://example.com/r/input.json",
    "https://example.com/r/label.json",
    "https://example.com/r/select.json"
  ],
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif"
    },
    "light": {
      "main": "#88aaee",
      "bg": "#dfe5f2",
      "border": "#000",
      "text": "#000",
      "ring": "#000"
    },
    "dark": {
      "main": "#88aaee",
      "bg": "#272933",
      "border": "#000",
      "text": "#e6e6e6",
      "ring": "#fff"
    }
  }
}
```

----------------------------------------

TITLE: Displaying a Basic Toast on Button Click (TypeScript/TSX)
DESCRIPTION: This React component demonstrates how to use the `useToast` hook to display a toast notification when a button is clicked. It shows how to pass `title` and `description` properties to the `toast` function.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export const ToastDemo = () => {
  const { toast } = useToast()

  return (
    <Button
      onClick={() => {
        toast({
          title: "Scheduled: Catch up",
          description: "Friday, February 10, 2023 at 5:57 PM",
        })
      }}
    >
      Show Toast
    </Button>
  )
}
```

----------------------------------------

TITLE: Defining a React Hook Form with Zod Resolver (TSX)
DESCRIPTION: This snippet demonstrates how to initialize a form using the `useForm` hook from `react-hook-form`, integrating it with a Zod schema via `zodResolver`. It includes defining the form's default values and a basic `onSubmit` handler to process the validated form data, ensuring type safety.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"

const formSchema = z.object({
  username: z.string().min(2, {
    message: "Username must be at least 2 characters.",
  }),
})

export function ProfileForm() {
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: "",
    },
  })

  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // ✅ This will be type-safe and validated.
    console.log(values)
  }
}
```

----------------------------------------

TITLE: Example components.json Configuration after CLI Init
DESCRIPTION: This `components.json` example shows the structure and typical settings after running the `init` command. It defines the project's style, Tailwind configuration, base color, CSS variable usage, RSC preference, and component/utility aliases, reflecting user choices during setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/changelog.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  "style": "default",
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "rsc": false,
  "aliases": {
    "utils": "~/lib/utils",
    "components": "~/components"
  }
}
```

----------------------------------------

TITLE: Defining React Hook Form with Zod Resolver and Submit Handler in TSX
DESCRIPTION: This code block illustrates the complete setup of a form using `react-hook-form` with Zod for validation. It shows how to initialize the `useForm` hook with `zodResolver`, set default values, and define an `onSubmit` function to handle form submission, ensuring type-safe access to validated form values.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"

const formSchema = z.object({
  username: z.string().min(2, {
    message: "Username must be at least 2 characters."
  })
})

export function ProfileForm() {
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: ""
    }
  })

  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // ✅ This will be type-safe and validated.
    console.log(values)
  }
}
```

----------------------------------------

TITLE: Defining Shadcn/ui Custom Style from Scratch (JSON)
DESCRIPTION: This configuration illustrates how to create a custom style for shadcn/ui without extending existing styles, indicated by `"extends": "none"`. It specifies dependencies like `tailwind-merge` and `clsx`, includes registry items such as `utils` and remote components, and defines a comprehensive set of new CSS variables for light and dark themes. This allows for building a completely custom design system.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "extends": "none",
  "name": "new-style",
  "type": "registry:style",
  "dependencies": ["tailwind-merge", "clsx"],
  "registryDependencies": [
    "utils",
    "https://example.com/r/button.json",
    "https://example.com/r/input.json",
    "https://example.com/r/label.json",
    "https://example.com/r/select.json"
  ],
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif"
    },
    "light": {
      "main": "#88aaee",
      "bg": "#dfe5f2",
      "border": "#000",
      "text": "#000",
      "ring": "#000"
    },
    "dark": {
      "main": "#88aaee",
      "bg": "#272933",
      "border": "#000",
      "text": "#e6e6e6",
      "ring": "#fff"
    }
  }
}
```

----------------------------------------

TITLE: Enabling Sorting in TanStack React Table (TSX)
DESCRIPTION: This snippet updates the `DataTable` component to enable column sorting. It introduces `SortingState` and `setSorting` using `React.useState` to manage sorting state. The `useReactTable` hook is configured with `onSortingChange`, `getSortedRowModel`, and `state.sorting` to integrate sorting functionality.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import {
  ColumnDef,
  SortingState,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    state: {
      sorting,
    },
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Adding Pagination Controls to TanStack React Table (TSX)
DESCRIPTION: This snippet adds UI controls for pagination to the `DataTable` component. It uses Shadcn UI `Button` components to navigate between pages via `table.previousPage()` and `table.nextPage()` methods, with buttons disabled when no previous or next page is available.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table>
          { // .... }
        </Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.previousPage()}
          disabled={!table.getCanPreviousPage()}
        >
          Previous
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.nextPage()}
          disabled={!table.getCanNextPage()}
        >
          Next
        </Button>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Defining a Zod Schema for Form Validation (TSX)
DESCRIPTION: This snippet shows how to define a validation schema using Zod for a form. It creates an object schema with a `username` field, specifying that it must be a string with a minimum length of 2 and a maximum length of 50 characters. This schema is used by `react-hook-form` for client-side validation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
"use client"

import { z } from "zod"

const formSchema = z.object({
  username: z.string().min(2).max(50),
})
```

----------------------------------------

TITLE: Creating Theme Provider Component (TypeScript/React)
DESCRIPTION: This React component, `ThemeProvider`, wraps `next-themes`'s `NextThemesProvider` to provide theme context to the application. It's a client-side component designed to manage theme-related props and pass them down to its children, enabling theme switching throughout the app.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/next.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
```

----------------------------------------

TITLE: Rendering the DataTable Component in a Page (TypeScript)
DESCRIPTION: This code demonstrates how to integrate and render the `DataTable` component within a Next.js page component. It includes an asynchronous `getData` function to simulate fetching data, which is then passed along with column definitions to the `DataTable` for display.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { Payment, columns } from "./columns"
import { DataTable } from "./data-table"

async function getData(): Promise<Payment[]> {
  // Fetch data from your API here.
  return [
    {
      id: "728ed52f",
      amount: 100,
      status: "pending",
      email: "m@example.com",
    },
    // ...
  ]
}

export default async function DemoPage() {
  const data = await getData()

  return (
    <div className="container mx-auto py-10">
      <DataTable columns={columns} data={data} />
    </div>
  )
}
```

----------------------------------------

TITLE: Defining Global CSS Variables for Light and Dark Themes
DESCRIPTION: This CSS snippet defines global custom properties for an application's theme. It sets up a base light theme within the `:root` selector and overrides these variables for a dark theme within the `.dark` class, primarily using OKLCH color format. These variables control various UI elements' colors, borders, and radii.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_10

LANGUAGE: CSS
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.147 0.004 49.25);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.147 0.004 49.25);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.147 0.004 49.25);
  --primary: oklch(0.216 0.006 56.043);
  --primary-foreground: oklch(0.985 0.001 106.423);
  --secondary: oklch(0.97 0.001 106.424);
  --secondary-foreground: oklch(0.216 0.006 56.043);
  --muted: oklch(0.97 0.001 106.424);
  --muted-foreground: oklch(0.553 0.013 58.071);
  --accent: oklch(0.97 0.001 106.424);
  --accent-foreground: oklch(0.216 0.006 56.043);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.923 0.003 48.717);
  --input: oklch(0.923 0.003 48.717);
  --ring: oklch(0.709 0.01 56.259);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0.001 106.423);
  --sidebar-foreground: oklch(0.147 0.004 49.25);
  --sidebar-primary: oklch(0.216 0.006 56.043);
  --sidebar-primary-foreground: oklch(0.985 0.001 106.423);
  --sidebar-accent: oklch(0.97 0.001 106.424);
  --sidebar-accent-foreground: oklch(0.216 0.006 56.043);
  --sidebar-border: oklch(0.923 0.003 48.717);
  --sidebar-ring: oklch(0.709 0.01 56.259);
}

.dark {
  --background: oklch(0.147 0.004 49.25);
  --foreground: oklch(0.985 0.001 106.423);
  --card: oklch(0.216 0.006 56.043);
  --card-foreground: oklch(0.985 0.001 106.423);
  --popover: oklch(0.216 0.006 56.043);
  --popover-foreground: oklch(0.985 0.001 106.423);
  --primary: oklch(0.923 0.003 48.717);
  --primary-foreground: oklch(0.216 0.006 56.043);
  --secondary: oklch(0.268 0.007 34.298);
  --secondary-foreground: oklch(0.985 0.001 106.423);
  --muted: oklch(0.268 0.007 34.298);
  --muted-foreground: oklch(0.709 0.01 56.259);
  --accent: oklch(0.268 0.007 34.298);
  --accent-foreground: oklch(0.985 0.001 106.423);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.553 0.013 58.071);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.216 0.006 56.043);
  --sidebar-foreground: oklch(0.985 0.001 106.423);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.001 106.423);
  --sidebar-accent: oklch(0.268 0.007 34.298);
  --sidebar-accent-foreground: oklch(0.985 0.001 106.423);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.553 0.013 58.071);
}
```

----------------------------------------

TITLE: Nesting Link Component with Button asChild in TSX
DESCRIPTION: This TSX example demonstrates using the `asChild` prop on the `Button` component to render its child (`Link` in this case) with button styling, allowing for custom routing behavior.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
<Button asChild>
  <Link href="/login">Login</Link>
</Button>
```

----------------------------------------

TITLE: Persisting Sidebar State in Next.js with Cookies
DESCRIPTION: Demonstrates how to configure `SidebarProvider` in a Next.js `app/layout.tsx` to persist the sidebar's open/closed state across page reloads using cookies. It reads the `sidebar_state` cookie to set the initial `defaultOpen` prop.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
import { cookies } from "next/headers"

import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { AppSidebar } from "@/components/app-sidebar"

export async function Layout({ children }: { children: React.ReactNode }) {
  const cookieStore = await cookies()
  const defaultOpen = cookieStore.get("sidebar_state")?.value === "true"

  return (
    <SidebarProvider defaultOpen={defaultOpen}>
      <AppSidebar />
      <main>
        <SidebarTrigger />
        {children}
      </main>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Creating a Profile Form with Shadcn UI and Zod Validation
DESCRIPTION: This TypeScript React component showcases the construction of a client-side validated form. It leverages Shadcn UI's `<Form />` components for structure, `react-hook-form` for managing form state and submission, and `zod` for defining the validation schema for the username field. The snippet demonstrates how to render form fields, bind inputs, and display validation messages.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"

import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"

const formSchema = z.object({
  username: z.string().min(2, {
    message: "Username must be at least 2 characters.",
  }),
})

export function ProfileForm() {
  // ...

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="shadcn" {...field} />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}
```

----------------------------------------

TITLE: Initializing shadcn/ui project
DESCRIPTION: This command runs the shadcn/ui CLI initialization process. It guides the user through configuring `components.json`, which defines the project's component directory, base color, and other settings.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Creating Basic App Sidebar Component - TSX
DESCRIPTION: This snippet defines the `AppSidebar` component, which serves as the main container for the sidebar content. It utilizes various Shadcn UI sidebar components like `Sidebar`, `SidebarHeader`, `SidebarContent`, `SidebarGroup`, and `SidebarFooter` to structure the sidebar's layout. This provides a comprehensive structural foundation for a feature-rich sidebar.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarHeader,
} from "@/components/ui/sidebar"

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarHeader />
      <SidebarContent>
        <SidebarGroup />
        <SidebarGroup />
      </SidebarContent>
      <SidebarFooter />
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Configuring Shadcn UI Components (JSON)
DESCRIPTION: This JSON configuration file, `components.json`, defines the settings for integrating Shadcn UI components into a project. It specifies the desired style, whether to use React Server Components (RSC), TypeScript (TSX) usage, Tailwind CSS configuration (including base color and CSS variables), and aliases for common project paths like components, utilities, and UI elements. It also sets the icon library to Lucide.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

----------------------------------------

TITLE: Importing Separator Component (TypeScript/TSX)
DESCRIPTION: Imports the `Separator` component from the local UI components path. This line is necessary at the top of any TypeScript/TSX file where the `Separator` component will be used.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/separator.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Separator } from "@/components/ui/separator"
```

----------------------------------------

TITLE: Installing Shadcn UI Table Component
DESCRIPTION: This command adds the basic `<Table />` component from shadcn/ui to your project, providing the foundational UI elements for building data tables. It's the first step in integrating the visual components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add table
```

----------------------------------------

TITLE: Installing ScrollArea Component via CLI (Bash)
DESCRIPTION: Installs the Shadcn UI ScrollArea component using the command-line interface. This command automates the setup process, including adding necessary files and dependencies to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/scroll-area.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add scroll-area
```

----------------------------------------

TITLE: Installing Alert Component via CLI (Bash)
DESCRIPTION: This snippet demonstrates how to install the `Alert` component using the `shadcn/ui` command-line interface (CLI). It's the recommended and simplest way to add the component to your project, handling dependencies automatically.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add alert
```

----------------------------------------

TITLE: Installing Drawer Component using CLI
DESCRIPTION: This command installs the Shadcn UI Drawer component using the command-line interface, simplifying the setup process by automatically adding necessary files and configurations to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/drawer.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add drawer
```

----------------------------------------

TITLE: Initializing DataTable with Sorting, Filtering, and Selection in TSX
DESCRIPTION: This snippet defines the `DataTable` component, integrating `useReactTable` to manage state for sorting, column filters, visibility, and row selection. It sets up the core table model, pagination, and filtered row models, providing a foundation for interactive data tables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_15

LANGUAGE: TSX
CODE:
```
export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({})
  const [rowSelection, setRowSelection] = React.useState({})

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table />
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Configuring `components.json` for CSS Variable Theming
DESCRIPTION: This JSON snippet illustrates the configuration required in `components.json` to enable CSS variable-based theming. The key setting is `"cssVariables": true` within the `tailwind` object, which instructs the system to use CSS variables for color management. This setup is crucial for the `bg-background` and `text-foreground` classes to resolve correctly.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "style": "default",
  "rsc": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/registry/new-york-v4/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

----------------------------------------

TITLE: Creating a Theme Provider in React (TSX)
DESCRIPTION: This snippet defines a `ThemeProvider` component using React Context API to manage the application's theme state (light, dark, system). It persists the theme preference in `localStorage` and dynamically applies CSS classes to the document's root element, also detecting the user's system theme preference. The `useTheme` hook is provided for consuming the theme context.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { createContext, useContext, useEffect, useState } from "react"

type Theme = "dark" | "light" | "system"

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider")

  return context
}
```

----------------------------------------

TITLE: Composing a Basic Bar Chart with shadcn/ui and Recharts
DESCRIPTION: This snippet demonstrates how to build a basic bar chart by composing Recharts components like `Bar` and `BarChart` with shadcn/ui's custom `ChartContainer` and `ChartTooltipContent`. It highlights the compositional approach, allowing developers to integrate custom UI elements where needed without being locked into an abstraction.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Bar, BarChart } from "recharts"

import { ChartContainer, ChartTooltipContent } from "@/components/ui/charts"

export function MyChart() {
  return (
    <ChartContainer>
      <BarChart data={data}>
        <Bar dataKey="value" />
        <ChartTooltip content={<ChartTooltipContent />} />
      </BarChart>
    </ChartContainer>
  )
}
```

----------------------------------------

TITLE: Example Usage of FormField with React Hook Form (TSX)
DESCRIPTION: This example demonstrates how to use the <FormField> component with react-hook-form's useForm hook. It shows how to bind an input field to a form control, set its name, and render it within the FormItem structure, including a label, control, description, and message for a 'username' field.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
const form = useForm()

<FormField
  control={form.control}
  name="username"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Username</FormLabel>
      <FormControl>
        <Input placeholder="shadcn" {...field} />
      </FormControl>
      <FormDescription>This is your public display name.</FormDescription>
      <FormMessage />
    </FormItem>
  )}
/>
```

----------------------------------------

TITLE: Initializing shadcn/ui in Next.js Project (Bash)
DESCRIPTION: This command initializes `shadcn/ui` in a new or existing Next.js project. It prompts the user to choose between a standard Next.js project setup or a Monorepo configuration, setting up the necessary files and dependencies.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/next.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Creating a Class Name Utility Function in shadcn/ui (TypeScript)
DESCRIPTION: This TypeScript snippet defines the `cn` helper function, which is crucial for conditionally joining and merging Tailwind CSS classes. It leverages `clsx` for conditional class application and `tailwind-merge` to resolve conflicting Tailwind classes, ensuring a clean and efficient class string for components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/manual.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

----------------------------------------

TITLE: Defining Zinc Theme CSS Variables in app/globals.css
DESCRIPTION: This CSS snippet defines a comprehensive set of custom properties (CSS variables) for the 'Zinc' theme, covering both light and dark modes. These variables control the color palette, border radius, and other visual aspects of UI components, ensuring a consistent look and feel across the application. The `:root` selector defines default light mode variables, while the `.dark` class overrides them for dark mode.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_11

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.21 0.006 285.885);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.705 0.015 286.067);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.141 0.005 285.823);
  --sidebar-primary: oklch(0.21 0.006 285.885);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.967 0.001 286.375);
  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
  --sidebar-border: oklch(0.92 0.004 286.32);
  --sidebar-ring: oklch(0.705 0.015 286.067);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.21 0.006 285.885);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.92 0.004 286.32);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.552 0.016 285.938);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.006 285.885);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.274 0.006 286.033);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.552 0.016 285.938);
}
```

----------------------------------------

TITLE: Basic Menubar Component Structure in TSX
DESCRIPTION: This code block illustrates the fundamental JSX structure for rendering a Menubar component. It showcases how to define a menu with a trigger, content, items, separators, and shortcuts, providing a functional example of the component's usage.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Menubar>
  <MenubarMenu>
    <MenubarTrigger>File</MenubarTrigger>
    <MenubarContent>
      <MenubarItem>
        New Tab <MenubarShortcut>⌘T</MenubarShortcut>
      </MenubarItem>
      <MenubarItem>New Window</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Share</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Print</MenubarItem>
    </MenubarContent>
  </MenubarMenu>
</Menubar>
```

----------------------------------------

TITLE: Enabling Accessibility Layer for Line Charts (TSX)
DESCRIPTION: This snippet shows how to enable the `accessibilityLayer` prop on a `LineChart` component. Activating this prop enhances the chart with keyboard navigation and screen reader support, significantly improving its accessibility for users with disabilities.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_32

LANGUAGE: TSX
CODE:
```
<LineChart accessibilityLayer />
```

----------------------------------------

TITLE: Using shadcn/ui Button in React Router (TSX)
DESCRIPTION: This TypeScript React (TSX) snippet demonstrates how to import and use the `Button` component from `~/components/ui/button` within a React Router route file (`app/routes/home.tsx`). It includes a `meta` function for defining page metadata and a `Home` component rendering the button.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/react-router.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Button } from "~/components/ui/button"

import type { Route } from "./+types/home"

export function meta({}: Route.MetaArgs) {
  return [
    { title: "New React Router App" },
    { name: "description", content: "Welcome to React Router!" }
  ]
}

export default function Home() {
  return (
    <div className="flex min-h-svh flex-col items-center justify-center">
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Integrating Data Table Column Visibility Toggle (TSX)
DESCRIPTION: This snippet shows how to include the `DataTableViewOptions` component, which allows users to dynamically toggle the visibility of different columns in the table. It accepts the `table` instance as a prop, providing a user-friendly way to customize table views.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
<DataTableViewOptions table={table} />
```

----------------------------------------

TITLE: Importing and Using shadcn/ui Button Component in TanStack Start (TSX)
DESCRIPTION: Demonstrates how to import the `Button` component from `shadcn/ui` and integrate it into a React component within a TanStack Start application, showcasing its basic usage and rendering.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()

  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing a Theme Mode Toggle in React (TSX)
DESCRIPTION: This snippet provides a `ModeToggle` component that allows users to switch between 'light', 'dark', and 'system' themes. It utilizes the `useTheme` hook to access the `setTheme` function from the `ThemeProvider` context and integrates UI components like `Button` and `DropdownMenu` for a user-friendly theme selection interface.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Moon, Sun } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { useTheme } from "@/components/theme-provider"

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

----------------------------------------

TITLE: Configuring shadcn/ui components.json for apps/web (Tailwind CSS v4)
DESCRIPTION: This configuration defines the `components.json` settings for a web application (`apps/web`) using Tailwind CSS v4. Key aspects include setting `rsc` and `tsx` to true, an empty `tailwind.config` path as required for v4, and defining aliases for component, hook, lib, and utility imports, including workspace-specific paths for `utils` and `ui`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "../../packages/ui/src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "hooks": "@/hooks",
    "lib": "@/lib",
    "utils": "@workspace/ui/lib/utils",
    "ui": "@workspace/ui/components"
  }
}
```

----------------------------------------

TITLE: Rendering the DataTable Component (shadcn/ui, React Table, TSX)
DESCRIPTION: This snippet demonstrates how to integrate the `DataTable` component into a Next.js page. It includes an asynchronous `getData` function to simulate fetching payment data, which is then passed along with column definitions to the `DataTable` for rendering.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { columns, Payment } from "./columns"
import { DataTable } from "./data-table"

async function getData(): Promise<Payment[]> {
  // Fetch data from your API here.
  return [
    {
      id: "728ed52f",
      amount: 100,
      status: "pending",
      email: "m@example.com",
    },
    // ...
  ]
}

export default async function DemoPage() {
  const data = await getData()

  return (
    <div className="container mx-auto py-10">
      <DataTable columns={columns} data={data} />
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing Basic Dropdown Menu in TSX
DESCRIPTION: This code demonstrates the fundamental structure of a Shadcn UI dropdown menu. It uses `DropdownMenuTrigger` to open the menu, `DropdownMenuContent` to house the items, and various `DropdownMenuItem` components along with a `DropdownMenuLabel` and `DropdownMenuSeparator` to organize the menu options.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/dropdown-menu.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<DropdownMenu>
  <DropdownMenuTrigger>Open</DropdownMenuTrigger>
  <DropdownMenuContent>
    <DropdownMenuLabel>My Account</DropdownMenuLabel>
    <DropdownMenuSeparator />
    <DropdownMenuItem>Profile</DropdownMenuItem>
    <DropdownMenuItem>Billing</DropdownMenuItem>
    <DropdownMenuItem>Team</DropdownMenuItem>
    <DropdownMenuItem>Subscription</DropdownMenuItem>
  </DropdownMenuContent>
</DropdownMenu>
```

----------------------------------------

TITLE: Updating DataTable Component for Column Visibility (TSX)
DESCRIPTION: This snippet updates the `DataTable` component to include state management for sorting, filtering, and column visibility using `@tanstack/react-table`. It adds a dropdown menu allowing users to dynamically toggle the visibility of table columns, enhancing user control over data presentation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
"use client"\n\nimport * as React from "react"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from "@tanstack/react-table"\n\nimport { Button } from "@/components/ui/button"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from "@/components/ui/dropdown-menu"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n    },\n  })\n\n  return (\n    <div>\n      <div className="flex items-center py-4">\n        <Input\n          placeholder="Filter emails..."\n          value={table.getColumn("email")?.getFilterValue() as string}\n          onChange={(event) =>\n            table.getColumn("email")?.setFilterValue(event.target.value)\n          }\n          className="max-w-sm"\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant="outline" className="ml-auto">\n              Columns\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align="end">\n            {table\n              .getAllColumns()\n              .filter(\n                (column) => column.getCanHide()\n              )\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className="capitalize"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className="rounded-md border">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}
```

----------------------------------------

TITLE: Basic Command Component Usage in TSX
DESCRIPTION: This code illustrates the basic structure of the Command component, including `CommandInput` for search, `CommandList` to contain results, `CommandEmpty` for no results, and `CommandGroup` for categorizing `CommandItem`s. A `CommandSeparator` can be used to visually divide groups.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/command.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Command>
  <CommandInput placeholder="Type a command or search..." />
  <CommandList>
    <CommandEmpty>No results found.</CommandEmpty>
    <CommandGroup heading="Suggestions">
      <CommandItem>Calendar</CommandItem>
      <CommandItem>Search Emoji</CommandItem>
      <CommandItem>Calculator</CommandItem>
    </CommandGroup>
    <CommandSeparator />
    <CommandGroup heading="Settings">
      <CommandItem>Profile</CommandItem>
      <CommandItem>Billing</CommandItem>
      <CommandItem>Settings</CommandItem>
    </CommandGroup>
  </CommandList>
</Command>
```

----------------------------------------

TITLE: Resolving npm ERESOLVE Error with React 19
DESCRIPTION: This snippet displays a common `npm ERESOLVE` error message that occurs when installing a package that does not explicitly list React 19 as a compatible peer dependency. It indicates a conflict where the root project uses React 19, but a dependency expects an older version.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm error code ERESOLVE
npm error ERESOLVE unable to resolve dependency tree
npm error
npm error While resolving: my-app@0.1.0
npm error Found: react@19.0.0-rc-69d4b800-20241021
npm error node_modules/react
npm error   react@"19.0.0-rc-69d4b800-20241021" from the root project
```

----------------------------------------

TITLE: Importing useToast Hook (TypeScript/TSX)
DESCRIPTION: This snippet shows how to import the `useToast` hook from the application's custom hooks directory. This hook provides the necessary function to trigger and display toast notifications.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { useToast } from "@/hooks/use-toast"
```

----------------------------------------

TITLE: Implementing Command Menu in a Dialog with Keyboard Shortcut (TSX)
DESCRIPTION: This example demonstrates how to integrate the Command component within a `CommandDialog` for a modal experience. It includes a React `useState` hook to manage the dialog's open state and a `useEffect` hook to add a global keyboard shortcut (Cmd+K or Ctrl+K) to toggle the dialog's visibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/command.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export function CommandMenu() {
  const [open, setOpen] = React.useState(false)

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "k" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault()
        setOpen((open) => !open)
      }
    }
    document.addEventListener("keydown", down)
    return () => document.removeEventListener("keydown", down)
  }, [])

  return (
    <CommandDialog open={open} onOpenChange={setOpen}>
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup heading="Suggestions">
          <CommandItem>Calendar</CommandItem>
          <CommandItem>Search Emoji</CommandItem>
          <CommandItem>Calculator</CommandItem>
        </CommandGroup>
      </CommandList>
    </CommandDialog>
  )
}
```

----------------------------------------

TITLE: Installing Shadcn UI Form Component via CLI
DESCRIPTION: This command provides the simplest way to add the `shadcn/ui` form component to your project using the command-line interface. It automates the process of setting up the necessary files and configurations for the form components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add form
```

----------------------------------------

TITLE: Integrating PaginationLink with Next.js Link Component
DESCRIPTION: This diff snippet illustrates how to modify the PaginationLink component in 'pagination.tsx' to utilize Next.js's <Link /> component instead of a standard <a> tag. This change enables client-side routing and improved navigation performance within a Next.js application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/pagination.mdx#_snippet_3

LANGUAGE: diff
CODE:
```
+ import Link from "next/link"

- type PaginationLinkProps = ... & React.ComponentProps<"a">
+ type PaginationLinkProps = ... & React.ComponentProps<typeof Link>

const PaginationLink = ({...props }: ) => (
  <PaginationItem>
-   <a>
+   <Link>
      // ...
-   </a>
+   </Link>
)
```

----------------------------------------

TITLE: Updating DataTable Component for Column Visibility
DESCRIPTION: This snippet updates the `DataTable` component to include state management for sorting, column filters, and column visibility using `@tanstack/react-table`. It adds an input for filtering by email and a dropdown menu to dynamically toggle the visibility of table columns, enhancing user control over the displayed data.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({})

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
    },
  })

  return (
    <div>
      <div className="flex items-center py-4">
        <Input
          placeholder="Filter emails..."
          value={table.getColumn("email")?.getFilterValue() as string}
          onChange={(event) =>
            table.getColumn("email")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="ml-auto">
              Columns
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table
              .getAllColumns()
              .filter(
                (column) => column.getCanHide()
              )
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    className="capitalize"
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) =>
                      column.toggleVisibility(!!value)
                    }
                  >
                    {column.id}
                  </DropdownMenuCheckboxItem>
                )
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-md border">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Defining Zod Schema for Form Validation in TSX
DESCRIPTION: This snippet demonstrates how to define a Zod schema (`formSchema`) to specify the structure and validation rules for your form data. It shows how to define a string field with minimum and maximum length constraints, ensuring type safety and data integrity.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
"use client"

import { z } from "zod"

const formSchema = z.object({
  username: z.string().min(2).max(50)
})
```

----------------------------------------

TITLE: Fetching Projects with SWR in Sidebar (TSX)
DESCRIPTION: This `NavProjects` component demonstrates data fetching using the SWR library. It displays a skeleton loading state while `isLoading` is true and then renders the fetched project data within a `SidebarMenu` once available, handling the case where no data is returned.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_41

LANGUAGE: tsx
CODE:
```
function NavProjects() {
  const { data, isLoading } = useSWR("/api/projects", fetcher)

  if (isLoading) {
    return (
      <SidebarMenu>
        {Array.from({ length: 5 }).map((_, index) => (
          <SidebarMenuItem key={index}>
            <SidebarMenuSkeleton showIcon />
          </SidebarMenuItem>
        ))}
      </SidebarMenu>
    )
  }

  if (!data) {
    return ...
  }

  return (
    <SidebarMenu>
      {data.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Using Custom Link Component with BreadcrumbLink in TSX
DESCRIPTION: This snippet shows how to integrate a custom link component, such as `next/link`, with `BreadcrumbLink` using the `asChild` prop. This allows the breadcrumb links to leverage functionalities from routing libraries, ensuring proper navigation behavior within your application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { Link } from "next/link"

...

<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink asChild>
        <Link href="/">Home</Link>
      </BreadcrumbLink>
    </BreadcrumbItem>
    {/* ... */}
  </BreadcrumbList>
</Breadcrumb>
```

----------------------------------------

TITLE: Adding Mode Toggle Component in React/TSX
DESCRIPTION: This React/TSX component provides a UI for users to manually switch between light, dark, and system themes. It utilizes React's `useState` and `useEffect` hooks to manage the current theme state and dynamically apply the 'dark' class to the document's root element. It depends on `lucide-react` for icons and `shadcn/ui` for Button and DropdownMenu components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/astro.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
import * as React from "react"\nimport { Moon, Sun } from "lucide-react"\n\nimport { Button } from "@/components/ui/button"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from "@/components/ui/dropdown-menu"\n\nexport function ModeToggle() {\n  const [theme, setThemeState] = React.useState<\n    "theme-light" | "dark" | "system"\n  >("theme-light")\n\n  React.useEffect(() => {\n    const isDarkMode = document.documentElement.classList.contains("dark")\n    setThemeState(isDarkMode ? "dark" : "theme-light")\n  }, [])\n\n  React.useEffect(() => {\n    const isDark =\n      theme === "dark" ||\n      (theme === "system" &&\n        window.matchMedia("(prefers-color-scheme: dark)").matches)\n    document.documentElement.classList[isDark ? "add" : "remove"]("dark")\n  }, [theme])\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant="outline" size="icon">\n          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />\n          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />\n          <span className="sr-only">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align="end">\n        <DropdownMenuItem onClick={() => setThemeState("theme-light")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setThemeState("dark")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setThemeState("system")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}
```

----------------------------------------

TITLE: Defining Table Columns for Payments
DESCRIPTION: This client-side TypeScript snippet defines the `columns` array using `ColumnDef` from `@tanstack/react-table`. It specifies how `Payment` data fields like `status`, `email`, and `amount` should be displayed as table headers and accessed for rendering, forming the core structure of the table's presentation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
"use client"

import { ColumnDef } from "@tanstack/react-table"

// This type is used to define the shape of our data.
// You can use a Zod schema here if you want.
export type Payment = {
  id: string
  amount: number
  status: "pending" | "processing" | "success" | "failed"
  email: string
}

export const columns: ColumnDef<Payment>[] = [
  {
    accessorKey: "status",
    header: "Status",
  },
  {
    accessorKey: "email",
    header: "Email",
  },
  {
    accessorKey: "amount",
    header: "Amount",
  },
]
```

----------------------------------------

TITLE: Applying CSS Variables for Theming in TSX
DESCRIPTION: This snippet demonstrates how to apply CSS variables (`--background`, `--foreground`) to HTML elements using Tailwind CSS classes. It shows the recommended approach for theming by referencing pre-defined CSS variables, ensuring consistent styling across the application. This requires `tailwind.cssVariables` to be `true` in `components.json`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<div className="bg-background text-foreground" />
```

----------------------------------------

TITLE: Creating a Basic Bar Chart Component with Recharts and Shadcn UI (TSX)
DESCRIPTION: This TypeScript/TSX snippet demonstrates how to construct a basic bar chart using Recharts components like `Bar` and `BarChart`, integrated with Shadcn UI's `ChartContainer` and `ChartTooltipContent`. It highlights the composition-based approach, allowing developers to leverage Recharts' full API while benefiting from Shadcn UI's styling and utility components. The `data` prop is expected to be an array of objects, each containing a `value` key.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Bar, BarChart } from "recharts"

import { ChartContainer, ChartTooltipContent } from "@/components/ui/charts"

export function MyChart() {
  return (
    <ChartContainer>
      <BarChart data={data}>
        <Bar dataKey="value" />
        <ChartTooltip content={<ChartTooltipContent />} />
      </BarChart>
    </ChartContainer>
  )
}
```

----------------------------------------

TITLE: Updating DataTable Component with Selection and State Management (TSX)
DESCRIPTION: This snippet updates the `DataTable` component to include state management for sorting, column filters, column visibility, and row selection using `React.useState` and `useReactTable`. It integrates these states into the `useReactTable` hook to enable interactive table features such as selection, filtering, and sorting.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({})
  const [rowSelection, setRowSelection] = React.useState({})

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table />
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Adding Specific shadcn Components (Bash)
DESCRIPTION: This command adds a specified shadcn component to your project, automatically installing any required dependencies. Replace `[component]` with the name of the desired component to integrate it into your codebase.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn add [component]
```

----------------------------------------

TITLE: Initializing shadcn Project with CLI (Bash)
DESCRIPTION: This command initializes a new shadcn project, installing necessary dependencies, adding the `cn` utility, and configuring CSS variables for styling. It sets up the foundational structure for component integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Configure Shadcn UI components.json
DESCRIPTION: This snippet shows the basic structure for the `components.json` file, which configures styles, Tailwind CSS paths, and aliases for a Shadcn UI project. Users should update `tailwind.css` and `aliases` to match their project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/changelog.mdx#_snippet_22

LANGUAGE: json
CODE:
```
{
  "style": "default",
  "rsc": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}
```

----------------------------------------

TITLE: Defining Custom Warning Colors in CSS
DESCRIPTION: This CSS snippet defines custom `warning` and `warning-foreground` colors using OKLCH format for both light (`:root`) and dark (`.dark`) themes. It also maps these custom variables to `--color-warning` and `--color-warning-foreground` using `@theme inline` for broader utility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_7

LANGUAGE: css
CODE:
```
:root {
  --warning: oklch(0.84 0.16 84);
  --warning-foreground: oklch(0.28 0.07 46);
}

.dark {
  --warning: oklch(0.41 0.11 46);
  --warning-foreground: oklch(0.99 0.02 95);
}

@theme inline {
  --color-warning: var(--warning);
  --color-warning-foreground: var(--warning-foreground);
}
```

----------------------------------------

TITLE: Configuring PostCSS for Tailwind CSS in Remix (JavaScript)
DESCRIPTION: Creates a `postcss.config.js` file to configure PostCSS plugins. This configuration enables Tailwind CSS and Autoprefixer to process CSS files, applying utility classes and vendor prefixes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/remix.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

----------------------------------------

TITLE: Accessing Carousel API and Tracking Slide State in React
DESCRIPTION: This snippet demonstrates how to obtain the carousel API instance using the `setApi` prop and `React.useState`. It then uses `React.useEffect` to track the current slide and total slide count, updating the state on 'select' events. This allows for dynamic display of carousel progress.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { type CarouselApi } from "@/components/ui/carousel"

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()
  const [current, setCurrent] = React.useState(0)
  const [count, setCount] = React.useState(0)

  React.useEffect(() => {
    if (!api) {
      return
    }

    setCount(api.scrollSnapList().length)
    setCurrent(api.selectedScrollSnap() + 1)

    api.on("select", () => {
      setCurrent(api.selectedScrollSnap() + 1)
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Basic Alert Dialog Component Usage in TSX
DESCRIPTION: This example shows the fundamental structure of an Alert Dialog, including the trigger, content, header with title and description, and footer with cancel and action buttons, providing a complete interactive dialog.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<AlertDialog>
  <AlertDialogTrigger>Open</AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogHeader>
      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
      <AlertDialogDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </AlertDialogDescription>
    </AlertDialogHeader>
    <AlertDialogFooter>
      <AlertDialogCancel>Cancel</AlertDialogCancel>
      <AlertDialogAction>Continue</AlertDialogAction>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>
```

----------------------------------------

TITLE: Form Component Anatomy in TSX
DESCRIPTION: This snippet illustrates the basic structural components of a form using `shadcn/ui`'s `Form` and `FormField` components. It demonstrates the nesting of `FormItem`, `FormLabel`, `FormControl`, `FormDescription`, and `FormMessage` to create a well-structured and accessible form field.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<Form>
  <FormField
    control={...}
    name="..."
    render={() => (
      <FormItem>
        <FormLabel />
        <FormControl>
          { /* Your form field */}
        </FormControl>
        <FormDescription />
        <FormMessage />
      </FormItem>
    )}
  />
</Form>
```

----------------------------------------

TITLE: Defining Custom Theme (JSON)
DESCRIPTION: This JSON configuration defines a custom `shadcn/ui` theme. It specifies a variety of CSS variables for `background`, `foreground`, `primary`, `primary-foreground`, `ring`, `sidebar-primary`, `sidebar-primary-foreground`, and `sidebar-ring` for both light and dark modes using `oklch` color format. This allows for comprehensive theme customization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-theme",
  "type": "registry:theme",
  "cssVars": {
    "light": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.141 0.005 285.823)",
      "primary": "oklch(0.546 0.245 262.881)",
      "primary-foreground": "oklch(0.97 0.014 254.604)",
      "ring": "oklch(0.746 0.16 232.661)",
      "sidebar-primary": "oklch(0.546 0.245 262.881)",
      "sidebar-primary-foreground": "oklch(0.97 0.014 254.604)",
      "sidebar-ring": "oklch(0.746 0.16 232.661)"
    },
    "dark": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.141 0.005 285.823)",
      "primary": "oklch(0.707 0.165 254.624)",
      "primary-foreground": "oklch(0.97 0.014 254.604)",
      "ring": "oklch(0.707 0.165 254.624)",
      "sidebar-primary": "oklch(0.707 0.165 254.624)",
      "sidebar-primary-foreground": "oklch(0.97 0.014 254.604)",
      "sidebar-ring": "oklch(0.707 0.165 254.624)"
    }
  }
}
```

----------------------------------------

TITLE: Configuring Zinc Theme CSS Variables in app/globals.css
DESCRIPTION: This CSS snippet defines a comprehensive set of custom properties (variables) for the Zinc theme, supporting both light and dark modes. It specifies colors for general UI elements like background, foreground, border, and input, as well as component-specific colors for cards, popovers, primary, secondary, muted, accent, destructive, ring, and chart elements. Additionally, it includes variables for sidebar theming, ensuring a consistent visual style across the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_10

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.21 0.006 285.885);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.705 0.015 286.067);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.141 0.005 285.823);
  --sidebar-primary: oklch(0.21 0.006 285.885);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.967 0.001 286.375);
  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
  --sidebar-border: oklch(0.92 0.004 286.32);
  --sidebar-ring: oklch(0.705 0.015 286.067);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.21 0.006 285.885);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.92 0.004 286.32);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.552 0.016 285.938);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.006 285.885);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.274 0.006 286.033);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.552 0.016 285.938);
}
```

----------------------------------------

TITLE: Defining Base Stone Colors in CSS
DESCRIPTION: This CSS snippet defines a comprehensive set of base color variables for the 'Stone' palette, including `background`, `foreground`, `primary`, `secondary`, `muted`, `accent`, `destructive`, `border`, `input`, `ring`, and chart-specific colors. It provides distinct values for both light (`:root`) and dark (`.dark`) themes, using OKLCH color format for consistency across the UI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_9

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.147 0.004 49.25);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.147 0.004 49.25);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.147 0.004 49.25);
  --primary: oklch(0.216 0.006 56.043);
  --primary-foreground: oklch(0.985 0.001 106.423);
  --secondary: oklch(0.97 0.001 106.424);
  --secondary-foreground: oklch(0.216 0.006 56.043);
  --muted: oklch(0.97 0.001 106.424);
  --muted-foreground: oklch(0.553 0.013 58.071);
  --accent: oklch(0.97 0.001 106.424);
  --accent-foreground: oklch(0.216 0.006 56.043);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.923 0.003 48.717);
  --input: oklch(0.923 0.003 48.717);
  --ring: oklch(0.709 0.01 56.259);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0.001 106.423);
  --sidebar-foreground: oklch(0.147 0.004 49.25);
  --sidebar-primary: oklch(0.216 0.006 56.043);
  --sidebar-primary-foreground: oklch(0.985 0.001 106.423);
  --sidebar-accent: oklch(0.97 0.001 106.424);
  --sidebar-accent-foreground: oklch(0.216 0.006 56.043);
  --sidebar-border: oklch(0.923 0.003 48.717);
  --sidebar-ring: oklch(0.709 0.01 56.259);
}

.dark {
  --background: oklch(0.147 0.004 49.25);
  --foreground: oklch(0.985 0.001 106.423);
  --card: oklch(0.216 0.006 56.043);
  --card-foreground: oklch(0.985 0.001 106.423);
  --popover: oklch(0.216 0.006 56.043);
  --popover-foreground: oklch(0.985 0.001 106.423);
  --primary: oklch(0.923 0.003 48.717);
  --primary-foreground: oklch(0.216 0.006 56.043);
  --secondary: oklch(0.268 0.007 34.298);
  --secondary-foreground: oklch(0.985 0.001 106.423);
  --muted: oklch(0.268 0.007 34.298);
  --muted-foreground: oklch(0.709 0.01 56.259);
  --accent: oklch(0.268 0.007 34.298);
  --accent-foreground: oklch(0.985 0.001 106.423);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.553 0.013 58.071);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.216 0.006 56.043);
  --sidebar-foreground: oklch(0.985 0.001 106.423);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.001 106.423);
  --sidebar-accent: oklch(0.268 0.007 34.298);
  --sidebar-accent-foreground: oklch(0.985 0.001 106.423);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.553 0.013 58.071);
}
```

----------------------------------------

TITLE: Adding Components with shadcn/ui CLI
DESCRIPTION: This command is used to add UI components to a shadcn/ui project. The CLI automatically resolves component dependencies, formats them according to the project's custom configuration, and integrates them into the specified directory structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#_snippet_9

LANGUAGE: bash
CODE:
```
npx shadcn@latest add
```

----------------------------------------

TITLE: Using React Suspense for Data Loading in Sidebar with TSX
DESCRIPTION: This component demonstrates how to integrate `React.Suspense` with the `Sidebar` to manage loading states for dynamic content. It uses `NavProjectsSkeleton` as a fallback while `NavProjects` (a server component) is fetching data, providing a smooth user experience.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_42

LANGUAGE: tsx
CODE:
```
function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Projects</SidebarGroupLabel>
          <SidebarGroupContent>
            <React.Suspense fallback={<NavProjectsSkeleton />}>
              <NavProjects />
            </React.Suspense>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Wrapping Root Layout with ThemeProvider (TypeScript/React)
DESCRIPTION: This snippet demonstrates how to integrate the custom `ThemeProvider` into the root layout of a Next.js application. It wraps the entire application content, enabling theme management, and includes `suppressHydrationWarning` on the `html` tag to prevent hydration mismatches during server-side rendering.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/next.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { ThemeProvider } from "@/components/theme-provider"

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <>
      <html lang="en" suppressHydrationWarning>
        <head />
        <body>
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
            {children}
          </ThemeProvider>
        </body>
      </html>
    </>
  )
}
```

----------------------------------------

TITLE: Defining Gray Theme CSS Variables in Global Stylesheet
DESCRIPTION: This CSS snippet defines a comprehensive set of custom properties (CSS variables) for a 'Gray' theme, covering various UI elements like background, foreground, cards, popovers, primary/secondary colors, borders, and charts. It includes distinct variable sets for both light (`:root`) and dark (`.dark`) modes, using the `oklch` color format for precise color definition. These variables are intended for global use across the application to ensure consistent styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_12

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.13 0.028 261.692);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.13 0.028 261.692);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.13 0.028 261.692);
  --primary: oklch(0.21 0.034 264.665);
  --primary-foreground: oklch(0.985 0.002 247.839);
  --secondary: oklch(0.967 0.003 264.542);
  --secondary-foreground: oklch(0.21 0.034 264.665);
  --muted: oklch(0.967 0.003 264.542);
  --muted-foreground: oklch(0.551 0.027 264.364);
  --accent: oklch(0.967 0.003 264.542);
  --accent-foreground: oklch(0.21 0.034 264.665);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.928 0.006 264.531);
  --input: oklch(0.928 0.006 264.531);
  --ring: oklch(0.707 0.022 261.325);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0.002 247.839);
  --sidebar-foreground: oklch(0.13 0.028 261.692);
  --sidebar-primary: oklch(0.21 0.034 264.665);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.967 0.003 264.542);
  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
  --sidebar-border: oklch(0.928 0.006 264.531);
  --sidebar-ring: oklch(0.707 0.022 261.325);
}

.dark {
  --background: oklch(0.13 0.028 261.692);
  --foreground: oklch(0.985 0.002 247.839);
  --card: oklch(0.21 0.034 264.665);
  --card-foreground: oklch(0.985 0.002 247.839);
  --popover: oklch(0.21 0.034 264.665);
  --popover-foreground: oklch(0.985 0.002 247.839);
  --primary: oklch(0.928 0.006 264.531);
  --primary-foreground: oklch(0.21 0.034 264.665);
  --secondary: oklch(0.278 0.033 256.848);
  --secondary-foreground: oklch(0.985 0.002 247.839);
  --muted: oklch(0.278 0.033 256.848);
  --muted-foreground: oklch(0.707 0.022 261.325);
  --accent: oklch(0.278 0.033 256.848);
  --accent-foreground: oklch(0.985 0.002 247.839);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.034 264.665);
  --sidebar-foreground: oklch(0.985 0.002 247.839);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.278 0.033 256.848);
  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}
```

----------------------------------------

TITLE: Basic Table Component Usage in TypeScript/React
DESCRIPTION: This example demonstrates the basic structure of a shadcn/ui Table component, including a caption, header row with defined columns, and a body row with sample data, showcasing how to render tabular data. It illustrates the nesting of Table, TableHeader, TableBody, TableRow, TableHead, TableCell, and TableCaption components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/table.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Table>
  <TableCaption>A list of your recent invoices.</TableCaption>
  <TableHeader>
    <TableRow>
      <TableHead className="w-[100px]">Invoice</TableHead>
      <TableHead>Status</TableHead>
      <TableHead>Method</TableHead>
      <TableHead className="text-right">Amount</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    <TableRow>
      <TableCell className="font-medium">INV001</TableCell>
      <TableCell>Paid</TableCell>
      <TableCell>Credit Card</TableCell>
      <TableCell className="text-right">$250.00</TableCell>
    </TableRow>
  </TableBody>
</Table>
```

----------------------------------------

TITLE: Configuring Shadcn UI with components.json
DESCRIPTION: This JSON configuration file, `components.json`, is created in the project root to define how Shadcn UI components are integrated. It specifies the UI style, whether React Server Components (RSC) are used, Tailwind CSS configuration, alias paths for components and utilities, and the icon library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/manual.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

----------------------------------------

TITLE: Configuring shadcn/ui Project with components.json
DESCRIPTION: This JSON snippet defines the configuration for a shadcn/ui project, specifying styling, Tailwind CSS paths, base colors, and component/utility aliases. Users should update the values for `tailwind.css` and `aliases` to match their specific project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#_snippet_22

LANGUAGE: json
CODE:
```
{
  "style": "default",
  "rsc": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}
```

----------------------------------------

TITLE: Defining Global CSS Variables for Gray Theme (Light and Dark Modes)
DESCRIPTION: This CSS snippet defines a comprehensive set of custom properties (CSS variables) for a UI theme, specifically tailored for a 'Gray' color palette. It includes definitions for both a default (light) mode and a `.dark` class for dark mode, covering various UI components like backgrounds, foregrounds, cards, popovers, primary/secondary elements, borders, inputs, rings, and chart colors, all using the Oklch color format.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_12

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.13 0.028 261.692);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.13 0.028 261.692);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.13 0.028 261.692);
  --primary: oklch(0.21 0.034 264.665);
  --primary-foreground: oklch(0.985 0.002 247.839);
  --secondary: oklch(0.967 0.003 264.542);
  --secondary-foreground: oklch(0.21 0.034 264.665);
  --muted: oklch(0.967 0.003 264.542);
  --muted-foreground: oklch(0.551 0.027 264.364);
  --accent: oklch(0.967 0.003 264.542);
  --accent-foreground: oklch(0.21 0.034 264.665);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.928 0.006 264.531);
  --input: oklch(0.928 0.006 264.531);
  --ring: oklch(0.707 0.022 261.325);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0.002 247.839);
  --sidebar-foreground: oklch(0.13 0.028 261.692);
  --sidebar-primary: oklch(0.21 0.034 264.665);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.967 0.003 264.542);
  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
  --sidebar-border: oklch(0.928 0.006 264.531);
  --sidebar-ring: oklch(0.707 0.022 261.325);
}

.dark {
  --background: oklch(0.13 0.028 261.692);
  --foreground: oklch(0.985 0.002 247.839);
  --card: oklch(0.21 0.034 264.665);
  --card-foreground: oklch(0.985 0.002 247.839);
  --popover: oklch(0.21 0.034 264.665);
  --popover-foreground: oklch(0.985 0.002 247.839);
  --primary: oklch(0.928 0.006 264.531);
  --primary-foreground: oklch(0.21 0.034 264.665);
  --secondary: oklch(0.278 0.033 256.848);
  --secondary-foreground: oklch(0.985 0.002 247.839);
  --muted: oklch(0.278 0.033 256.848);
  --muted-foreground: oklch(0.707 0.022 261.325);
  --accent: oklch(0.278 0.033 256.848);
  --accent-foreground: oklch(0.985 0.002 247.839);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.034 264.665);
  --sidebar-foreground: oklch(0.985 0.002 247.839);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.278 0.033 256.848);
  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}
```

----------------------------------------

TITLE: Enabling Sorting for Email Column in TanStack Table (TSX)
DESCRIPTION: This snippet demonstrates how to make the 'email' column header sortable. It updates the ColumnDef for the 'email' accessorKey, adding a Button component that toggles the sorting state of the column when clicked, using the 'ArrowUpDown' icon for visual indication.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
"use client"\n\nimport { ColumnDef } from "@tanstack/react-table"\nimport { ArrowUpDown } from "lucide-react"\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: "email",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant="ghost"\n          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}\n        >\n          Email\n          <ArrowUpDown className="ml-2 h-4 w-4" />\n        </Button>\n      )\n    },\n  },\n]
```

----------------------------------------

TITLE: Initializing shadcn/ui in TanStack Start Project
DESCRIPTION: This command runs the `shadcn` CLI's `init` command, which sets up the necessary configuration files (like `components.json`) and integrates CSS variables into your `app/styles/app.css` for shadcn/ui components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
npx shadcn@canary init
```

----------------------------------------

TITLE: Configuring shadcn/ui components.json for packages/ui (Tailwind CSS v4)
DESCRIPTION: This `components.json` configuration is tailored for a shared UI package (`packages/ui`) within a monorepo, utilizing Tailwind CSS v4. It specifies the `style`, `iconLibrary`, and `baseColor`, and importantly, leaves the `tailwind.config` path empty for v4 compatibility. Aliases are defined to correctly resolve paths for components, utilities, hooks, and libraries within the workspace.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@workspace/ui/components",
    "utils": "@workspace/ui/lib/utils",
    "hooks": "@workspace/ui/hooks",
    "lib": "@workspace/ui/lib",
    "ui": "@workspace/ui/components"
  }
}
```

----------------------------------------

TITLE: Basic Table Component Usage (shadcn/ui) in TSX
DESCRIPTION: This snippet illustrates a basic implementation of the shadcn/ui Table component in a TypeScript React (TSX) application. It demonstrates how to structure a table with a caption, header, and a single row of data, using `Table`, `TableCaption`, `TableHeader`, `TableRow`, `TableHead`, `TableBody`, and `TableCell` components to display invoice details.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/table.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Table>
  <TableCaption>A list of your recent invoices.</TableCaption>
  <TableHeader>
    <TableRow>
      <TableHead className="w-[100px]">Invoice</TableHead>
      <TableHead>Status</TableHead>
      <TableHead>Method</TableHead>
      <TableHead className="text-right">Amount</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    <TableRow>
      <TableCell className="font-medium">INV001</TableCell>
      <TableCell>Paid</TableCell>
      <TableCell>Credit Card</TableCell>
      <TableCell className="text-right">$250.00</TableCell>
    </TableRow>
  </TableBody>
</Table>
```

----------------------------------------

TITLE: Configuring Global CSS Variables for Shadcn UI Theming
DESCRIPTION: This CSS snippet defines a comprehensive set of CSS variables for light and dark themes using the `oklch` color format. It imports Tailwind CSS and `tw-animate-css` and sets up base styles, which are crucial for consistent UI theming across the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_2

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

----------------------------------------

TITLE: shadcn add Command Options (CLI)
DESCRIPTION: This snippet details the various options available for the `shadcn add` command, providing flexibility when adding components. Options include skipping confirmation prompts, overwriting existing files, specifying a working directory, adding all available components, defining a custom path for components, muting output, and controlling src directory or CSS variable usage.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/cli.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
Usage: shadcn add [options] [components...]

add a component to your project

Arguments:
  components         the components to add or a url to the component.

Options:
  -y, --yes           skip confirmation prompt. (default: false)
  -o, --overwrite     overwrite existing files. (default: false)
  -c, --cwd <cwd>     the working directory. defaults to the current directory. (default: "/Users/shadcn/Desktop")
  -a, --all           add all available components (default: false)
  -p, --path <path>   the path to add the component to.
  -s, --silent        mute output. (default: false)
  --src-dir           use the src directory when creating a new project. (default: false)
  --no-src-dir        do not use the src directory when creating a new project.
  --css-variables     use css variables for theming. (default: true)
  --no-css-variables  do not use css variables for theming.
  -h, --help          display help for command
```

----------------------------------------

TITLE: shadcn init Command Options (CLI)
DESCRIPTION: This snippet outlines the various options available for the `shadcn init` command, allowing users to customize the initialization process. Options include specifying a template, base color, skipping prompts, forcing overwrites, defining the working directory, muting output, and controlling the use of src directories or CSS variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/cli.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
Usage: shadcn init [options] [components...]

initialize your project and install dependencies

Arguments:
  components         the components to add or a url to the component.

Options:
  -t, --template <template>      the template to use. (next, next-monorepo)
  -b, --base-color <base-color>  the base color to use. (neutral, gray, zinc, stone, slate)
  -y, --yes                      skip confirmation prompt. (default: true)
  -f, --force                    force overwrite of existing configuration. (default: false)
  -c, --cwd <cwd>                the working directory. defaults to the current directory. (default:
                                 "/Users/shadcn/Code/shadcn/ui/packages/shadcn")
  -s, --silent                   mute output. (default: false)
  --src-dir                      use the src directory when creating a new project. (default: false)
  --no-src-dir                   do not use the src directory when creating a new project.
  --css-variables                use css variables for theming. (default: true)
  --no-css-variables             do not use css variables for theming.
  -h, --help                     display help for command
```

----------------------------------------

TITLE: Initializing shadcn/ui Project
DESCRIPTION: Initializes the shadcn/ui project, setting up necessary configurations and files. This command is typically run once at the beginning of a project to integrate the UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Initializing shadcn Project (CLI)
DESCRIPTION: This command initializes a new shadcn project by installing necessary dependencies, adding the `cn` utility, and configuring CSS variables for theming. It sets up the foundational elements required for using shadcn components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/cli.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Configuring tsconfig.json for Path Aliases
DESCRIPTION: This configuration adds `baseUrl` and `paths` to `tsconfig.json`, allowing absolute imports from the `src` directory using the `@/` alias, which improves module resolution for TypeScript.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
```

----------------------------------------

TITLE: Installing Button Component via shadcn/ui CLI (Bash)
DESCRIPTION: This command utilizes the shadcn/ui command-line interface to automatically add the Button component and its necessary dependencies to your project, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/button.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Creating a Theme Provider Component (TypeScript/React)
DESCRIPTION: This TypeScript React component, `ThemeProvider`, acts as a wrapper around `next-themes`'s `NextThemesProvider`. It enables the application to manage and apply themes, ensuring client-side rendering with the `'use client'` directive for Next.js App Router compatibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/next.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
```

----------------------------------------

TITLE: Wrapping Root Layout with ThemeProvider in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to integrate the `ThemeProvider` into the main application component, typically `App.tsx`. It shows how to wrap the application's children with the provider, allowing for global theme management and setting a default theme and storage key for persistence.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/vite.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { ThemeProvider } from "@/components/theme-provider"

function App() {
  return (
    <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
      {children}
    </ThemeProvider>
  )
}

export default App
```

----------------------------------------

TITLE: Adding Row Selection to Column Definitions (TSX)
DESCRIPTION: This snippet modifies the column definitions to introduce a checkbox for row selection. It enables selecting individual rows and provides a header checkbox to select/deselect all rows on the current page, integrating seamlessly with `@tanstack/react-table`'s selection capabilities.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
"use client"\n\nimport { ColumnDef } from "@tanstack/react-table"\n\nimport { Badge } from "@/components/ui/badge"\nimport { Checkbox } from "@/components/ui/checkbox"\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: "select",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && "indeterminate")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label="Select all"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label="Select row"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n]
```

----------------------------------------

TITLE: Defining Global CSS Variables for Shadcn UI Theme in CSS
DESCRIPTION: This CSS snippet defines a comprehensive set of custom properties (CSS variables) for a UI theme. It includes base colors for background, foreground, cards, popovers, primary, secondary, muted, accent, destructive elements, borders, inputs, and rings. It also defines specific variables for charts and sidebar components, providing a consistent visual style across the application for both light and dark modes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_13

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.129 0.042 264.695);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.129 0.042 264.695);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.129 0.042 264.695);
  --primary: oklch(0.208 0.042 265.755);
  --primary-foreground: oklch(0.984 0.003 247.858);
  --secondary: oklch(0.968 0.007 247.896);
  --secondary-foreground: oklch(0.208 0.042 265.755);
  --muted: oklch(0.968 0.007 247.896);
  --muted-foreground: oklch(0.554 0.046 257.417);
  --accent: oklch(0.968 0.007 247.896);
  --accent-foreground: oklch(0.208 0.042 265.755);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.929 0.013 255.508);
  --input: oklch(0.929 0.013 255.508);
  --ring: oklch(0.704 0.04 256.788);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.984 0.003 247.858);
  --sidebar-foreground: oklch(0.129 0.042 264.695);
  --sidebar-primary: oklch(0.208 0.042 265.755);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.968 0.007 247.896);
  --sidebar-accent-foreground: oklch(0.208 0.042 265.755);
  --sidebar-border: oklch(0.929 0.013 255.508);
  --sidebar-ring: oklch(0.704 0.04 256.788);
}

.dark {
  --background: oklch(0.129 0.042 264.695);
  --foreground: oklch(0.984 0.003 247.858);
  --card: oklch(0.208 0.042 265.755);
  --card-foreground: oklch(0.984 0.003 247.858);
  --popover: oklch(0.208 0.042 265.755);
  --popover-foreground: oklch(0.984 0.003 247.858);
  --primary: oklch(0.929 0.013 255.508);
  --primary-foreground: oklch(0.208 0.042 265.755);
  --secondary: oklch(0.279 0.041 260.031);
  --secondary-foreground: oklch(0.984 0.003 247.858);
  --muted: oklch(0.279 0.041 260.031);
  --muted-foreground: oklch(0.704 0.04 256.788);
  --accent: oklch(0.279 0.041 260.031);
  --accent-foreground: oklch(0.984 0.003 247.858);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.208 0.042 265.755);
  --sidebar-foreground: oklch(0.984 0.003 247.858);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.279 0.041 260.031);
  --sidebar-accent-foreground: oklch(0.984 0.003 247.858);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}
```

----------------------------------------

TITLE: Fetching Project Data for Sidebar Menu with SWR in TSX
DESCRIPTION: This component uses the SWR library to fetch project data. It displays a loading skeleton while data is being fetched and renders the project list once the data is available. It also includes a placeholder for handling no data.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_43

LANGUAGE: tsx
CODE:
```
function NavProjects() {
  const { data, isLoading } = useSWR("/api/projects", fetcher)

  if (isLoading) {
    return (
      <SidebarMenu>
        {Array.from({ length: 5 }).map((_, index) => (
          <SidebarMenuItem key={index}>
            <SidebarMenuSkeleton showIcon />
          </SidebarMenuItem>
        ))}
      </SidebarMenu>
    )
  }

  if (!data) {
    return ...
  }

  return (
    <SidebarMenu>
      {data.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Using React Suspense for Data Loading in Sidebar (TSX)
DESCRIPTION: This `AppSidebar` component demonstrates how to integrate React Suspense for handling asynchronous data loading within a sidebar. It uses `React.Suspense` to display `NavProjectsSkeleton` as a fallback while `NavProjects` (a server component) is fetching data.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_40

LANGUAGE: tsx
CODE:
```
function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Projects</SidebarGroupLabel>
          <SidebarGroupContent>
            <React.Suspense fallback={<NavProjectsSkeleton />}>
              <NavProjects />
            </React.Suspense>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Installing Core Dependencies (npm)
DESCRIPTION: This command installs the essential npm packages required for shadcn/ui components. It includes `class-variance-authority` for styling, `clsx` and `tailwind-merge` for conditional class application, `lucide-react` for icons, and `tw-animate-css` for animations, providing the foundational libraries for the UI components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/manual.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install class-variance-authority clsx tailwind-merge lucide-react tw-animate-css
```

----------------------------------------

TITLE: Implementing Command Menu as a Dialog in React
DESCRIPTION: This React component demonstrates how to integrate the `Command` menu within a `CommandDialog`, allowing it to be toggled by a keyboard shortcut (Cmd+K or Ctrl+K). It manages the dialog's open state and includes the standard command menu elements like input, list, and items.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export function CommandMenu() {
  const [open, setOpen] = React.useState(false)

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "k" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault()
        setOpen((open) => !open)
      }
    }
    document.addEventListener("keydown", down)
    return () => document.removeEventListener("keydown", down)
  }, [])

  return (
    <CommandDialog open={open} onOpenChange={setOpen}>
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup heading="Suggestions">
          <CommandItem>Calendar</CommandItem>
          <CommandItem>Search Emoji</CommandItem>
          <CommandItem>Calculator</CommandItem>
        </CommandGroup>
      </CommandList>
    </CommandDialog>
  )
}
```

----------------------------------------

TITLE: Defining Table Columns for Payments (TypeScript)
DESCRIPTION: This code defines the `columns` array using `ColumnDef` from `@tanstack/react-table`, specifying how `Payment` data fields like `status`, `email`, and `amount` should be displayed as table headers. It's a client component, indicated by `'use client'`, and forms the core structure of the table's visual representation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
"use client"

import { ColumnDef } from "@tanstack/react-table"

// This type is used to define the shape of our data.
// You can use a Zod schema here if you want.
export type Payment = {
  id: string
  amount: number
  status: "pending" | "processing" | "success" | "failed"
  email: string
}

export const columns: ColumnDef<Payment>[] = [
  {
    accessorKey: "status",
    header: "Status",
  },
  {
    accessorKey: "email",
    header: "Email",
  },
  {
    accessorKey: "amount",
    header: "Amount",
  }
]
```

----------------------------------------

TITLE: Adding shadcn/ui Components to a Monorepo Workspace (Bash)
DESCRIPTION: This command adds a specified shadcn/ui component to the current project. When executed within an application workspace (e.g., `apps/web`), the CLI intelligently installs the component files into the shared `packages/ui` directory and automatically updates the necessary import paths within the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/monorepo.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@canary add [COMPONENT]
```

----------------------------------------

TITLE: Initializing a New Project with shadcn/ui CLI (Bash)
DESCRIPTION: This command demonstrates how to initialize a new shadcn/ui project using the updated CLI. It allows for the immediate installation of specified components, such as 'sidebar-01' and 'login-01', directly during the project setup phase. This is part of the new CLI's enhanced capabilities for streamlined project creation and component integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn init sidebar-01 login-01
```

----------------------------------------

TITLE: Enabling Accessibility Layer for Line Chart (TSX)
DESCRIPTION: This snippet demonstrates how to enable the accessibility layer for a `LineChart` component by setting the `accessibilityLayer` prop. This prop enhances the chart with keyboard navigation and screen reader support, improving usability for all users.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_29

LANGUAGE: tsx
CODE:
```
<LineChart accessibilityLayer />
```

----------------------------------------

TITLE: Initialize shadcn/ui Project with CLI
DESCRIPTION: Demonstrates how to initialize a new shadcn/ui project using the updated CLI, specifying initial components to include directly from the command line.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/changelog.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn init sidebar-01 login-01
```

----------------------------------------

TITLE: Rendering Card Component Structure - TypeScript JSX
DESCRIPTION: This snippet illustrates the basic JSX structure for rendering the `Card` component, including its various sub-components. It demonstrates how to nest `CardHeader`, `CardContent`, and `CardFooter` within the main `Card` component, and how to use `CardTitle`, `CardDescription`, and `CardAction` within the header.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/card.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card Description</CardDescription>
    <CardAction>Card Action</CardAction>
  </CardHeader>
  <CardContent>
    <p>Card Content</p>
  </CardContent>
  <CardFooter>
    <p>Card Footer</p>
  </CardFooter>
</Card>
```

----------------------------------------

TITLE: Importing Dialog Components in TypeScript/React
DESCRIPTION: This snippet demonstrates how to import the various sub-components required to construct a shadcn/ui Dialog. These imports enable the use of Dialog, DialogContent, DialogHeader, and other related elements within a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
```

----------------------------------------

TITLE: Rendering Basic Sidebar Component in TSX
DESCRIPTION: Illustrates the fundamental usage of the `Sidebar` component by importing and rendering it within a functional React component. This sets up a basic collapsible sidebar.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
import { Sidebar } from "@/components/ui/sidebar"

export function AppSidebar() {
  return <Sidebar />
}
```

----------------------------------------

TITLE: Implementing Basic Tabs Component in React
DESCRIPTION: This JSX snippet demonstrates a basic implementation of the Shadcn UI Tabs component. It sets a default active tab, defines a list of triggers, and associates content panels with each tab, allowing users to switch between different sections.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/tabs.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Tabs defaultValue="account" className="w-[400px]">
  <TabsList>
    <TabsTrigger value="account">Account</TabsTrigger>
    <TabsTrigger value="password">Password</TabsTrigger>
  </TabsList>
  <TabsContent value="account">Make changes to your account here.</TabsContent>
  <TabsContent value="password">Change your password here.</TabsContent>
</Tabs>
```

----------------------------------------

TITLE: Importing Dialog Components in TSX
DESCRIPTION: This snippet demonstrates how to import the various sub-components of the Dialog from the shadcn/ui library, making them available for use in a TypeScript React component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/dialog.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
```

----------------------------------------

TITLE: Importing Slider Component in TSX
DESCRIPTION: This TypeScript/TSX snippet illustrates how to import the Slider component from your project's UI components directory. It makes the component available for use within your React or Next.js application files.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/slider.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Slider } from "@/components/ui/slider"
```

----------------------------------------

TITLE: Defining Global CSS Variables for Shadcn UI Slate Theme
DESCRIPTION: This CSS snippet defines a comprehensive set of custom properties (variables) for the Shadcn UI 'Slate' theme. It includes color definitions for various UI components and states, such as background, foreground, primary, secondary, and accent colors, along with border, input, and ring colors. It also sets a global `--radius` for rounded corners and specific chart and sidebar colors. The variables are defined for both light mode (under `:root`) and dark mode (under `.dark` class) to support theme switching.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_13

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.129 0.042 264.695);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.129 0.042 264.695);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.129 0.042 264.695);
  --primary: oklch(0.208 0.042 265.755);
  --primary-foreground: oklch(0.984 0.003 247.858);
  --secondary: oklch(0.968 0.007 247.896);
  --secondary-foreground: oklch(0.208 0.042 265.755);
  --muted: oklch(0.968 0.007 247.896);
  --muted-foreground: oklch(0.554 0.046 257.417);
  --accent: oklch(0.968 0.007 247.896);
  --accent-foreground: oklch(0.208 0.042 265.755);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.929 0.013 255.508);
  --input: oklch(0.929 0.013 255.508);
  --ring: oklch(0.704 0.04 256.788);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.984 0.003 247.858);
  --sidebar-foreground: oklch(0.129 0.042 264.695);
  --sidebar-primary: oklch(0.208 0.042 265.755);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.968 0.007 247.896);
  --sidebar-accent-foreground: oklch(0.208 0.042 265.755);
  --sidebar-border: oklch(0.929 0.013 255.508);
  --sidebar-ring: oklch(0.704 0.04 256.788);
}

.dark {
  --background: oklch(0.129 0.042 264.695);
  --foreground: oklch(0.984 0.003 247.858);
  --card: oklch(0.208 0.042 265.755);
  --card-foreground: oklch(0.984 0.003 247.858);
  --popover: oklch(0.208 0.042 265.755);
  --popover-foreground: oklch(0.984 0.003 247.858);
  --primary: oklch(0.929 0.013 255.508);
  --primary-foreground: oklch(0.208 0.042 265.755);
  --secondary: oklch(0.279 0.041 260.031);
  --secondary-foreground: oklch(0.984 0.003 247.858);
  --muted: oklch(0.279 0.041 260.031);
  --muted-foreground: oklch(0.704 0.04 256.788);
  --accent: oklch(0.279 0.041 260.031);
  --accent-foreground: oklch(0.984 0.003 247.858);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.208 0.042 265.755);
  --sidebar-foreground: oklch(0.984 0.003 247.858);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.279 0.041 260.031);
  --sidebar-accent-foreground: oklch(0.984 0.003 247.858);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}
```

----------------------------------------

TITLE: Enabling Sorting in DataTable Component (TypeScript)
DESCRIPTION: This snippet modifies the `DataTable` component to enable column sorting. It introduces a `sorting` state using `React.useState`, integrates `getSortedRowModel`, `onSortingChange`, and `state.sorting` into the `useReactTable` hook, allowing columns to be sortable.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
"use client"\n\nimport * as React from "react"\nimport {\n  ColumnDef,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from "@tanstack/react-table"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting,\n    },\n  })\n\n  return (\n    <div>\n      <div className="rounded-md border">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}
```

----------------------------------------

TITLE: Configuring Sortable and Hideable Column Header (TSX)
DESCRIPTION: This snippet shows how to define a column in a `columns` array, making its header sortable and hideable by rendering the `DataTableColumnHeader` component. This component takes the column object and a title, enabling interactive column management directly from the header.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
export const columns = [
  {
    accessorKey: "email",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Email" />
    ),
  },
]
```

----------------------------------------

TITLE: Integrating Dialog with Context Menu in TypeScript/React
DESCRIPTION: This snippet demonstrates how to properly integrate a Dialog component within a Context Menu or Dropdown Menu. The Dialog component must encase the menu component, and `DialogTrigger` should be used with `asChild` on a `ContextMenuItem` to activate the dialog from within the menu.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
<Dialog>
  <ContextMenu>
    <ContextMenuTrigger>Right click</ContextMenuTrigger>
    <ContextMenuContent>
      <ContextMenuItem>Open</ContextMenuItem>
      <ContextMenuItem>Download</ContextMenuItem>
      <DialogTrigger asChild>
        <ContextMenuItem>
          <span>Delete</span>
        </ContextMenuItem>
      </DialogTrigger>
    </ContextMenuContent>
  </ContextMenu>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Are you absolutely sure?</DialogTitle>
      <DialogDescription>
        This action cannot be undone. Are you sure you want to permanently
        delete this file from our servers?
      </DialogDescription>
    </DialogHeader>
    <DialogFooter>
      <Button type="submit">Confirm</Button>
    </DialogFooter>
  </DialogContent>
</Dialog>
```

----------------------------------------

TITLE: Implementing Basic Input OTP Component
DESCRIPTION: This TypeScript/React example provides the basic structure for a 6-digit Input OTP component. It shows how to use `InputOTPGroup` to cluster slots and `InputOTPSeparator` for visual division, creating a standard OTP input field.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
<InputOTP maxLength={6}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
    <InputOTPSlot index={2} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={3} />
    <InputOTPSlot index={4} />
    <InputOTPSlot index={5} />
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Importing Sheet Components (TypeScript/TSX)
DESCRIPTION: This import statement brings in the necessary components for building a Sheet UI, including the main Sheet container, content, header, title, description, and trigger.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sheet.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet"
```

----------------------------------------

TITLE: Importing Avatar Components (TypeScript/TSX)
DESCRIPTION: This snippet illustrates the necessary import statement to bring the `Avatar`, `AvatarFallback`, and `AvatarImage` components into your TypeScript/TSX file. These components are typically located in the `@/components/ui/avatar` path.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/avatar.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
```

----------------------------------------

TITLE: Defining Primary Color CSS Variables (CSS)
DESCRIPTION: This CSS snippet defines two custom properties, `--primary` and `--primary-foreground`, using the `oklch` color function. These variables follow the convention where `--primary` is for background and `--primary-foreground` is for text, demonstrating how to set up custom color palettes for theming.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_4

LANGUAGE: css
CODE:
```
--primary: oklch(0.205 0 0);
--primary-foreground: oklch(0.985 0 0);
```

----------------------------------------

TITLE: Applying Primary Color CSS Variables to a Component (TSX)
DESCRIPTION: This TSX snippet shows how to apply the custom `--primary` and `--primary-foreground` CSS variables to a `div` element. By using Tailwind CSS classes `bg-primary` and `text-primary-foreground`, the component's background and text colors are dynamically set based on the defined CSS variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
<div className="bg-primary text-primary-foreground">Hello</div>
```

----------------------------------------

TITLE: Fetching Projects with React Query in Sidebar (TSX)
DESCRIPTION: This `NavProjects` component illustrates data fetching using the React Query library. It provides a loading state with a skeleton UI and then renders the fetched project data in a `SidebarMenu` once the data is successfully retrieved, similar to the SWR example.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_42

LANGUAGE: tsx
CODE:
```
function NavProjects() {
  const { data, isLoading } = useQuery()

  if (isLoading) {
    return (
      <SidebarMenu>
        {Array.from({ length: 5 }).map((_, index) => (
          <SidebarMenuItem key={index}>
            <SidebarMenuSkeleton showIcon />
          </SidebarMenuItem>
        ))}
      </SidebarMenu>
    )
  }

  if (!data) {
    return ...
  }

  return (
    <SidebarMenu>
      {data.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Importing Drawer Components in TSX
DESCRIPTION: This snippet demonstrates how to import various sub-components of the Drawer (e.g., Drawer, DrawerClose, DrawerContent) from the local UI components path, making them accessible for building the drawer interface in a React/Next.js application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/ui/drawer"
```

----------------------------------------

TITLE: Defining Initial CSS Variables with @layer base in CSS
DESCRIPTION: This snippet shows the initial setup of CSS variables for background and foreground colors within a `@layer base` directive, where the color values are defined directly as `0 0% 100%` and `0 0% 3.9%` respectively, and then referenced with `hsl()` wrappers under a `@theme` directive.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#_snippet_2

LANGUAGE: CSS
CODE:
```
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
  }
}

@theme {
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));
}
```

----------------------------------------

TITLE: Importing Sheet Components (TypeScript/TSX)
DESCRIPTION: This snippet illustrates the necessary import statements for using the various sub-components of the Shadcn UI Sheet, such as `Sheet`, `SheetContent`, and `SheetTrigger`, within a TypeScript/TSX React application. These imports make the components available for use in your JSX.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet"
```

----------------------------------------

TITLE: Importing Accordion Components (TypeScript/React)
DESCRIPTION: This TypeScript/React snippet demonstrates how to import the core Accordion components (Accordion, AccordionContent, AccordionItem, AccordionTrigger) from the local shadcn/ui path. These imports are essential for using the component in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger
} from "@/components/ui/accordion"
```

----------------------------------------

TITLE: Importing Drawer Components in TSX
DESCRIPTION: This snippet imports various sub-components of the Shadcn UI Drawer, such as `Drawer`, `DrawerClose`, `DrawerContent`, and others, from the local UI components path. These imports are essential for constructing a drawer in a TypeScript React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/drawer.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger
} from "@/components/ui/drawer"
```

----------------------------------------

TITLE: Updating React Peer Dependencies for React 19
DESCRIPTION: This diff snippet illustrates the necessary changes in a `package.json` file to update the `peerDependencies` to include support for React 19. It shows how to extend the accepted React and React DOM versions to ensure compatibility with newer React releases.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#_snippet_0

LANGUAGE: diff
CODE:
```
"peerDependencies": {
-  "react": "^16.8 || ^17.0 || ^18.0",
+  "react": "^16.8 || ^17.0 || ^18.0 || ^19.0",
-  "react-dom": "^16.8 || ^17.0 || ^18.0"
+  "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0"
},
```

----------------------------------------

TITLE: Installing Badge Component using CLI (Bash)
DESCRIPTION: This snippet demonstrates how to install the Badge component using the `shadcn` CLI. It's the recommended and simplest method for adding the component to your project, automating the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/badge.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add badge
```

----------------------------------------

TITLE: Installing Tabs Component via Shadcn CLI (Bash)
DESCRIPTION: This command utilizes the Shadcn UI CLI to quickly add the Tabs component and its dependencies to your project, streamlining the installation process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add tabs
```

----------------------------------------

TITLE: Integrating Next.js Link with Navigation Menu - TSX
DESCRIPTION: This snippet shows how to integrate a `next/link` component within a `NavigationMenuItem` using the `asChild` prop. The `asChild` prop allows the `NavigationMenuLink` to render its child component (`Link` from `next/link`) while still applying its styling and accessibility attributes, enabling seamless navigation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/navigation-menu.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { Link } from "next/link"

export function NavigationMenuDemo() {
  return (
    <NavigationMenuItem>
      <NavigationMenuLink asChild>
        <Link href="/docs">Documentation</Link>
      </NavigationMenuLink>
    </NavigationMenuItem>
  )
}
```

----------------------------------------

TITLE: Controlling Sidebar State in React/Next.js
DESCRIPTION: This TypeScript React snippet demonstrates how to create a controlled sidebar component using `useState` to manage its open/closed state. It passes the `open` state and `setOpen` function to `SidebarProvider` to enable external control over the sidebar's visibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_45

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  const [open, setOpen] = React.useState(false)

  return (
    <SidebarProvider open={open} onOpenChange={setOpen}>
      <Sidebar />
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Configuring shadcn/ui Aliases for Web Application Workspace (JSON)
DESCRIPTION: This `components.json` configuration file for the 'apps/web' workspace defines aliases that tell the shadcn/ui CLI how to resolve import paths for components, hooks, and utilities. It ensures that imports like `@/components` or `@workspace/ui/components` correctly map to the shared UI package, facilitating seamless component usage within the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/monorepo.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "../../packages/ui/src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "hooks": "@/hooks",
    "lib": "@/lib",
    "utils": "@workspace/ui/lib/utils",
    "ui": "@workspace/ui/components"
  }
}
```

----------------------------------------

TITLE: Applying CSS Variables for Theming
DESCRIPTION: Demonstrates the use of CSS variables for styling, applying `bg-background` and `text-foreground` classes to a div. These classes typically map to CSS variables defined for theming, allowing for dynamic and easily changeable themes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
<div className="bg-background text-foreground" />
```

----------------------------------------

TITLE: Displaying Loading State with NavProjectsSkeleton (RSC, TSX)
DESCRIPTION: This `NavProjectsSkeleton` component provides a loading state UI for a `SidebarMenu`. It renders a predefined number of `SidebarMenuItem` components, each containing a `SidebarMenuSkeleton` to indicate content is being loaded, typically used with React Suspense.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_38

LANGUAGE: tsx
CODE:
```
function NavProjectsSkeleton() {
  return (
    <SidebarMenu>
      {Array.from({ length: 5 }).map((_, index) => (
        <SidebarMenuItem key={index}>
          <SidebarMenuSkeleton showIcon />
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Initializing shadcn/ui Project with CLI (Bash)
DESCRIPTION: Executes the `shadcn` CLI initialization command to set up the project, which creates a `components.json` file in the root and configures CSS variables inside `app/styles/app.css`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
npx shadcn@canary init
```

----------------------------------------

TITLE: Initializing shadcn Project Dependencies (Bash)
DESCRIPTION: This command initializes a new shadcn project by installing necessary dependencies, adding the `cn` utility, configuring `tailwind.config.js`, and setting up CSS variables. It is the essential first step for setting up a new project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn init
```

----------------------------------------

TITLE: Adding Actions Column to Payment Table (TypeScript)
DESCRIPTION: This snippet demonstrates how to extend a TanStack React Table's column definition to include an 'actions' column. It utilizes `row.original` to access the current row's data and renders a `DropdownMenu` component from shadcn/ui, providing options like copying the payment ID or viewing details.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
"use client"\n\nimport { ColumnDef } from "@tanstack/react-table"\nimport { MoreHorizontal } from "lucide-react"\n\nimport { Button } from "@/components/ui/button"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from "@/components/ui/dropdown-menu"\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    id: "actions",\n    cell: ({ row }) => {\n      const payment = row.original\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant="ghost" className="h-8 w-8 p-0">\n              <span className="sr-only">Open menu</span>\n              <MoreHorizontal className="h-4 w-4" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align="end">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(payment.id)}\n            >\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )\n    },\n  },\n  // ...\n]
```

----------------------------------------

TITLE: Defining a Reusable Button Component
DESCRIPTION: Defines a reusable React functional component named `Button` that accepts `children` as a prop and renders them inside a native HTML button element. This snippet demonstrates how to create a custom button component that can encapsulate styling and behavior.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default function Button({ children }: { children: React.ReactNode }) {
  return <button>{children}</button>
}
```

----------------------------------------

TITLE: Rendering Dynamic SidebarMenu Items in TSX
DESCRIPTION: This example demonstrates how to construct a `SidebarMenu` within a `SidebarGroupContent` to display a list of items, such as projects. It iterates over a `projects` array, rendering each as a `SidebarMenuItem` with a `SidebarMenuButton` that acts as a link.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_24

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarContent>
    <SidebarGroup>
      <SidebarGroupLabel>Projects</SidebarGroupLabel>
      <SidebarGroupContent>
        <SidebarMenu>
          {projects.map((project) => (
            <SidebarMenuItem key={project.name}>
              <SidebarMenuButton asChild>
                <a href={project.url}>
                  <project.icon />
                  <span>{project.name}</span>
                </a>
              </SidebarMenuButton>
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  </SidebarContent>
</Sidebar>
```

----------------------------------------

TITLE: Creating Link Styled as Button with buttonVariants in TSX
DESCRIPTION: This TSX snippet shows how to apply button styling to a `Link` component by using the `buttonVariants` helper, specifically setting an 'outline' variant.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
<Link className={buttonVariants({ variant: "outline" })}>Click here</Link>
```

----------------------------------------

TITLE: Implementing a Theme Mode Toggle in React (TypeScript)
DESCRIPTION: This snippet provides a `ModeToggle` component that allows users to switch between light, dark, and system themes. It utilizes the `useTheme` hook to access the `setTheme` function and integrates with UI components like `DropdownMenu` and `Button` to create an interactive theme selection interface.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/vite.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Moon, Sun } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { useTheme } from "@/components/theme-provider"

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

----------------------------------------

TITLE: Configure JavaScript Import Aliases with jsconfig.json
DESCRIPTION: This `jsconfig.json` snippet illustrates how to set up import aliases, specifically mapping `@/*` to `./*`. This configuration simplifies module imports in JavaScript projects, making the codebase cleaner and easier to navigate.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/changelog.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}
```

----------------------------------------

TITLE: Configuring Import Aliases in jsconfig.json for JavaScript
DESCRIPTION: This `jsconfig.json` configuration sets up path aliases, specifically mapping `@/*` to `./*`. This allows for absolute imports within the project, improving code readability and maintainability, especially in larger JavaScript codebases. It's a common practice to simplify module resolution.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/javascript.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}
```

----------------------------------------

TITLE: Updating tsconfig.json for path aliases
DESCRIPTION: This configuration snippet adds `baseUrl` and `paths` to the `compilerOptions` in `tsconfig.json`. This allows for absolute imports using the `@/*` alias, mapping to the `src` directory, which is crucial for shadcn/ui components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
```

----------------------------------------

TITLE: Basic Card Component Usage (TypeScript/React)
DESCRIPTION: This snippet illustrates the basic structure and usage of the Shadcn UI Card component. It demonstrates how to compose a card using `Card`, `CardHeader`, `CardTitle`, `CardDescription`, `CardContent`, and `CardFooter` to display structured content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card Description</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card Content</p>
  </CardContent>
  <CardFooter>
    <p>Card Footer</p>
  </CardFooter>
</Card>
```

----------------------------------------

TITLE: Implementing Single Date Picker with Shadcn UI in React (TSX)
DESCRIPTION: This snippet demonstrates how to create a single date picker component using Shadcn UI's Popover and Calendar. It allows users to select a date, which is then formatted using 'date-fns' and displayed. Key dependencies include 'date-fns' for date formatting, 'lucide-react' for the calendar icon, and Shadcn UI's Button, Calendar, and Popover components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/date-picker.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import { format } from "date-fns"
import { Calendar as CalendarIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

export function DatePickerDemo() {
  const [date, setDate] = React.useState<Date>()

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant={"outline"}
          className={cn(
            "w-[280px] justify-start text-left font-normal",
            !date && "text-muted-foreground"
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {date ? format(date, "PPP") : <span>Pick a date</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <Calendar
          mode="single"
          selected={date}
          onSelect={setDate}
          initialFocus
        />
      </PopoverContent>
    </Popover>
  )
}
```

----------------------------------------

TITLE: Implementing a Basic Combobox Component in React/TSX
DESCRIPTION: This snippet demonstrates how to create a basic Combobox component using shadcn/ui's Popover and Command components. It includes state management for opening/closing the combobox and filtering a predefined list of frameworks. Dependencies include `lucide-react` for icons, `@/lib/utils` for utility functions, and shadcn/ui components like `Button`, `Command`, and `Popover`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/combobox.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
"use client"\n\nimport * as React from "react"\nimport { Check, ChevronsUpDown } from "lucide-react"\n\nimport { cn } from "@/lib/utils"\nimport { Button } from "@/components/ui/button"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from "@/components/ui/command"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from "@/components/ui/popover"\n\nconst frameworks = [\n  {\n    value: "next.js",\n    label: "Next.js",\n  },\n  {\n    value: "sveltekit",\n    label: "SvelteKit",\n  },\n  {\n    value: "nuxt.js",\n    label: "Nuxt.js",\n  },\n  {\n    value: "remix",\n    label: "Remix",\n  },\n  {\n    value: "astro",\n    label: "Astro",\n  },\n]\n\nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState("")\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant="outline"\n          role="combobox"\n          aria-expanded={open}\n          className="w-[200px] justify-between"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : "Select framework..."}\n          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className="w-[200px] p-0">\n        <Command>\n          <CommandInput placeholder="Search framework..." />\n          <CommandList>\n            <CommandEmpty>No framework found.</CommandEmpty>\n            <CommandGroup>\n              {frameworks.map((framework) => (\n                <CommandItem\n                  key={framework.value}\n                  value={framework.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? "" : currentValue)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      "mr-2 h-4 w-4",\n                      value === framework.value ? "opacity-100" : "opacity-0"\n                    )}\n                  />\n                  {framework.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}
```

----------------------------------------

TITLE: Configuring Alias for Hooks (JSON)
DESCRIPTION: This configuration establishes the import alias for custom React hooks, such as `use-media-query` or `use-toast`, facilitating organized imports from a `hooks` directory. This alias must be configured in `tsconfig.json` or `jsconfig.json`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/components-json.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  "aliases": {
    "hooks": "@/hooks"
  }
}
```

----------------------------------------

TITLE: Basic AppSidebar Component Structure (TSX)
DESCRIPTION: This code defines the `AppSidebar` component, showcasing a basic structure using `Sidebar`, `SidebarContent`, `SidebarFooter`, `SidebarGroup`, and `SidebarHeader` from the `@/components/ui/sidebar` module. It illustrates how these components are nested to form a complete sidebar layout.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarHeader,
} from "@/components/ui/sidebar"

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarHeader />
      <SidebarContent>
        <SidebarGroup />
        <SidebarGroup />
      </SidebarContent>
      <SidebarFooter />
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Rendering Basic Input Component (TypeScript/React)
DESCRIPTION: This snippet demonstrates the basic usage of the `Input` component by rendering it without any props. This creates a default HTML input field.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/input.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Input />
```

----------------------------------------

TITLE: Rendering Basic Input Component (TypeScript/React)
DESCRIPTION: This snippet shows the minimal JSX required to render the `Input` component, illustrating its basic usage within a TypeScript or React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Input />
```

----------------------------------------

TITLE: Rendering Basic Textarea Component (TSX)
DESCRIPTION: This snippet demonstrates the basic usage of the `Textarea` component by rendering it without any additional props. It provides a default, functional textarea input field.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/textarea.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Textarea />
```

----------------------------------------

TITLE: Importing and using the Switch component in TSX
DESCRIPTION: This TypeScript React (TSX) snippet demonstrates how to import the `Switch` component from the shadcn/ui library and integrate it into a React functional component. It shows a basic usage of the component within a `div` element, making it available on a web page.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/laravel.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Switch } from "@/components/ui/switch"

const MyPage = () => {
  return (
    <div>
      <Switch />
    </div>
  )
}

export default MyPage
```

----------------------------------------

TITLE: Updating SidebarProvider's setOpen Callback for Cookie Handling
DESCRIPTION: This TypeScript snippet updates the `setOpen` callback within `SidebarProvider` to handle both direct boolean values and functional updates, ensuring the `open` state is correctly propagated. Crucially, it also integrates cookie management to persist the sidebar's open state across sessions, using `document.cookie`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_47

LANGUAGE: tsx
CODE:
```
const setOpen = React.useCallback(
  (value: boolean | ((value: boolean) => boolean)) => {
    const openState = typeof value === "function" ? value(open) : value
    if (setOpenProp) {
      setOpenProp(openState)
    } else {
      _setOpen(openState)
    }

    // This sets the cookie to keep the sidebar state.
    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
  },
  [setOpenProp, open]
)
```

----------------------------------------

TITLE: Basic Date Picker Component Usage (TypeScript React)
DESCRIPTION: This TypeScript React snippet demonstrates how to implement a basic Date Picker component using shadcn/ui's Popover and Calendar components. It allows users to select a single date, displaying the formatted date or a 'Pick a date' placeholder if no date is selected. It utilizes `date-fns` for date formatting and `lucide-react` for the calendar icon.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/date-picker.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import { format } from "date-fns"
import { Calendar as CalendarIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

export function DatePickerDemo() {
  const [date, setDate] = React.useState<Date>()

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          data-empty={!date}
          className="data-[empty=true]:text-muted-foreground w-[280px] justify-start text-left font-normal"
        >
          <CalendarIcon />
          {date ? format(date, "PPP") : <span>Pick a date</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <Calendar mode="single" selected={date} onSelect={setDate} />
      </PopoverContent>
    </Popover>
  )
}
```

----------------------------------------

TITLE: Fetching Project Data for Sidebar Menu with React Server Components in TSX
DESCRIPTION: This asynchronous React Server Component fetches project data using `fetchProjects()`. It then maps over the fetched projects to render `SidebarMenuItem` components, each linking to a project URL and displaying its icon and name.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_41

LANGUAGE: tsx
CODE:
```
async function NavProjects() {
  const projects = await fetchProjects()

  return (
    <SidebarMenu>
      {projects.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Using Navigation Menu Item with Next.js Link (TSX)
DESCRIPTION: Illustrates how to integrate a NavigationMenuItem with Next.js's <Link /> component, ensuring proper styling by applying navigationMenuTriggerStyle() to the NavigationMenuLink for client-side navigation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
<NavigationMenuItem>
  <Link href="/docs" legacyBehavior passHref>
    <NavigationMenuLink className={navigationMenuTriggerStyle()}>
      Documentation
    </NavigationMenuLink>
  </Link>
</NavigationMenuItem>
```

----------------------------------------

TITLE: Styling a Next.js Link as a Button using asChild (TSX)
DESCRIPTION: This code illustrates the use of the `asChild` prop on the `Button` component to apply button styling to a `next/link` component. This allows the link to inherit button-like appearance while retaining its navigation functionality.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/button.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { Link } from "next/link"

import { Button } from "@/components/ui/button"

export function LinkAsButton() {
  return (
    <Button asChild>
      <Link href="/login">Login</Link>
    </Button>
  )
}
```

----------------------------------------

TITLE: Configuring shadcn/ui components.json via CLI prompts
DESCRIPTION: Shows the interactive prompts for configuring `components.json` when initializing `shadcn/ui`, including choices for TypeScript, styling, CSS variables, and import aliases.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#_snippet_5

LANGUAGE: txt
CODE:
```
Would you like to use TypeScript (recommended)? no / yes
Which style would you like to use? › Default
Which color would you like to use as base color? › Slate
Where is your global CSS file? › › ./src/styles/globals.css
Do you want to use CSS variables for colors? › no / yes
Where is your tailwind.config.js located? › tailwind.config.js
Configure the import alias for components: › @/components
Configure the import alias for utils: › @/lib/utils
Are you using React Server Components? › no
```

----------------------------------------

TITLE: Applying Primary Color Convention in TSX
DESCRIPTION: This TSX snippet demonstrates the application of the `--primary` and `--primary-foreground` CSS variables using Tailwind CSS classes (`bg-primary`, `text-primary-foreground`). It shows how the defined color convention is translated into practical usage within a component, ensuring consistent primary color application for backgrounds and text.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
<div className="bg-primary text-primary-foreground">Hello</div>
```

----------------------------------------

TITLE: Adding shadcn/ui Button Component (Bash)
DESCRIPTION: This command uses the shadcn/ui CLI to add the 'Button' component to the current project. It fetches the component's code and integrates it, making it available for use in the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@canary add button
```

----------------------------------------

TITLE: Adding a shadcn/ui component to a project
DESCRIPTION: This command uses `npx` to execute the latest version of the shadcn/ui CLI, adding the 'Switch' component to the project. It automatically handles downloading and placing the component's source files, typically in `resources/js/components/ui/switch.tsx`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add switch
```

----------------------------------------

TITLE: Wrapping Root Layout with ThemeProvider (TypeScript/React)
DESCRIPTION: This snippet demonstrates integrating the custom `ThemeProvider` into the main `RootLayout` of a Next.js application. The `suppressHydrationWarning` prop on the `html` tag is crucial to prevent hydration errors related to theme changes, and various `next-themes` props are configured for robust theme management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/next.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { ThemeProvider } from "@/components/theme-provider"

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <>
      <html lang="en" suppressHydrationWarning>
        <head />
        <body>
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
            {children}
          </ThemeProvider>
        </body>
      </html>
    </>
  )
}
```

----------------------------------------

TITLE: Defining Custom Style Extending shadcn/ui (JSON)
DESCRIPTION: This JSON configuration defines a custom `shadcn/ui` style that extends the default framework. It specifies dependencies like `@tabler/icons-react`, includes existing registry items (`login-01`, `calendar`, `editor`), and sets custom CSS variables for `font-sans` and a `brand` color for both light and dark modes. This style is applied during `npx shadcn init`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-style",
  "type": "registry:style",
  "dependencies": ["@tabler/icons-react"],
  "registryDependencies": [
    "login-01",
    "calendar",
    "https://example.com/r/editor.json"
  ],
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif"
    },
    "light": {
      "brand": "20 14.3% 4.1%"
    },
    "dark": {
      "brand": "20 14.3% 4.1%"
    }
  }
}
```

----------------------------------------

TITLE: Step 3: Adding SidebarMenu with Dynamic Items (TSX)
DESCRIPTION: This snippet enhances the `AppSidebar` by integrating `SidebarMenu` within a `SidebarGroup`, populating it with dynamic menu items. It demonstrates how to define a list of navigation items with icons and titles, then render them using `SidebarMenuItem` and `SidebarMenuButton` components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Calendar, Home, Inbox, Search, Settings } from "lucide-react"

import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar"

// Menu items.
const items = [
  {
    title: "Home",
    url: "#",
    icon: Home,
  },
  {
    title: "Inbox",
    url: "#",
    icon: Inbox,
  },
  {
    title: "Calendar",
    url: "#",
    icon: Calendar,
  },
  {
    title: "Search",
    url: "#",
    icon: Search,
  },
  {
    title: "Settings",
    url: "#",
    icon: Settings,
  },
]

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Application</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {items.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <a href={item.url}>
                      <item.icon />
                      <span>{item.title}</span>
                    </a>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Applying CSS Variables for Background and Text Color (TSX)
DESCRIPTION: This snippet demonstrates how to apply CSS variables for background and text colors to a component using Tailwind CSS classes. It assumes that CSS variables are enabled in the project's configuration, allowing for dynamic theming based on defined variables like `bg-background` and `text-foreground`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<div className="bg-background text-foreground" />
```

----------------------------------------

TITLE: Theming with CSS Variables (TSX)
DESCRIPTION: This TSX snippet illustrates theming components using CSS variables, specifically `bg-background` and `text-foreground`. This approach leverages custom properties defined in CSS, providing a more centralized and maintainable way to manage design tokens.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
<div className="bg-background text-foreground" />
```

----------------------------------------

TITLE: Rendering a Basic Button Component
DESCRIPTION: Renders a basic Button component with 'Click me' as its children. This snippet demonstrates the simplest usage of a pre-built or custom Button component in a React/Next.js application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Button>Click me</Button>
```

----------------------------------------

TITLE: Implementing a Framework Selection Combobox in TypeScript React
DESCRIPTION: This TypeScript React snippet demonstrates how to create a reusable Combobox component for selecting frameworks. It integrates shadcn/ui's Popover and Command components to provide an interactive dropdown with search and selection capabilities, managing its open state and selected value.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/combobox.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import { CheckIcon, ChevronsUpDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

const frameworks = [
  {
    value: "next.js",
    label: "Next.js",
  },
  {
    value: "sveltekit",
    label: "SvelteKit",
  },
  {
    value: "nuxt.js",
    label: "Nuxt.js",
  },
  {
    value: "remix",
    label: "Remix",
  },
  {
    value: "astro",
    label: "Astro",
  },
]

export function ExampleCombobox() {
  const [open, setOpen] = React.useState(false)
  const [value, setValue] = React.useState("")

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-[200px] justify-between"
        >
          {value
            ? frameworks.find((framework) => framework.value === value)?.label
            : "Select framework..."}
          <ChevronsUpDownIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[200px] p-0">
        <Command>
          <CommandInput placeholder="Search framework..." />
          <CommandList>
            <CommandEmpty>No framework found.</CommandEmpty>
            <CommandGroup>
              {frameworks.map((framework) => (
                <CommandItem
                  key={framework.value}
                  value={framework.value}
                  onSelect={(currentValue) => {
                    setValue(currentValue === value ? "" : currentValue)
                    setOpen(false)
                  }}
                >
                  <CheckIcon
                    className={cn(
                      "mr-2 h-4 w-4",
                      value === framework.value ? "opacity-100" : "opacity-0"
                    )}
                  />
                  {framework.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  )
}
```

----------------------------------------

TITLE: Basic Breadcrumb Component Usage in TSX
DESCRIPTION: This snippet illustrates the basic structure of a `Breadcrumb` component, using `BreadcrumbList`, `BreadcrumbItem`, `BreadcrumbLink`, `BreadcrumbPage`, and `BreadcrumbSeparator` to create a simple navigation path. It demonstrates how to define the hierarchy of links.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink href="/">Home</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator />
    <BreadcrumbItem>
      <BreadcrumbLink href="/components">Components</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator />
    <BreadcrumbItem>
      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
    </BreadcrumbItem>
  </BreadcrumbList>
</Breadcrumb>
```

----------------------------------------

TITLE: Formatting Amount Cell in DataTable Columns (shadcn/ui, React Table, TSX)
DESCRIPTION: This example shows how to customize the `header` and `cell` definitions for a specific column (e.g., 'amount') within the `ColumnDef`. It uses `Intl.NumberFormat` to format numerical values as currency and applies Tailwind CSS classes for right alignment and styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export const columns: ColumnDef<Payment>[] = [
  {
    accessorKey: "amount",
    header: () => <div className="text-right">Amount</div>,
    cell: ({ row }) => {
      const amount = parseFloat(row.getValue("amount"))
      const formatted = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(amount)

      return <div className="text-right font-medium">{formatted}</div>
    },
  },
]
```

----------------------------------------

TITLE: Adding Components with shadcn (CLI)
DESCRIPTION: The `add` command is used to integrate specific shadcn components and their associated dependencies into an existing project. This allows developers to easily extend their application with pre-built UI elements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/cli.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add [component]
```

----------------------------------------

TITLE: Creating a React Router Project
DESCRIPTION: This command initializes a new React Router project named `my-app` using the latest version of `create-react-router`, setting up the basic project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-react-router@latest my-app
```

----------------------------------------

TITLE: Installing Alert Dialog using CLI (Bash)
DESCRIPTION: Installs the Alert Dialog component using the shadcn CLI, which automates the setup process by adding the component files to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert-dialog.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add alert-dialog
```

----------------------------------------

TITLE: Installing Alert Dialog Component via CLI
DESCRIPTION: This command uses the shadcn/ui CLI to automatically add the Alert Dialog component and its dependencies to your project, simplifying the installation process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add alert-dialog
```

----------------------------------------

TITLE: Applying Theme Colors with Tailwind CSS
DESCRIPTION: This TypeScript/React snippet demonstrates how to use theme colors with Tailwind CSS by referencing a CSS variable directly within a Tailwind utility class. The `fill-[--color-desktop]` syntax allows dynamic styling of components like `<LabelList>` based on the defined CSS theme variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_23

LANGUAGE: tsx
CODE:
```
<LabelList className="fill-[--color-desktop]" />
```

----------------------------------------

TITLE: Installing Alert Component via CLI
DESCRIPTION: This command installs the Alert component and its dependencies into your project using the shadcn/ui CLI tool. It automates the setup process, ensuring all necessary files are added.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add alert
```

----------------------------------------

TITLE: Installing Aspect Ratio Component via CLI
DESCRIPTION: Installs the `AspectRatio` component using the `shadcn/ui` command-line interface, adding it directly to your project setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/aspect-ratio.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add aspect-ratio
```

----------------------------------------

TITLE: Installing Collapsible Component via CLI (Bash)
DESCRIPTION: Installs the Collapsible component using the `shadcn/ui` CLI, which automates adding the component and its dependencies to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/collapsible.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add collapsible
```

----------------------------------------

TITLE: Implementing a Basic Sheet Component (TypeScript/TSX)
DESCRIPTION: This snippet demonstrates the basic structure of a Sheet component, including a trigger to open it and content with a header, title, and description, similar to a dialog.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sheet.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent>
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>
```

----------------------------------------

TITLE: Theming with Tailwind Utility Classes (TSX)
DESCRIPTION: This TSX snippet demonstrates how components can be themed directly using Tailwind CSS utility classes, such as `bg-zinc-950` for dark backgrounds and `dark:bg-white` for light backgrounds in dark mode. This method offers direct control over styling via class names.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
<div className="bg-zinc-950 dark:bg-white" />
```

----------------------------------------

TITLE: Integrating SidebarProvider and Trigger in Next.js Layout (TSX)
DESCRIPTION: This snippet demonstrates how to integrate the `SidebarProvider` and `SidebarTrigger` components into a Next.js `app/layout.tsx` file. It wraps the main application content with `SidebarProvider` to enable sidebar context and places `SidebarTrigger` within the `main` element to control sidebar visibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { AppSidebar } from "@/components/app-sidebar"

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <SidebarProvider>
      <AppSidebar />
      <main>
        <SidebarTrigger />
        {children}
      </main>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Implementing Column Visibility Toggle in TSX
DESCRIPTION: This snippet shows how to include a `DataTableViewOptions` component, which allows users to easily toggle the visibility of different columns in the data table. This feature improves the user experience by enabling customization of the table's displayed information.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_19

LANGUAGE: TSX
CODE:
```
<DataTableViewOptions table={table} />
```

----------------------------------------

TITLE: Implementing Dynamic Sidebar Menu with Items - TSX
DESCRIPTION: This snippet demonstrates how to create a dynamic sidebar menu using `SidebarMenu` and `SidebarMenuItem` components. It defines an array of menu items with titles, URLs, and icons (from `lucide-react`), then maps over them to render interactive navigation links within a `SidebarGroup`. This approach allows for easily extensible and data-driven sidebar navigation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { Calendar, Home, Inbox, Search, Settings } from "lucide-react"

import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar"

// Menu items.
const items = [
  {
    title: "Home",
    url: "#",
    icon: Home,
  },
  {
    title: "Inbox",
    url: "#",
    icon: Inbox,
  },
  {
    title: "Calendar",
    url: "#",
    icon: Calendar,
  },
  {
    title: "Search",
    url: "#",
    icon: Search,
  },
  {
    title: "Settings",
    url: "#",
    icon: Settings,
  },
]

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Application</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {items.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <a href={item.url}>
                      <item.icon />
                      <span>{item.title}</span>
                    </a>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Integrating ThemeProvider into Remix Root Layout
DESCRIPTION: This snippet demonstrates how to integrate `ThemeProvider` from `remix-themes` into the root layout of a Remix application. It includes a loader function to retrieve the current theme from the session and wraps the main application component with `ThemeProvider` to manage theme state and prevent flashes of incorrect themes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/remix.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import clsx from "clsx"
import { PreventFlashOnWrongTheme, ThemeProvider, useTheme } from "remix-themes"

import { themeSessionResolver } from "./sessions.server"

// Return the theme from the session storage using the loader
export async function loader({ request }: LoaderFunctionArgs) {
  const { getTheme } = await themeSessionResolver(request)
  return {
    theme: getTheme()
  }
}
// Wrap your app with ThemeProvider.
// `specifiedTheme` is the stored theme in the session storage.
// `themeAction` is the action name that's used to change the theme in the session storage.
export default function AppWithProviders() {
  const data = useLoaderData<typeof loader>()
  return (
    <ThemeProvider specifiedTheme={data.theme} themeAction="/action/set-theme">
      <App />
    </ThemeProvider>
  )
}

export function App() {
  const data = useLoaderData<typeof loader>()
  const [theme] = useTheme()
  return (
    <html lang="en" className={clsx(theme)}>
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <PreventFlashOnWrongTheme ssrTheme={Boolean(data.theme)} />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Persisting Sidebar State in Next.js Layout TSX
DESCRIPTION: This Next.js `app/layout.tsx` snippet demonstrates how to persist the sidebar's open/closed state across page reloads using cookies. It reads the `sidebar_state` cookie to initialize the `defaultOpen` prop of the `SidebarProvider`, ensuring the sidebar's state is maintained for a consistent user experience.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { cookies } from "next/headers"

import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { AppSidebar } from "@/components/app-sidebar"

export async function Layout({ children }: { children: React.ReactNode }) {
  const cookieStore = await cookies()
  const defaultOpen = cookieStore.get("sidebar_state")?.value === "true"

  return (
    <SidebarProvider defaultOpen={defaultOpen}>
      <AppSidebar />
      <main>
        <SidebarTrigger />
        {children}
      </main>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Initializing Dark Mode Preference in Astro
DESCRIPTION: This Astro snippet initializes the dark mode preference by checking local storage or the user's system settings. It applies the 'dark' class to the document's root element and sets up a MutationObserver to persist theme changes to local storage, ensuring the theme is consistent across sessions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/astro.mdx#_snippet_0

LANGUAGE: Astro
CODE:
```
---
import '../styles/globals.css'
---

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>

<html lang="en">
	<body>
      <h1>Astro</h1>
	</body>
</html>
```

----------------------------------------

TITLE: Creating a Dark Mode Toggle Component in React/TSX
DESCRIPTION: This TSX component provides a UI for toggling between light, dark, and system themes using a dropdown menu. It leverages React's `useState` and `useEffect` hooks to manage the theme state and apply the 'dark' class to the document's root element, integrating with Shadcn UI components like Button and DropdownMenu.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/astro.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import * as React from "react"
import { Moon, Sun } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function ModeToggle() {
  const [theme, setThemeState] = React.useState<
    "theme-light" | "dark" | "system"
  >("theme-light")

  React.useEffect(() => {
    const isDarkMode = document.documentElement.classList.contains("dark")
    setThemeState(isDarkMode ? "dark" : "theme-light")
  }, [])

  React.useEffect(() => {
    const isDark =
      theme === "dark" ||
      (theme === "system" &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    document.documentElement.classList[isDark ? "add" : "remove"]("dark")
  }, [theme])

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setThemeState("theme-light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setThemeState("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setThemeState("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

----------------------------------------

TITLE: Controlling Sidebar State with React in TypeScript
DESCRIPTION: This snippet demonstrates how to create a controlled sidebar component using React's `useState` hook. It wraps the `Sidebar` component with `SidebarProvider`, passing the `open` state and `setOpen` function to manage the sidebar's visibility. This pattern ensures the sidebar's state is managed externally.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_43

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  const [open, setOpen] = React.useState(false)

  return (
    <SidebarProvider open={open} onOpenChange={setOpen}>
      <Sidebar />
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Comprehensive List of Theming CSS Variables
DESCRIPTION: This extensive CSS snippet provides a complete list of all available CSS variables for theming, defined within the `:root` selector for light mode and the `.dark` selector for dark mode. It includes variables for various UI elements like background, foreground, card, popover, primary, secondary, muted, accent, destructive, border, input, ring, chart colors, and sidebar elements, offering granular control over the application's visual theme.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_6

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.269 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.371 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.439 0 0);
}
```

----------------------------------------

TITLE: Reference for Base Neutral Colors in CSS
DESCRIPTION: This extensive CSS snippet provides a comprehensive list of base neutral color variables, along with radius and chart-specific colors, defined for both light (`:root`) and dark (`.dark`) themes. These variables establish the foundational color palette for UI components, ensuring consistent theming across the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_9

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}
```

----------------------------------------

TITLE: Integrating Data Table Pagination Component (TSX)
DESCRIPTION: This snippet demonstrates the integration of the `DataTablePagination` component into a data table. It takes the `table` instance as a prop, providing controls for page size selection and navigation between pages, enhancing user experience for large datasets.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_18

LANGUAGE: tsx
CODE:
```
<DataTablePagination table={table} />
```

----------------------------------------

TITLE: Importing Tailwind CSS in Remix root.tsx
DESCRIPTION: Imports the global `tailwind.css` file into the `app/root.tsx` file and adds it to the `links` function. This makes the Tailwind styles available globally throughout your Remix application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#_snippet_6

LANGUAGE: js
CODE:
```
import styles from "./tailwind.css?url"

export const links: LinksFunction = () => [
  { rel: "stylesheet", href: styles },
  ...(cssBundleHref ? [{ rel: "stylesheet", href: cssBundleHref }] : []),
]
```

----------------------------------------

TITLE: Step 1: Adding SidebarProvider and Trigger to Root Layout (TSX)
DESCRIPTION: This snippet, as part of the "Your First Sidebar" guide, instructs adding `SidebarProvider` to wrap the application and `SidebarTrigger` within the `main` content. This setup is crucial for enabling the sidebar's context and providing a mechanism to toggle its visibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { AppSidebar } from "@/components/app-sidebar"

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <SidebarProvider>
      <AppSidebar />
      <main>
        <SidebarTrigger />
        {children}
      </main>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Structuring Sidebar Content with SidebarGroup in TSX
DESCRIPTION: This example illustrates the basic usage of the `SidebarContent` component, which serves as a scrollable wrapper for the main content of the sidebar. It demonstrates how to include multiple `SidebarGroup` components within `SidebarContent` to organize different sections of the sidebar's navigation or information.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_22

LANGUAGE: tsx
CODE:
```
import { Sidebar, SidebarContent } from "@/components/ui/sidebar"

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup />
        <SidebarGroup />
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: After: React Component without `forwardRef` in TSX
DESCRIPTION: This snippet presents the `AccordionItem` component after migrating from `forwardRef`. It is converted to a named function, uses `React.ComponentProps` for type safety, and removes the explicit ref passing, instead adding a `data-slot` attribute for styling purposes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#_snippet_8

LANGUAGE: TSX
CODE:
```
function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}
```

----------------------------------------

TITLE: Importing shadcn/ui Hooks and Utilities (TypeScript/TSX)
DESCRIPTION: This snippet illustrates importing hooks (e.g., 'useTheme') and utility functions (e.g., 'cn') from the '@workspace/ui' package. These shared functionalities are typically found in the 'hooks' and 'lib' directories, respectively.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { useTheme } from "@workspace/ui/hooks/use-theme"
import { cn } from "@workspace/ui/lib/utils"
```

----------------------------------------

TITLE: Importing Command Components in TSX
DESCRIPTION: This snippet demonstrates how to import various sub-components of the Command module from the `@/components/ui/command` path. These imports are necessary to use the Command component and its related elements in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/command.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from "@/components/ui/command"
```

----------------------------------------

TITLE: Importing Skeleton Component (TypeScript/TSX)
DESCRIPTION: This line imports the `Skeleton` component from the specified UI components path, making it available for use in your TSX file. Ensure the import path matches your project's structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/skeleton.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Skeleton } from "@/components/ui/skeleton"
```

----------------------------------------

TITLE: Implementing Theme Mode Toggle Component
DESCRIPTION: This snippet provides a React component for a theme mode toggle, utilizing `remix-themes`' `useTheme` hook and `shadcn/ui` components. It allows users to switch between light and dark themes, updating the theme state via the `setTheme` function provided by the hook.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/remix.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { Moon, Sun } from "lucide-react"
import { Theme, useTheme } from "remix-themes"

import { Button } from "./ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "./ui/dropdown-menu"

export function ModeToggle() {
  const [, setTheme] = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme(Theme.LIGHT)}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme(Theme.DARK)}>
          Dark
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

----------------------------------------

TITLE: Migrating InputOTP Render Prop to Composition - JSX Diff
DESCRIPTION: This diff demonstrates how to migrate existing `InputOTP` usage from the `render` prop pattern to the new composition pattern. Instead of a render function, `InputOTPSlot` components are now directly nested within `InputOTPGroup` components, improving readability and maintainability.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_9

LANGUAGE: diff
CODE:
```
<InputOTP maxLength={6}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
    <InputOTPSlot index={2} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={3} />
    <InputOTPSlot index={4} />
    <InputOTPSlot index={5} />
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Integrating Sidebar Provider and Trigger in Root Layout - TSX
DESCRIPTION: This snippet demonstrates the initial integration of `SidebarProvider` and `SidebarTrigger` into the root layout of a Next.js or React application. It wraps the main content and `AppSidebar` with `SidebarProvider` to enable sidebar context and includes `SidebarTrigger` within the `main` element for toggling the sidebar. This setup is crucial for the sidebar's functionality across the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { AppSidebar } from "@/components/app-sidebar"

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <SidebarProvider>
      <AppSidebar />
      <main>
        <SidebarTrigger />
        {children}
      </main>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Creating a new React project with Vite
DESCRIPTION: This command initializes a new React project using Vite, prompting the user to select a template. It is recommended to choose the 'React + TypeScript' template for compatibility with shadcn/ui.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm create vite@latest
```

----------------------------------------

TITLE: Rendering a Single-Select Toggle Group (TSX)
DESCRIPTION: This code block demonstrates how to render a basic `ToggleGroup` configured for single selection, containing three `ToggleGroupItem` elements with distinct values and labels. This setup allows only one item to be active at a time.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/toggle-group.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<ToggleGroup type="single">
  <ToggleGroupItem value="a">A</ToggleGroupItem>
  <ToggleGroupItem value="b">B</ToggleGroupItem>
  <ToggleGroupItem value="c">C</ToggleGroupItem>
</ToggleGroup>
```

----------------------------------------

TITLE: Importing Tailwind CSS in src/index.css
DESCRIPTION: This CSS snippet replaces the existing content in `src/index.css` to import Tailwind CSS, making its utility classes available throughout the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_2

LANGUAGE: css
CODE:
```
@import "tailwindcss";
```

----------------------------------------

TITLE: Adding Toaster Component to Root Layout (TypeScript/TSX)
DESCRIPTION: This TypeScript/TSX snippet demonstrates how to import and include the `Toaster` component in your application's root layout. Placing it here ensures that all toasts can be displayed globally across your application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Toaster } from "@/components/ui/toaster"

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Implementing a Basic Menubar with File Menu (TypeScript React)
DESCRIPTION: This example demonstrates the core structure for creating a functional Menubar component, including a 'File' menu with items, separators, and a keyboard shortcut, showcasing the composition of shadcn/ui Menubar primitives.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/menubar.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Menubar>
  <MenubarMenu>
    <MenubarTrigger>File</MenubarTrigger>
    <MenubarContent>
      <MenubarItem>
        New Tab <MenubarShortcut>⌘T</MenubarShortcut>
      </MenubarItem>
      <MenubarItem>New Window</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Share</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Print</MenubarItem>
    </MenubarContent>
  </MenubarMenu>
</Menubar>
```

----------------------------------------

TITLE: shadcn init Command Options (CLI Text)
DESCRIPTION: This section outlines the various options available for the `shadcn init` command, allowing users to customize the initialization process. Options include skipping prompts, using default configurations, forcing overwrites, specifying working directories, and controlling CSS variable usage.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#_snippet_1

LANGUAGE: txt
CODE:
```
Usage: shadcn init [options] [components...]

initialize your project and install dependencies

Arguments:
  components         the components to add or a url to the component.

Options:
  -y, --yes           skip confirmation prompt. (default: true)
  -d, --defaults,     use default configuration. (default: false)
  -f, --force         force overwrite of existing configuration. (default: false)
  -c, --cwd <cwd>     the working directory. defaults to the current directory. (default: "/Users/shadcn/Desktop")
  -s, --silent        mute output. (default: false)
  --src-dir           use the src directory when creating a new project. (default: false)
  --no-src-dir        do not use the src directory when creating a new project.
  --css-variables     use css variables for theming. (default: true)
  --no-css-variables  do not use css variables for theming.
  -h, --help          display help for command
```

----------------------------------------

TITLE: Monorepo Project Directory Structure
DESCRIPTION: Illustrates a typical project directory structure for a monorepo setup, separating the main application (`apps/web`) from shared UI components and dependencies (`packages/ui`). It highlights key files like `page.tsx`, `components.json`, and `package.json` within each part, providing a clear overview of project organization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_9

LANGUAGE: txt
CODE:
```
apps
└── web         # Your app goes here.
    ├── app
    │   └── page.tsx
    ├── components
    │   └── login-form.tsx
    ├── components.json
    └── package.json
packages
└── ui          # Your components and dependencies are installed here.
    ├── src
    │   ├── components
    │   │   └── button.tsx
    │   ├── hooks
    │   ├── lib
    │   │   └── utils.ts
    │   └── styles
    │       └── globals.css
    ├── components.json
    └── package.json
package.json
turbo.json
```

----------------------------------------

TITLE: Theming Shadcn UI Sidebar with CSS Variables
DESCRIPTION: This CSS snippet defines custom CSS variables for theming the Shadcn UI sidebar, providing distinct color palettes for both light (`:root`) and dark (`.dark`) modes. These variables control background, foreground, primary, accent, border, and ring colors, allowing for independent styling from the main application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_46

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 0 0% 98%;
    --sidebar-primary-foreground: 240 5.9% 10%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}
```

----------------------------------------

TITLE: Add shadcn/ui Components with New CLI
DESCRIPTION: This command uses the shadcn/ui CLI to add components and their dependencies to a project. The `add` command automatically resolves, formats, and integrates the selected UI components based on the project's custom configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/changelog.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
npx shadcn@latest add
```

----------------------------------------

TITLE: Overriding Tailwind Theme Variables in shadcn-ui Registry Item
DESCRIPTION: This snippet demonstrates how to add or override Tailwind CSS theme variables within a shadcn-ui registry item. Custom values for properties like 'text-base', 'ease-in-out', and 'font-heading' are defined under the 'cssVars.theme' key, allowing for fine-grained control over the project's design system.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/faq.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hello-world",
  "title": "Hello World",
  "type": "registry:block",
  "description": "A complex hello world component",
  "files": [
    // ...
  ],
  "cssVars": {
    "theme": {
      "text-base": "3rem",
      "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)",
      "font-heading": "Poppins, sans-serif"
    }
  }
}
```

----------------------------------------

TITLE: Integrating Custom Link Component with BreadcrumbLink in TypeScript/React
DESCRIPTION: This example shows how to use the `asChild` prop on `BreadcrumbLink` to integrate a custom link component, such as `next/link`, allowing for seamless routing within the breadcrumb. This ensures that navigation within the breadcrumb leverages your application's routing library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/breadcrumb.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { Link } from "next/link"

...

<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink asChild>
        <Link href="/">Home</Link>
      </BreadcrumbLink>
    </BreadcrumbItem>
    {/* ... */}
  </BreadcrumbList>
</Breadcrumb>
```

----------------------------------------

TITLE: Implementing a User Dropdown in SidebarFooter in TSX
DESCRIPTION: This snippet demonstrates how to add a sticky footer to the sidebar using `SidebarFooter`, incorporating a `DropdownMenu` for user-related actions like account, billing, and sign out. It shows how to structure a `SidebarMenu` within the footer to provide contextual options at the bottom of the sidebar.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_21

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  return (
    <SidebarProvider>
      <Sidebar>
        <SidebarHeader />
        <SidebarContent />
        <SidebarFooter>
          <SidebarMenu>
            <SidebarMenuItem>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuButton>
                    <User2 /> Username
                    <ChevronUp className="ml-auto" />
                  </SidebarMenuButton>
                </DropdownMenuTrigger>
                <DropdownMenuContent
                  side="top"
                  className="w-[--radix-popper-anchor-width]"
                >
                  <DropdownMenuItem>
                    <span>Account</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Billing</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Sign out</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarFooter>
      </Sidebar>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Implementing Basic Alert Dialog (TypeScript/TSX)
DESCRIPTION: Demonstrates the basic structure of an Alert Dialog, including a trigger to open it, a header with a title and description, and a footer with cancel and action buttons for user interaction.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert-dialog.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<AlertDialog>
  <AlertDialogTrigger>Open</AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogHeader>
      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
      <AlertDialogDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </AlertDialogDescription>
    </AlertDialogHeader>
    <AlertDialogFooter>
      <AlertDialogCancel>Cancel</AlertDialogCancel>
      <AlertDialogAction>Continue</AlertDialogAction>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>
```

----------------------------------------

TITLE: Installing Tailwind CSS for Vite
DESCRIPTION: This command installs the necessary Tailwind CSS packages for integration with a Vite project, including `tailwindcss` itself and the `@tailwindcss/vite` plugin.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install tailwindcss @tailwindcss/vite
```

----------------------------------------

TITLE: Basic Tabs Component Usage in TSX
DESCRIPTION: This example illustrates the fundamental structure for implementing the Shadcn UI Tabs component, including setting a default active tab, defining tab triggers, and rendering associated content panels.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Tabs defaultValue="account" className="w-[400px]">
  <TabsList>
    <TabsTrigger value="account">Account</TabsTrigger>
    <TabsTrigger value="password">Password</TabsTrigger>
  </TabsList>
  <TabsContent value="account">Make changes to your account here.</TabsContent>
  <TabsContent value="password">Change your password here.</TabsContent>
</Tabs>
```

----------------------------------------

TITLE: Adding Pagination Controls to DataTable in TSX
DESCRIPTION: This snippet demonstrates the integration of a `DataTablePagination` component into a table. This component provides controls for navigating through pages, adjusting page size, and displaying the selection count, enhancing the usability of large datasets.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_18

LANGUAGE: TSX
CODE:
```
<DataTablePagination table={table} />
```

----------------------------------------

TITLE: Importing shadcn/ui Components (TypeScript/TSX)
DESCRIPTION: This import statement demonstrates how to use a shadcn/ui component (e.g., `Button`) within a TypeScript/TSX file. Components are imported from the `@workspace/ui/components` path, making them available for use in the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/README.md#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from "@workspace/ui/components/button"
```

----------------------------------------

TITLE: Using Label Component in TSX Markup
DESCRIPTION: This TSX snippet demonstrates how to render the `Label` component, associating it with an input element using the `htmlFor` prop and providing a descriptive text. The `htmlFor` attribute links the label to its corresponding form control.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Label htmlFor="email">Your email address</Label>
```

----------------------------------------

TITLE: Creating Submenus with SidebarMenuSub (TSX)
DESCRIPTION: This snippet shows how to create nested submenus using the `SidebarMenuSub` component. It contains `SidebarMenuSubItem` components, each holding a `SidebarMenuSubButton`, allowing for hierarchical navigation within the sidebar menu.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_30

LANGUAGE: tsx
CODE:
```
<SidebarMenuItem>
  <SidebarMenuButton />
  <SidebarMenuSub>
    <SidebarMenuSubItem>
      <SidebarMenuSubButton />
    </SidebarMenuSubItem>
    <SidebarMenuSubItem>
      <SidebarMenuSubButton />
    </SidebarMenuSubItem>
  </SidebarMenuSub>
</SidebarMenuItem>
```

----------------------------------------

TITLE: Implementing SidebarTrigger with SidebarProvider in React TSX
DESCRIPTION: This example illustrates how to use the `SidebarTrigger` component to toggle the sidebar. It emphasizes that `SidebarTrigger` must be nested within a `SidebarProvider` to function correctly.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_37

LANGUAGE: tsx
CODE:
```
<SidebarProvider>
  <Sidebar />
  <main>
    <SidebarTrigger />
  </main>
</SidebarProvider>
```

----------------------------------------

TITLE: Defining Custom Warning Colors in CSS
DESCRIPTION: This CSS snippet defines custom `--warning` and `--warning-foreground` color variables for both light (`:root`) and dark (`.dark`) themes. It then maps these variables to `--color-warning` and `--color-warning-foreground` within an `@theme inline` block, making them accessible as utility classes in frameworks like Tailwind CSS.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_7

LANGUAGE: css
CODE:
```
:root {
  --warning: oklch(0.84 0.16 84);
  --warning-foreground: oklch(0.28 0.07 46);
}

.dark {
  --warning: oklch(0.41 0.11 46);
  --warning-foreground: oklch(0.99 0.02 95);
}

@theme inline {
  --color-warning: var(--warning);
  --color-warning-foreground: var(--warning-foreground);
}
```

----------------------------------------

TITLE: Initializing shadcn/ui Project with CLI (Bash)
DESCRIPTION: This command initializes a `components.json` file in your project, which is essential for using the shadcn/ui CLI to add and manage components. It sets up the basic configuration required for component generation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Modifying Tailwind CSS for Dark Mode
DESCRIPTION: This snippet modifies the `tailwind.css` file to include the `:root[class~="dark"]` selector. This enables the application of dark mode styles by adding the `dark` class to the HTML element, ensuring proper theme switching.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/remix.mdx#_snippet_0

LANGUAGE: css
CODE:
```
.dark,
:root[class~="dark"] {
  ...;
}
```

----------------------------------------

TITLE: Adding Pagination Controls to DataTable (TypeScript)
DESCRIPTION: This snippet demonstrates how to add interactive pagination controls to the `DataTable` component. It uses shadcn/ui `Button` components and integrates with TanStack Table's `table.previousPage()` and `table.nextPage()` methods, dynamically disabling buttons based on `table.getCanPreviousPage()` and `table.getCanNextPage()`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n\n  return (\n    <div>\n      <div className="rounded-md border">\n        <Table>\n          { // .... }\n        </Table>\n      </div>\n      <div className="flex items-center justify-end space-x-2 py-4">\n        <Button\n          variant="outline"\n          size="sm"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant="outline"\n          size="sm"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  )\n}
```

----------------------------------------

TITLE: Using Alert Component (TypeScript/React)
DESCRIPTION: This example illustrates how to use the `Alert` component in a TypeScript/React application. It includes an icon, a title, and a description, demonstrating the basic structure and content of a typical alert message.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Alert>
  <Terminal className="h-4 w-4" />
  <AlertTitle>Heads up!</AlertTitle>
  <AlertDescription>
    You can add components and dependencies to your app using the cli.
  </AlertDescription>
</Alert>
```

----------------------------------------

TITLE: Basic Drawer Component Usage (TSX)
DESCRIPTION: This example illustrates a fundamental implementation of the Drawer component, showcasing its structure with a trigger button, a header containing a title and description, and a footer with action buttons for submission and cancellation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Drawer>
  <DrawerTrigger>Open</DrawerTrigger>
  <DrawerContent>
    <DrawerHeader>
      <DrawerTitle>Are you absolutely sure?</DrawerTitle>
      <DrawerDescription>This action cannot be undone.</DrawerDescription>
    </DrawerHeader>
    <DrawerFooter>
      <Button>Submit</Button>
      <DrawerClose>
        <Button variant="outline">Cancel</Button>
      </DrawerClose>
    </DrawerFooter>
  </DrawerContent>
</Drawer>
```

----------------------------------------

TITLE: Importing and using shadcn/ui Button component
DESCRIPTION: Demonstrates how to import and use the newly added `Button` component from `~/components/ui/button` within a Remix component. This shows basic usage of a shadcn/ui component in a JSX context.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Button } from "~/components/ui/button"

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Inline Theme Script in Astro
DESCRIPTION: This Astro snippet defines an inline script that detects the user's preferred theme from localStorage or system preferences. It applies the 'dark' class to the document's root element and uses a MutationObserver to persist theme changes back to localStorage, ensuring the theme is remembered across sessions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/astro.mdx#_snippet_0

LANGUAGE: Astro
CODE:
```
--- import '../styles/globals.css' ---\n\n<script is:inline>\n\tconst getThemePreference = () => {\n\t\tif (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {\n\t\t\treturn localStorage.getItem('theme');\n\t\t}\n\t\treturn window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n\t};\n\tconst isDark = getThemePreference() === 'dark';\n\tdocument.documentElement.classList[isDark ? 'add' : 'remove']('dark');\n\n\tif (typeof localStorage !== 'undefined') {\n\t\tconst observer = new MutationObserver(() => {\n\t\t\tconst isDark = document.documentElement.classList.contains('dark');\n\t\t\tlocalStorage.setItem('theme', isDark ? 'dark' : 'light');\n\t\t});\n\t\tobserver.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });\n\t}\n</script>\n\n<html lang="en">\n\t<body>\n          <h1>Astro</h1>\n\t</body>\n</html>
```

----------------------------------------

TITLE: Integrating Toaster Component in Next.js Layout (Manual)
DESCRIPTION: This TypeScript JSX snippet, part of the manual installation process, shows how to import and add the `Toaster` component from `@/components/ui/sonner` into your Next.js `app/layout.tsx` file. It ensures global toast notification rendering.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sonner.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Toaster } from "@/components/ui/sonner"

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Rendering DropdownMenu within SidebarMenuAction (TSX)
DESCRIPTION: This example demonstrates how to integrate a `DropdownMenu` component, triggered by a `SidebarMenuAction`, to display additional menu options. The `DropdownMenuTrigger` is set `asChild` to use the `SidebarMenuAction` as its trigger.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_31

LANGUAGE: tsx
CODE:
```
<SidebarMenuItem>
  <SidebarMenuButton asChild>
    <a href="#">
      <Home />
      <span>Home</span>
    </a>
  </SidebarMenuButton>
  <DropdownMenu>
    <DropdownMenuTrigger asChild>
      <SidebarMenuAction>
        <MoreHorizontal />
      </SidebarMenuAction>
    </DropdownMenuTrigger>
    <DropdownMenuContent side="right" align="start">
      <DropdownMenuItem>
        <span>Edit Project</span>
      </DropdownMenuItem>
      <DropdownMenuItem>
        <span>Delete Project</span>
      </DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
</SidebarMenuItem>
```

----------------------------------------

TITLE: Enabling React Server Components Support (JSON)
DESCRIPTION: This boolean setting enables or disables support for React Server Components. When set to `true`, the CLI automatically adds the `use client` directive to client components, optimizing for RSC environments.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  "rsc": `true` | `false`
}
```

----------------------------------------

TITLE: Configuring shadcn-ui Components with components.json
DESCRIPTION: This `components.json` file configures the shadcn-ui project, specifying styling, Tailwind CSS integration, and import aliases. It also includes the `tsx` flag to opt-out of TypeScript, providing flexibility for JavaScript-only projects.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "style": "default",
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "rsc": false,
  "tsx": false,
  "aliases": {
    "utils": "~/lib/utils",
    "components": "~/components"
  }
}
```

----------------------------------------

TITLE: Installing Command Component via CLI
DESCRIPTION: This command-line interface (CLI) command adds the Shadcn UI Command component to your project. It automates the process of setting up the component and its dependencies.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/command.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add command
```

----------------------------------------

TITLE: Installing Carousel via CLI
DESCRIPTION: Installs the Shadcn UI Carousel component using the command-line interface, adding it to your project with a single command.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/carousel.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add carousel
```

----------------------------------------

TITLE: Installing Form Components via shadcn/ui CLI (Bash)
DESCRIPTION: This command demonstrates how to quickly add the form components to your project using the shadcn/ui command-line interface. It simplifies the installation process by fetching and integrating the necessary files and dependencies.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add form
```

----------------------------------------

TITLE: Installing Shadcn UI Table Component (Bash)
DESCRIPTION: This command uses the `shadcn` CLI to add the basic `<Table />` component to your project, providing the foundational UI elements for building data tables. It sets up the necessary files and dependencies for the component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add table
```

----------------------------------------

TITLE: Overriding Tailwind CSS Variables - JSON
DESCRIPTION: This JSON configuration overrides default Tailwind CSS variables within the `theme` object for a shadcn/ui registry item. It customizes spacing and defines specific breakpoint values for responsive design, providing fine-grained control over layout and typography.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-theme",
  "type": "registry:theme",
  "cssVars": {
    "theme": {
      "spacing": "0.2rem",
      "breakpoint-sm": "640px",
      "breakpoint-md": "768px",
      "breakpoint-lg": "1024px",
      "breakpoint-xl": "1280px",
      "breakpoint-2xl": "1536px"
    }
  }
}
```

----------------------------------------

TITLE: Forcing npm Package Installation with React 19 Compatibility
DESCRIPTION: These commands provide two methods to force the installation of npm packages, bypassing peer dependency warnings related to React 19. The `--force` flag ignores all conflicts, while `--legacy-peer-deps` specifically skips strict peer dependency checks, allowing installation despite unmet requirements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npm i <package> --force

npm i <package> --legacy-peer-deps
```

----------------------------------------

TITLE: Initializing shadcn/ui Project in Next.js (Bash)
DESCRIPTION: This command initializes a new Next.js project or sets up an existing one with shadcn/ui. It prompts the user to choose between a standard Next.js project or a Monorepo setup, configuring the necessary files and dependencies for shadcn/ui integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Integrating Toaster Component in Next.js Layout (CLI)
DESCRIPTION: This TypeScript JSX snippet demonstrates how to import and add the `Toaster` component from `@/components/ui/sonner` into your Next.js `app/layout.tsx` file. It ensures the toast notifications are rendered globally within your application, typically after CLI installation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sonner.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Toaster } from "@/components/ui/sonner"

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Initializing a New shadcn/ui Monorepo Project (CLI)
DESCRIPTION: This command initializes a new shadcn/ui project. When prompted, select the 'Next.js (Monorepo)' option to set up a monorepo structure with 'web' and 'ui' workspaces, using Turborepo as the build system.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@canary init
```

----------------------------------------

TITLE: Basic Usage of Pagination Component in TSX
DESCRIPTION: This example illustrates the fundamental structure for implementing the shadcn-ui Pagination component. It demonstrates how to combine Pagination, PaginationContent, PaginationItem, PaginationPrevious, PaginationLink, PaginationEllipsis, and PaginationNext to create a functional pagination UI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Pagination>
  <PaginationContent>
    <PaginationItem>
      <PaginationPrevious href="#" />
    </PaginationItem>
    <PaginationItem>
      <PaginationLink href="#">1</PaginationLink>
    </PaginationItem>
    <PaginationItem>
      <PaginationEllipsis />
    </PaginationItem>
    <PaginationItem>
      <PaginationNext href="#" />
    </PaginationItem>
  </PaginationContent>
</Pagination>
```

----------------------------------------

TITLE: Using Alert Component with Variants and Content in TSX
DESCRIPTION: This TSX snippet demonstrates how to render the Alert component, specifying its visual variant (default or destructive), and including an icon, title, and description. It showcases the basic structure for displaying a user attention callout with customizable content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Alert variant="default | destructive">
  <Terminal />
  <AlertTitle>Heads up!</AlertTitle>
  <AlertDescription>
    You can add components and dependencies to your app using the cli.
  </AlertDescription>
</Alert>
```

----------------------------------------

TITLE: Basic ScrollArea Component Usage in TSX
DESCRIPTION: This example shows a basic implementation of the `ScrollArea` component, wrapping content that exceeds its defined dimensions. It applies Tailwind CSS classes for styling, setting a fixed height and width, rounded corners, border, and padding.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/scroll-area.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<ScrollArea className="h-[200px] w-[350px] rounded-md border p-4">
  Jokester began sneaking into the castle in the middle of the night and leaving
  jokes all over the place: under the king's pillow, in his soup, even in the
  royal toilet. The king was furious, but he couldn't seem to stop Jokester. And
  then, one day, the people of the kingdom discovered that the jokes left by
  Jokester were so funny that they couldn't help but laugh. And once they
  started laughing, they couldn't stop.
</ScrollArea>
```

----------------------------------------

TITLE: Basic Toggle Group Usage with Single Selection in TSX
DESCRIPTION: This example shows a basic implementation of the ToggleGroup component configured for single selection. It includes three ToggleGroupItem children, each with a distinct value.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle-group.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<ToggleGroup type="single">\n  <ToggleGroupItem value="a">A</ToggleGroupItem>\n  <ToggleGroupItem value="b">B</ToggleGroupItem>\n  <ToggleGroupItem value="c">C</ToggleGroupItem>\n</ToggleGroup>
```

----------------------------------------

TITLE: Configuring shadcn/ui components.json for apps/web (Tailwind CSS v3)
DESCRIPTION: This `components.json` configuration is for a web application (`apps/web`) using Tailwind CSS v3. It includes the schema, style, RSC, and TSX settings, and explicitly points to the `tailwind.config.ts` file located in the shared UI package. Aliases are set up to correctly import components, hooks, and utilities from both the application's local directories and the workspace's shared UI package.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "../../packages/ui/tailwind.config.ts",
    "css": "../../packages/ui/src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "hooks": "@/hooks",
    "lib": "@/lib",
    "utils": "@workspace/ui/lib/utils",
    "ui": "@workspace/ui/components"
  }
}
```

----------------------------------------

TITLE: Configuring shadcn/ui components.json for packages/ui (Tailwind CSS v3)
DESCRIPTION: This configuration defines the `components.json` settings for a shared UI package (`packages/ui`) within a monorepo, specifically for Tailwind CSS v3. It includes the schema, style, RSC, and TSX settings, and explicitly points to the local `tailwind.config.ts` file. Aliases are configured to ensure proper resolution of paths for components, utilities, hooks, and libraries within the workspace.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@workspace/ui/components",
    "utils": "@workspace/ui/lib/utils",
    "hooks": "@workspace/ui/hooks",
    "lib": "@workspace/ui/lib",
    "ui": "@workspace/ui/components"
  }
}
```

----------------------------------------

TITLE: Fetching Project Data for Sidebar Menu with React Query in TSX
DESCRIPTION: This component utilizes React Query to fetch project data. It displays a loading skeleton during data retrieval and renders the project list upon successful data fetching. A placeholder for handling no data is also included.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_44

LANGUAGE: tsx
CODE:
```
function NavProjects() {
  const { data, isLoading } = useQuery()

  if (isLoading) {
    return (
      <SidebarMenu>
        {Array.from({ length: 5 }).map((_, index) => (
          <SidebarMenuItem key={index}>
            <SidebarMenuSkeleton showIcon />
          </SidebarMenuItem>
        ))}
      </SidebarMenu>
    )
  }

  if (!data) {
    return ...
  }

  return (
    <SidebarMenu>
      {data.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Configuring Component Style in `components.json` (JSON)
DESCRIPTION: This `components.json` snippet demonstrates how to set the `style` property, which defines the visual foundation of your components, including shapes, icons, animations, and typography. Users can choose between predefined styles like `default` or `new-york`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#_snippet_21

LANGUAGE: json
CODE:
```
{
  "style": "new-york"
}
```

----------------------------------------

TITLE: Configuring `components.json` for Utility Class Theming
DESCRIPTION: This JSON snippet outlines the configuration in `components.json` to enable theming using direct utility classes. The critical setting is `"cssVariables": false` within the `tailwind` object, which disables the use of CSS variables and relies solely on Tailwind's built-in color utilities. This allows for direct class application like `bg-zinc-950`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "style": "default",
  "rsc": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": false
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/registry/new-york-v4/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

----------------------------------------

TITLE: Configuring Extended Shadcn/ui Custom Style (JSON)
DESCRIPTION: This registry item defines a custom style that extends shadcn/ui's default configuration. When initialized, it installs `@tabler/icons-react`, adds specific blocks and components, integrates a remote editor, sets a custom font, and defines a brand color for both light and dark modes. It outlines the dependencies and CSS variables necessary for the extended style.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-style",
  "type": "registry:style",
  "dependencies": ["@tabler/icons-react"],
  "registryDependencies": [
    "login-01",
    "calendar",
    "https://example.com/r/editor.json"
  ],
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif"
    },
    "light": {
      "brand": "20 14.3% 4.1%"
    },
    "dark": {
      "brand": "20 14.3% 4.1%"
    }
  }
}
```

----------------------------------------

TITLE: Defining Chart Configuration with Labels and Colors
DESCRIPTION: This TypeScript snippet demonstrates how to define a `ChartConfig` object. This configuration holds human-readable strings like labels, icons, and color tokens, which are used for theming and displaying meaningful information within the chart.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { type ChartConfig } from "@/components/ui/chart"

const chartConfig = {
  desktop: {
    label: "Desktop",
    color: "#2563eb",
  },
  mobile: {
    label: "Mobile",
    color: "#60a5fa",
  },
} satisfies ChartConfig
```

----------------------------------------

TITLE: Configure Component Style in shadcn/ui
DESCRIPTION: This `components.json` entry shows how to specify the desired visual style for your shadcn/ui components, such as `new-york`. The chosen style dictates the default shapes, icons, animations, and typography used throughout the project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/changelog.mdx#_snippet_21

LANGUAGE: json
CODE:
```
{
  "style": "new-york"
}
```

----------------------------------------

TITLE: Basic Usage of Slider Component in TSX
DESCRIPTION: This TSX snippet provides an example of rendering the Slider component with essential props. It sets an initial defaultValue, defines the max allowable value, and specifies the step increment for the slider.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/slider.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Slider defaultValue={[33]} max={100} step={1} />
```

----------------------------------------

TITLE: Basic Carousel Component Usage
DESCRIPTION: Demonstrates the fundamental structure for implementing the Carousel component, including the main container, content wrapper, and individual carousel items, along with previous and next navigation buttons.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/carousel.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Carousel>
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
  <CarouselPrevious />
  <CarouselNext />
</Carousel>
```

----------------------------------------

TITLE: Creating Custom Sidebar Trigger with useSidebar Hook in React TSX
DESCRIPTION: This snippet shows how to build a custom sidebar toggle button using the `useSidebar` hook. It accesses the `toggleSidebar` function from the hook to programmatically control the sidebar's visibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_38

LANGUAGE: tsx
CODE:
```
import { useSidebar } from "@/components/ui/sidebar"

export function CustomTrigger() {
  const { toggleSidebar } = useSidebar()

  return <button onClick={toggleSidebar}>Toggle Sidebar</button>
}
```

----------------------------------------

TITLE: Adding Button Component (shadcn/ui)
DESCRIPTION: Adds the 'button' component from the shadcn/ui library to the current project. This command fetches the component's code and integrates it into your local codebase for customization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Adding shadcn/ui Components (CLI)
DESCRIPTION: This command adds a specified shadcn/ui component to the project. When run from an application directory (e.g., 'apps/web'), the CLI intelligently installs the component files under 'packages/ui' and updates import paths within the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npx shadcn@canary add [COMPONENT]
```

----------------------------------------

TITLE: Defining Chart Data and Configuration for Custom Legend Names (TSX)
DESCRIPTION: This snippet defines `chartData` and `chartConfig` objects. `chartData` contains browser-specific visitor statistics and fill colors, while `chartConfig` maps browser keys to human-readable labels and colors. These structures are used to provide data and configuration for chart components, enabling custom legend names based on the 'browser' key.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_30

LANGUAGE: TSX
CODE:
```
const chartData = [
  { browser: "chrome", visitors: 187, fill: "var(--color-chrome)" },
  { browser: "safari", visitors: 200, fill: "var(--color-safari)" }
]

const chartConfig = {
  chrome: {
    label: "Chrome",
    color: "hsl(var(--chart-1))"
  },
  safari: {
    label: "Safari",
    color: "hsl(var(--chart-2))"
  }
} satisfies ChartConfig
```

----------------------------------------

TITLE: Creating a new Laravel project with React
DESCRIPTION: This command initializes a new Laravel project named 'my-app' and configures it with Inertia.js and React, setting up the necessary frontend scaffolding for a modern web application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/laravel.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
laravel new my-app --react
```

----------------------------------------

TITLE: Installing Hover Card Component via CLI
DESCRIPTION: This command uses the shadcn/ui CLI to automatically add the Hover Card component and its dependencies to your project, simplifying the installation process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add hover-card
```

----------------------------------------

TITLE: Installing Skeleton Component via CLI (Bash)
DESCRIPTION: This command uses the `shadcn` CLI to automatically add the Skeleton component to your project, handling dependencies and file creation. It's the recommended and most straightforward installation method.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/skeleton.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add skeleton
```

----------------------------------------

TITLE: Installing Input OTP via CLI
DESCRIPTION: This command uses the shadcn/ui CLI to add the Input OTP component and its dependencies to your project, simplifying the installation process by automating file creation and configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/input-otp.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add input-otp
```

----------------------------------------

TITLE: Installing Label Component via CLI (Bash)
DESCRIPTION: This snippet demonstrates how to quickly add the `Label` component to your project using the `shadcn/ui` command-line interface. It simplifies the setup process by automating dependency installation and component file creation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/label.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add label
```

----------------------------------------

TITLE: Importing and Using shadcn/ui Button in Remix Route (TSX)
DESCRIPTION: Demonstrates how to import the newly added `Button` component from the `~/components/ui/button` path and use it within a Remix route component. This shows a basic usage of a shadcn/ui component in a React context.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/remix.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Button } from "~/components/ui/button"

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Basic Pagination Component Usage in TSX
DESCRIPTION: This snippet demonstrates the fundamental structure for rendering a Pagination component in a TSX application. It includes common elements like previous and next navigation links, a page link (e.g., '1'), and an ellipsis for omitted pages, all wrapped within PaginationContent.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/pagination.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Pagination>
  <PaginationContent>
    <PaginationItem>
      <PaginationPrevious href="#" />
    </PaginationItem>
    <PaginationItem>
      <PaginationLink href="#">1</PaginationLink>
    </PaginationItem>
    <PaginationItem>
      <PaginationEllipsis />
    </PaginationItem>
    <PaginationItem>
      <PaginationNext href="#" />
    </PaginationItem>
  </PaginationContent>
</Pagination>
```

----------------------------------------

TITLE: Importing and Using shadcn/ui Button Component in Next.js (TSX)
DESCRIPTION: This TypeScript React snippet demonstrates how to import and use the `Button` component from `shadcn/ui` within a Next.js `app/page.tsx` file. It imports the `Button` from the specified path and renders it within a simple `div` element, showcasing basic component integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/next.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Rendering Progress Component with Value
DESCRIPTION: This TSX snippet illustrates how to render the `Progress` component, setting its current completion status. The `value` prop accepts a numerical percentage (e.g., 33 for 33% complete) to visually represent progress.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/progress.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Progress value={33} />
```

----------------------------------------

TITLE: Basic Carousel Usage
DESCRIPTION: Demonstrates the fundamental structure of the shadcn/ui Carousel component, including the main container, content wrapper, individual items, and navigation buttons for basic implementation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Carousel>
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
  <CarouselPrevious />
  <CarouselNext />
</Carousel>
```

----------------------------------------

TITLE: Implementing Basic Select Component (TypeScript/React)
DESCRIPTION: This example demonstrates the basic structure for rendering a shadcn/ui Select component. It includes a `SelectTrigger` with a placeholder, and `SelectContent` populated with `SelectItem` options for theme selection, providing a functional dropdown.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Select>
  <SelectTrigger className="w-[180px]">
    <SelectValue placeholder="Theme" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value="light">Light</SelectItem>
    <SelectItem value="dark">Dark</SelectItem>
    <SelectItem value="system">System</SelectItem>
  </SelectContent>
</Select>
```

----------------------------------------

TITLE: Implementing a Basic Single Accordion (TypeScript/React)
DESCRIPTION: This TypeScript/React example showcases a minimal implementation of the Accordion component, configured as a single type and collapsible. It includes a single AccordionItem with a Trigger for interaction and Content to display information.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
<Accordion type="single" collapsible>
  <AccordionItem value="item-1">
    <AccordionTrigger>Is it accessible?</AccordionTrigger>
    <AccordionContent>
      Yes. It adheres to the WAI-ARIA design pattern.
    </AccordionContent>
  </AccordionItem>
</Accordion>
```

----------------------------------------

TITLE: Rendering Basic Outline Button in TSX
DESCRIPTION: This TSX snippet demonstrates how to render a `Button` component with an 'outline' variant, displaying 'Button' as its text content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Button variant="outline">Button</Button>
```

----------------------------------------

TITLE: Integrating Toaster Component in Root Layout (TypeScript/React)
DESCRIPTION: This TypeScript/React snippet imports the `Toaster` component from `@/components/ui/sonner` and integrates it into the `RootLayout` of a Next.js application. Placing `Toaster` at the root ensures it's available globally for displaying toast notifications across the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Toaster } from "@/components/ui/sonner"

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Configuring ESLint parserOptions for Type-Aware Linting in JavaScript
DESCRIPTION: This snippet demonstrates how to configure the `parserOptions` within an ESLint configuration file. It sets the ECMAScript version, source type, and specifies the project's TypeScript configuration files, which are crucial for enabling type-aware linting rules provided by `@typescript-eslint` plugins. This setup is a prerequisite for advanced type-checking linting.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/vite-with-tailwind/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default {
  // other rules...
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: ['./tsconfig.json', './tsconfig.node.json'],
    tsconfigRootDir: __dirname,
  },
}
```

----------------------------------------

TITLE: Basic Command Menu Structure in React
DESCRIPTION: This code demonstrates the fundamental structure of a `Command` menu, including an input field, a list to display results, and categorized command items. It shows how to use `CommandInput`, `CommandList`, `CommandEmpty`, `CommandGroup`, `CommandItem`, and `CommandSeparator` to build a functional command interface.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Command>
  <CommandInput placeholder="Type a command or search..." />
  <CommandList>
    <CommandEmpty>No results found.</CommandEmpty>
    <CommandGroup heading="Suggestions">
      <CommandItem>Calendar</CommandItem>
      <CommandItem>Search Emoji</CommandItem>
      <CommandItem>Calculator</CommandItem>
    </CommandGroup>
    <CommandSeparator />
    <CommandGroup heading="Settings">
      <CommandItem>Profile</CommandItem>
      <CommandItem>Billing</CommandItem>
      <CommandItem>Settings</CommandItem>
    </CommandGroup>
  </CommandList>
</Command>
```

----------------------------------------

TITLE: Basic Hover Card Component Usage in TSX
DESCRIPTION: This example shows the fundamental structure for using the Hover Card component, where `HoverCardTrigger` defines the interactive element and `HoverCardContent` contains the content displayed on hover.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<HoverCard>
  <HoverCardTrigger>Hover</HoverCardTrigger>
  <HoverCardContent>
    The React Framework – created and maintained by @vercel.
  </HoverCardContent>
</HoverCard>
```

----------------------------------------

TITLE: Wrapping Root Layout with ThemeProvider in React (TSX)
DESCRIPTION: This snippet demonstrates how to integrate the `ThemeProvider` component into the main application file, typically `App.tsx`. By wrapping the application's children with `ThemeProvider`, the theme context becomes available throughout the component tree. It also shows how to set a `defaultTheme` and a `storageKey` for theme persistence.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { ThemeProvider } from "@/components/theme-provider"

function App() {
  return (
    <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
      {children}
    </ThemeProvider>
  )
}

export default App
```

----------------------------------------

TITLE: Implementing Email Filtering in React Table DataTable Component (TypeScript)
DESCRIPTION: This snippet modifies the `DataTable` component to include email filtering functionality. It introduces `ColumnFiltersState` and `getFilteredRowModel` from `@tanstack/react-table` and adds an `Input` component from Shadcn UI, allowing users to filter the table data based on the 'email' column.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_12

LANGUAGE: TypeScript
CODE:
```
"use client"

import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
      columnFilters,
    },
  })

  return (
    <div>
      <div className="flex items-center py-4">
        <Input
          placeholder="Filter emails..."
          value={(table.getColumn("email")?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn("email")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
      </div>
      <div className="rounded-md border">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Initializing shadcn/ui in Remix Project (Bash)
DESCRIPTION: Executes the `shadcn` CLI's `init` command to set up shadcn/ui within the current project. This command guides the user through configuration questions to integrate the UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/remix.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Accessing Carousel API and Tracking Slide State (TypeScript/React)
DESCRIPTION: This snippet demonstrates how to obtain and use the Carousel API instance to track the current slide and total slide count. It uses React's `useState` and `useEffect` hooks to manage the API instance and update state on 'select' events, providing dynamic feedback on the carousel's position.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/carousel.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { type CarouselApi } from "@/components/ui/carousel"

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()
  const [current, setCurrent] = React.useState(0)
  const [count, setCount] = React.useState(0)

  React.useEffect(() => {
    if (!api) {
      return
    }

    setCount(api.scrollSnapList().length)
    setCurrent(api.selectedScrollSnap() + 1)

    api.on("select", () => {
      setCurrent(api.selectedScrollSnap() + 1)
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Using useFloating Hook (Line Highlight)
DESCRIPTION: Demonstrates the usage of the `useFloating` hook from `@floating-ui/react` to manage the positioning of two elements. Line 4, where `refs` and `floatingStyles` are destructured, is highlighted to draw attention to key variables for element positioning.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { useFloating } from "@floating-ui/react"

function MyComponent() {
  const { refs, floatingStyles } = useFloating()

  return (
    <>
      <div ref={refs.setReference} />
      <div ref={refs.setFloating} style={floatingStyles} />
    </>
  )
}
```

----------------------------------------

TITLE: Defining Registry Item Dependencies - JSON
DESCRIPTION: This snippet shows the `registryDependencies` property, used to specify dependencies on other items within the same or different registries. It supports referencing shadcn/ui components by name or custom registry items by URL, with automatic resolution by the CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  "registryDependencies": [
    "button",
    "input",
    "select",
    "https://example.com/r/editor.json"
  ]
}
```

----------------------------------------

TITLE: Configure shadcn/ui for CSS Variable Theming
DESCRIPTION: To enable theming using CSS variables, set `tailwind.cssVariables` to `true` in your `components.json` file. This configuration instructs the CLI to generate components that utilize CSS variables for styling, promoting a more dynamic theming approach.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/changelog.mdx#_snippet_18

LANGUAGE: json
CODE:
```
{
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  }
}
```

----------------------------------------

TITLE: Initializing Shadcn UI Project (Bash)
DESCRIPTION: This command initializes the `components.json` file in your project, setting up the necessary configuration for shadcn/ui components. It is required only if you are using the CLI to add components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/components-json.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Migrating Sheet Component 'position' Prop to 'side' in JSX
DESCRIPTION: This code snippet illustrates the migration of the `position` prop to the `side` prop for the `Sheet` component. The `side` prop now controls the placement of the sheet (e.g., 'right'), replacing the deprecated `position` prop.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#_snippet_25

LANGUAGE: diff
CODE:
```
- <Sheet position="right" />
+ <Sheet side="right" />
```

----------------------------------------

TITLE: Toggling Sidebar with SidebarTrigger (TSX)
DESCRIPTION: This example illustrates the basic usage of `SidebarTrigger` to create a button that toggles the sidebar's visibility. It emphasizes the requirement for `SidebarTrigger` to be nested within a `SidebarProvider`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_35

LANGUAGE: tsx
CODE:
```
<SidebarProvider>
  <Sidebar />
  <main>
    <SidebarTrigger />
  </main>
</SidebarProvider>
```

----------------------------------------

TITLE: Running `shadcn diff` Command for Updates (Bash)
DESCRIPTION: This command initiates the experimental `diff` feature in shadcn/ui, allowing users to check for and track upstream updates to their installed components. It's the primary way to identify what has changed in the upstream repository.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
npx shadcn diff
```

----------------------------------------

TITLE: Updating tsconfig.app.json for path aliases
DESCRIPTION: Similar to `tsconfig.json`, this snippet updates `tsconfig.app.json` with `baseUrl` and `paths` under `compilerOptions`. This ensures that IDEs correctly resolve the `@/*` alias for paths within the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
{
  "compilerOptions": {
    // ...
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
    // ...
  }
}
```

----------------------------------------

TITLE: Configuring Path Aliases in tsconfig.json
DESCRIPTION: This JSON configuration snippet updates the `compilerOptions` in `tsconfig.json` to define a `baseUrl` and `paths`. Specifically, it maps the `@/*` alias to `./*`, enabling absolute imports from the project root and simplifying module resolution for components and utilities.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/manual.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  }
}
```

----------------------------------------

TITLE: Defining CSS Variables for Chart Theming (CSS)
DESCRIPTION: Defines custom CSS variables (`--chart-1`, `--chart-2`) within the `@layer base` for light and dark themes. These variables provide a centralized way to manage chart colors, promoting consistency and easy theme switching.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_15

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --chart-1: oklch(0.646 0.222 41.116);
    --chart-2: oklch(0.6 0.118 184.704);
  }

  .dark: {
    --chart-1: oklch(0.488 0.243 264.376);
    --chart-2: oklch(0.696 0.17 162.48);
  }
}
```

----------------------------------------

TITLE: Defining Chart Data and Config for Legend Customization (TSX)
DESCRIPTION: This snippet defines sample `chartData` and `chartConfig` objects, tailored for customizing chart legends. `chartData` provides browser-specific visitor counts, while `chartConfig` maps browser keys to display labels and colors, specifically for use with chart legends to customize names.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_27

LANGUAGE: tsx
CODE:
```
const chartData = [
  { browser: "chrome", visitors: 187, fill: "var(--color-chrome)" },
  { browser: "safari", visitors: 200, fill: "var(--color-safari)" }
]

const chartConfig = {
  chrome: {
    label: "Chrome",
    color: "hsl(var(--chart-1))"
  },
  safari: {
    label: "Safari",
    color: "hsl(var(--chart-2))"
  }
} satisfies ChartConfig
```

----------------------------------------

TITLE: Configuring TypeScript Path Aliases for TanStack Start
DESCRIPTION: This `tsconfig.json` configuration adds a `paths` alias, mapping `@/*` to `./app/*`. This allows for cleaner absolute imports within the project, such as `import appCss from "@/styles/app.css?url"`, improving code readability and maintainability.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "moduleResolution": "Bundler",
    "module": "ESNext",
    "target": "ES2022",
    "skipLibCheck": true,
    "strictNullChecks": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./app/*"]
    }
  }
}
```

----------------------------------------

TITLE: Integrating Autoplay Plugin with Shadcn UI Carousel
DESCRIPTION: This snippet shows how to add plugins to the Shadcn UI Carousel component using the `plugins` prop. It specifically demonstrates integrating the `Autoplay` plugin from `embla-carousel-autoplay` to enable automatic slide transitions with a specified delay.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#_snippet_12

LANGUAGE: ts
CODE:
```
import Autoplay from "embla-carousel-autoplay"

export function Example() {
  return (
    <Carousel
      plugins={[
        Autoplay({
          delay: 2000,
        }),
      ]}
    >
      // ...
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Adding Row Selection to Column Definitions
DESCRIPTION: This snippet modifies the `columns.tsx` file to introduce a new column definition for row selection. It utilizes a `Checkbox` component for both the header (to select/deselect all rows on the current page) and individual cells (to select/deselect specific rows), enabling interactive row selection within the table.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
"use client"

import { ColumnDef } from "@tanstack/react-table"

import { Badge } from "@/components/ui/badge"
import { Checkbox } from "@/components/ui/checkbox"

export const columns: ColumnDef<Payment>[] = [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
]
```

----------------------------------------

TITLE: Basic Select Component Usage (TSX)
DESCRIPTION: Demonstrates a basic implementation of the Select component, allowing users to choose between 'Light', 'Dark', and 'System' themes. It includes a trigger, value display, and content options, showcasing a typical use case for the component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/select.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Select>
  <SelectTrigger className="w-[180px]">
    <SelectValue placeholder="Theme" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value="light">Light</SelectItem>
    <SelectItem value="dark">Dark</SelectItem>
    <SelectItem value="system">System</SelectItem>
  </SelectContent>
</Select>
```

----------------------------------------

TITLE: Installing Navigation Menu via CLI (Bash)
DESCRIPTION: Installs the Shadcn UI Navigation Menu component using the command-line interface, adding it to your project with a single command.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add navigation-menu
```

----------------------------------------

TITLE: Installing Skeleton Component via CLI (Bash)
DESCRIPTION: This command uses the `npx` utility to add the Skeleton component to your project via the shadcn/ui CLI. It automates the setup process, including file creation and dependency management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/skeleton.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add skeleton
```

----------------------------------------

TITLE: Installing Label Component via CLI (Bash)
DESCRIPTION: This command uses the `shadcn` CLI to automatically add the Label component and its dependencies to your project, simplifying the installation process by handling file creation and configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add label
```

----------------------------------------

TITLE: Basic Tooltip Component Usage in TSX
DESCRIPTION: Demonstrates a basic implementation of the Tooltip component, wrapping a trigger element and displaying custom content when the trigger receives keyboard focus or the mouse hovers over it.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/tooltip.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Tooltip>
  <TooltipTrigger>Hover</TooltipTrigger>
  <TooltipContent>
    <p>Add to library</p>
  </TooltipContent>
</Tooltip>
```

----------------------------------------

TITLE: Creating a Basic Horizontal Resizable Panel Group in TypeScript/React
DESCRIPTION: This code demonstrates the fundamental structure for creating a horizontal group of resizable panels using `ResizablePanelGroup`, `ResizablePanel`, and `ResizableHandle` components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/resizable.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<ResizablePanelGroup direction="horizontal">
  <ResizablePanel>One</ResizablePanel>
  <ResizableHandle />
  <ResizablePanel>Two</ResizablePanel>
</ResizablePanelGroup>
```

----------------------------------------

TITLE: Importing Card Components (TypeScript/React)
DESCRIPTION: This snippet shows the necessary import statement for using the Shadcn UI Card components in a TypeScript React project. It imports various sub-components like `Card`, `CardHeader`, `CardTitle`, `CardDescription`, `CardContent`, and `CardFooter` from the local UI components path.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
```

----------------------------------------

TITLE: Importing Pagination Components in TSX
DESCRIPTION: This code snippet shows the necessary import statements for using the various Pagination sub-components provided by the shadcn/ui library within a TypeScript React (TSX) file. These imports are essential before utilizing the components in your application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/pagination.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious
} from "@/components/ui/pagination"
```

----------------------------------------

TITLE: Rendering DropdownMenu within SidebarMenuAction (TSX)
DESCRIPTION: This example demonstrates how to integrate a `DropdownMenu` with a `SidebarMenuAction` component. The `SidebarMenuAction` acts as the trigger for the dropdown, revealing a list of actions like 'Edit Project' or 'Delete Project' when clicked. The dropdown content is positioned to the right and aligned to the start.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_29

LANGUAGE: tsx
CODE:
```
<SidebarMenuItem>
  <SidebarMenuButton asChild>
    <a href="#">
      <Home />
      <span>Home</span>
    </a>
  </SidebarMenuButton>
  <DropdownMenu>
    <DropdownMenuTrigger asChild>
      <SidebarMenuAction>
        <MoreHorizontal />
      </SidebarMenuAction>
    </DropdownMenuTrigger>
    <DropdownMenuContent side="right" align="start">
      <DropdownMenuItem>
        <span>Edit Project</span>
      </DropdownMenuItem>
      <DropdownMenuItem>
        <span>Delete Project</span>
      </DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
</SidebarMenuItem>
```

----------------------------------------

TITLE: Overriding Tailwind CSS Variables in Theme - JSON
DESCRIPTION: This JSON configuration demonstrates how to override default Tailwind CSS variables within the shadcn/ui theme. It allows for fine-grained control over spacing, breakpoints, and other design system values, ensuring consistency with a project's specific design requirements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_7

LANGUAGE: JSON
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-theme",
  "type": "registry:theme",
  "cssVars": {
    "theme": {
      "spacing": "0.2rem",
      "breakpoint-sm": "640px",
      "breakpoint-md": "768px",
      "breakpoint-lg": "1024px",
      "breakpoint-xl": "1280px",
      "breakpoint-2xl": "1536px"
    }
  }
}
```

----------------------------------------

TITLE: Defining Chart Data and Config for Tooltip Customization (TSX)
DESCRIPTION: This snippet defines sample `chartData` and `chartConfig` objects. `chartData` contains browser-specific visitor counts and fill colors, while `chartConfig` maps data keys to display labels and colors, specifically for use with chart tooltips to customize labels and names.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_23

LANGUAGE: tsx
CODE:
```
const chartData = [
  { browser: "chrome", visitors: 187, fill: "var(--color-chrome)" },
  { browser: "safari", visitors: 200, fill: "var(--color-safari)" }
]

const chartConfig = {
  visitors: {
    label: "Total Visitors"
  },
  chrome: {
    label: "Chrome",
    color: "hsl(var(--chart-1))"
  },
  safari: {
    label: "Safari",
    color: "hsl(var(--chart-2))"
  }
} satisfies ChartConfig
```

----------------------------------------

TITLE: Adding Sidebar CSS Variables (CLI Method) - CSS
DESCRIPTION: These CSS custom properties define the color palette for the sidebar component, including background, foreground, primary, accent, border, and ring colors for both light and dark themes. They should be added to your global CSS file, typically `app/globals.css`, to ensure proper theming of the sidebar.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_1

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --sidebar: oklch(0.985 0 0);
    --sidebar-foreground: oklch(0.145 0 0);
    --sidebar-primary: oklch(0.205 0 0);
    --sidebar-primary-foreground: oklch(0.985 0 0);
    --sidebar-accent: oklch(0.97 0 0);
    --sidebar-accent-foreground: oklch(0.205 0 0);
    --sidebar-border: oklch(0.922 0 0);
    --sidebar-ring: oklch(0.708 0 0);
  }

  .dark {
    --sidebar: oklch(0.205 0 0);
    --sidebar-foreground: oklch(0.985 0 0);
    --sidebar-primary: oklch(0.488 0.243 264.376);
    --sidebar-primary-foreground: oklch(0.985 0 0);
    --sidebar-accent: oklch(0.269 0 0);
    --sidebar-accent-foreground: oklch(0.985 0 0);
    --sidebar-border: oklch(1 0 0 / 10%);
    --sidebar-ring: oklch(0.439 0 0);
  }
}
```

----------------------------------------

TITLE: Adding Custom Base Styles - JSON
DESCRIPTION: This JSON configuration defines custom base CSS styles using the `@layer base` directive for a shadcn/ui registry item. It allows developers to set global styles for HTML elements like `h1` and `h2`, ensuring consistent typography across the application based on defined CSS variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_8

LANGUAGE: JSON
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-style",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "h1": {
        "font-size": "var(--text-2xl)"
      },
      "h2": {
        "font-size": "var(--text-xl)"
      }
    }
  }
}
```

----------------------------------------

TITLE: Enabling Pagination in TanStack React Table (TSX)
DESCRIPTION: This snippet modifies the `useReactTable` hook configuration to enable automatic pagination. It includes `getCoreRowModel` and `getPaginationRowModel` to handle row and pagination logic, respectively. By default, this sets up pages of 10 rows.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  useReactTable,
} from "@tanstack/react-table"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  // ...
}
```

----------------------------------------

TITLE: Registering a Component in registry.json (JSON)
DESCRIPTION: This snippet illustrates how to add a component definition to the `registry.json` file. Each component entry requires a name, type, title, description, and an array of files. For each file, you must specify its relative `path` from the project root and its `type`, ensuring the registry accurately reflects your component's structure and location.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/getting-started.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "name": "acme",
  "homepage": "https://acme.com",
  "items": [
    {
      "name": "hello-world",
      "type": "registry:block",
      "title": "Hello World",
      "description": "A simple hello world component.",
      "files": [
        {
          "path": "registry/new-york/hello-world/hello-world.tsx",
          "type": "registry:component"
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Apply Theming with CSS Variables
DESCRIPTION: This example shows how components are themed using CSS variables, referencing `bg-background` and `text-foreground`. This approach allows for centralized color management and easier global theme changes across the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/changelog.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
<div className="bg-background text-foreground" />
```

----------------------------------------

TITLE: Configuring shadcn/ui Aliases for Shared UI Package (JSON)
DESCRIPTION: This `components.json` configuration file for the 'packages/ui' workspace defines aliases specific to the shared UI components package. It ensures that internal imports within the UI package itself, as well as external references from other workspaces, correctly resolve to the components, hooks, and utilities provided by this package, maintaining consistency across the monorepo.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/monorepo.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@workspace/ui/components",
    "utils": "@workspace/ui/lib/utils",
    "hooks": "@workspace/ui/hooks",
    "lib": "@workspace/ui/lib",
    "ui": "@workspace/ui/components"
  }
}
```

----------------------------------------

TITLE: Basic Context Menu Usage (TSX)
DESCRIPTION: Demonstrates the basic structure for implementing a Context Menu. It shows how to wrap content with `ContextMenuTrigger` to enable right-click functionality and define menu items within `ContextMenuContent`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/context-menu.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<ContextMenu>
  <ContextMenuTrigger>Right click</ContextMenuTrigger>
  <ContextMenuContent>
    <ContextMenuItem>Profile</ContextMenuItem>
    <ContextMenuItem>Billing</ContextMenuItem>
    <ContextMenuItem>Team</ContextMenuItem>
    <ContextMenuItem>Subscription</ContextMenuItem>
  </ContextMenuContent>
</ContextMenu>
```

----------------------------------------

TITLE: Applying Badge Styles to Link Component (TSX)
DESCRIPTION: Applies badge styling to a `Link` component using the `badgeVariants` helper. This creates a link that visually appears as an `outline` badge, combining navigation functionality with the aesthetic of a badge.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
<Link className={badgeVariants({ variant: "outline" })}>Badge</Link>
```

----------------------------------------

TITLE: Basic Usage of Popover Component in TSX
DESCRIPTION: This example shows the fundamental structure for using the Popover component. It includes a PopoverTrigger to activate the popover and PopoverContent to display its rich content, demonstrating a basic interactive popover.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Popover>
  <PopoverTrigger>Open</PopoverTrigger>
  <PopoverContent>Place content for the popover here.</PopoverContent>
</Popover>
```

----------------------------------------

TITLE: Basic Calendar Component Usage with State
DESCRIPTION: Demonstrates how to integrate the Calendar component into a React application, managing the selected date using `useState` for single date selection.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/calendar.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
const [date, setDate] = React.useState<Date | undefined>(new Date())

return (
  <Calendar
    mode="single"
    selected={date}
    onSelect={setDate}
    className="rounded-lg border"
  />
)
```

----------------------------------------

TITLE: Rendering Sidebar Menu Skeleton with React Server Components in TSX
DESCRIPTION: This component provides a loading skeleton for the `SidebarMenu` when data is being fetched. It uses `Array.from` to render multiple `SidebarMenuItem` components, each containing a `SidebarMenuSkeleton` to indicate a loading state.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_40

LANGUAGE: tsx
CODE:
```
function NavProjectsSkeleton() {
  return (
    <SidebarMenu>
      {Array.from({ length: 5 }).map((_, index) => (
        <SidebarMenuItem key={index}>
          <SidebarMenuSkeleton showIcon />
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Adding Custom Brand Colors to Style (JSON)
DESCRIPTION: This JSON configuration defines a `shadcn/ui` style that adds a custom `brand` color to the default framework. It specifies the `brand` color using `oklch` format for both light and dark modes, allowing for specific color overrides while retaining other default styles. This is useful for integrating brand-specific colors.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-style",
  "type": "registry:style",
  "cssVars": {
    "light": {
      "brand": "oklch(0.99 0.00 0)"
    },
    "dark": {
      "brand": "oklch(0.14 0.00 286)"
    }
  }
}
```

----------------------------------------

TITLE: Adding shadcn/ui Button Component
DESCRIPTION: This command uses the `shadcn` CLI to add the `Button` component to the project, automatically generating the necessary component files and dependencies.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Defining Custom Theme Variables - JSON
DESCRIPTION: This JSON configuration defines custom CSS variables within the `theme` object for a shadcn/ui registry item. It sets specific font families for headings and a custom box shadow for cards, allowing for consistent theming across the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-theme",
  "type": "registry:theme",
  "cssVars": {
    "theme": {
      "font-heading": "Inter, sans-serif",
      "shadow-card": "0 0 0 1px rgba(0, 0, 0, 0.1)"
    }
  }
}
```

----------------------------------------

TITLE: Installing Pagination Component via CLI
DESCRIPTION: This snippet demonstrates how to quickly add the shadcn-ui Pagination component to your project using the command-line interface (CLI). It simplifies the setup process by automating the necessary file additions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add pagination
```

----------------------------------------

TITLE: Applying Theme Colors to Chart Components (Bar)
DESCRIPTION: This TypeScript/React snippet shows how to apply a theme color to a chart component, specifically a `<Bar>` element. The `fill` prop references a CSS variable (e.g., `--color-desktop`), allowing the bar's color to be dynamically controlled by the defined theme.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_21

LANGUAGE: tsx
CODE:
```
<Bar dataKey="desktop" fill="var(--color-desktop)" />
```

----------------------------------------

TITLE: Styling Sidebar Based on Collapsible State in React
DESCRIPTION: This example demonstrates how to conditionally hide a `SidebarGroup` component when the `Sidebar` is in 'icon' collapsible mode. It uses Tailwind CSS's `group-data-[collapsible=icon]:hidden` utility class, leveraging data attributes to apply styling based on the sidebar's internal state.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_45

LANGUAGE: tsx
CODE:
```
<Sidebar collapsible="icon">
  <SidebarContent>
    <SidebarGroup className="group-data-[collapsible=icon]:hidden" />
  </SidebarContent>
</Sidebar>
```

----------------------------------------

TITLE: Adding Components with shadcn CLI (Bash)
DESCRIPTION: This command is used to add specific components and their required dependencies to an existing shadcn project. Users can specify the component name to integrate it into their application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add [component]
```

----------------------------------------

TITLE: Installing Resizable Component via Shadcn CLI (Bash)
DESCRIPTION: This command uses the `npx shadcn` CLI tool to automatically add the `resizable` component to your project. It handles dependency installation and component file generation, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add resizable
```

----------------------------------------

TITLE: Configuring PostCSS for Tailwind CSS
DESCRIPTION: Creates a `postcss.config.js` file to integrate Tailwind CSS and Autoprefixer as PostCSS plugins. This configuration ensures your CSS is correctly processed by these tools.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#_snippet_4

LANGUAGE: js
CODE:
```
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

----------------------------------------

TITLE: Importing Chart Legend Components (TSX)
DESCRIPTION: Imports the `ChartLegend` and `ChartLegendContent` components from the `@/components/ui/chart` module, which are essential for adding a legend to a chart.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
import { ChartLegend, ChartLegendContent } from "@/components/ui/chart"
```

----------------------------------------

TITLE: Importing Chart Tooltip Components (TSX)
DESCRIPTION: Imports the `ChartTooltip` and `ChartTooltipContent` components from `@/components/ui/chart`, which are necessary for creating and customizing interactive tooltips for chart elements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_21

LANGUAGE: tsx
CODE:
```
import { ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
```

----------------------------------------

TITLE: Using shadcn/ui Button in TanStack Router (TSX)
DESCRIPTION: This TypeScript JSX snippet demonstrates how to import and use the `Button` component within a TanStack Router route file. It defines a route for the root path ('/') and renders the `Button` component inside a simple `div`. This shows the typical pattern for integrating shadcn/ui components into your TanStack Router application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack-router.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { createFileRoute } from "@tanstack/react-router"

import { Button } from "@/components/ui/button"

export const Route = createFileRoute("/")({
  component: App,
})

function App() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Integrating ThemeProvider into Remix Root Layout
DESCRIPTION: This TSX code integrates `ThemeProvider` from `remix-themes` into the root layout of a Remix application. It defines a loader to retrieve the current theme from the session and wraps the main `App` component with `ThemeProvider`, passing the `specifiedTheme` and a `themeAction` route for theme changes. The `App` component dynamically applies the theme class to the `html` element.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import clsx from "clsx"
import { PreventFlashOnWrongTheme, ThemeProvider, useTheme } from "remix-themes"

import { themeSessionResolver } from "./sessions.server"

// Return the theme from the session storage using the loader
export async function loader({ request }: LoaderFunctionArgs) {
  const { getTheme } = await themeSessionResolver(request)
  return {
    theme: getTheme(),
  }
}
// Wrap your app with ThemeProvider.
// `specifiedTheme` is the stored theme in the session storage.
// `themeAction` is the action name that's used to change the theme in the session storage.
export default function AppWithProviders() {
  const data = useLoaderData<typeof loader>()
  return (
    <ThemeProvider specifiedTheme={data.theme} themeAction="/action/set-theme">
      <App />
    </ThemeProvider>
  )
}

export function App() {
  const data = useLoaderData<typeof loader>()
  const [theme] = useTheme()
  return (
    <html lang="en" className={clsx(theme)}>
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <PreventFlashOnWrongTheme ssrTheme={Boolean(data.theme)} />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Theming Shadcn UI Sidebar with CSS Variables
DESCRIPTION: This CSS snippet defines custom properties for theming the Shadcn UI sidebar, including background, foreground, primary, accent, border, and ring colors for both light and dark modes. These variables allow for easy customization of the sidebar's appearance, independent of the main application's theme.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_44

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 0 0% 98%;
    --sidebar-primary-foreground: 240 5.9% 10%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}
```

----------------------------------------

TITLE: Disabling CSS Variables in components.json
DESCRIPTION: Configures `components.json` to disable CSS variables for Tailwind CSS theming by setting `tailwind.cssVariables` to `false`. This means styling will rely directly on utility classes rather than CSS variables, offering a different approach to theme management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  "style": "default",
  "rsc": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": false
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/registry/new-york-v4/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

----------------------------------------

TITLE: Initialize shadcn/ui Project with New CLI
DESCRIPTION: This command initiates the shadcn/ui project setup process using the latest CLI version. Running `npx shadcn@latest init` prompts the user with a series of questions to configure the `components.json` file, tailoring the project to specific requirements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/changelog.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Importing and Using shadcn/ui Button in React Router
DESCRIPTION: This TypeScript JSX snippet demonstrates how to import the `Button` component from `shadcn/ui` and use it within a React Router `Home` component. It also includes the `meta` function for defining route-specific metadata like title and description.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Button } from "~/components/ui/button"

import type { Route } from "./+types/home"

export function meta({}: Route.MetaArgs) {
  return [
    { title: "New React Router App" },
    { name: "description", content: "Welcome to React Router!" }
  ]
}

export default function Home() {
  return (
    <div className="flex flex-col items-center justify-center min-h-svh">
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing Basic Chart Legend
DESCRIPTION: This TypeScript/React snippet demonstrates the basic usage of the `ChartLegend` component. By setting its `content` prop to an instance of `ChartLegendContent`, a default legend is rendered, automatically referencing colors from the chart configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_29

LANGUAGE: tsx
CODE:
```
<ChartLegend content={<ChartLegendContent />} />
```

----------------------------------------

TITLE: Making a Sidebar Group Collapsible in TSX
DESCRIPTION: This example shows how to make a `SidebarGroup` collapsible by wrapping it with the `Collapsible` component. It uses `CollapsibleTrigger` within `SidebarGroupLabel` to control the collapsible state and `CollapsibleContent` to house the group's content, allowing users to expand or collapse sections.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_24

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  return (
    <Collapsible defaultOpen className="group/collapsible">
      <SidebarGroup>
        <SidebarGroupLabel asChild>
          <CollapsibleTrigger>
            Help
            <ChevronDown className="ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180" />
          </CollapsibleTrigger>
        </SidebarGroupLabel>
        <CollapsibleContent>
          <SidebarGroupContent />
        </CollapsibleContent>
      </SidebarGroup>
    </Collapsible>
  )
}
```

----------------------------------------

TITLE: Configuring Vite for path aliases and plugins
DESCRIPTION: This `vite.config.ts` configuration imports necessary modules and defines the Vite build configuration. It includes `react()` and `tailwindcss()` plugins and sets up a path alias `@` to resolve to the `src` directory, enabling absolute imports.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import path from "path"
import tailwindcss from "@tailwindcss/vite"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})
```

----------------------------------------

TITLE: Configuring Tailwind CSS Theming with CSS Variables (JSON)
DESCRIPTION: This setting controls whether components use CSS variables (`true`) or Tailwind CSS utility classes (`false`) for theming. This choice is permanent and requires re-installation of components to change.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "tailwind": {
    "cssVariables": `true` | `false`
  }
}
```

----------------------------------------

TITLE: Installing Progress Component via Shadcn CLI
DESCRIPTION: This command utilizes the `shadcn` CLI to automatically add the `Progress` component and its required dependencies to your project, streamlining the setup process. It's the recommended method for quick integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/progress.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add progress
```

----------------------------------------

TITLE: Adding Button Component to shadcn/ui Project (Bash)
DESCRIPTION: This command adds the `Button` component from `shadcn/ui` to the current project. It fetches the component's code and integrates it into the project's component directory, making it available for import and use.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/next.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Installing Pagination Component via CLI
DESCRIPTION: This snippet provides the command-line interface (CLI) command to quickly add the Pagination component to your project using the shadcn/ui tool. It's the recommended and most straightforward installation method.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/pagination.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add pagination
```

----------------------------------------

TITLE: Adding a shadcn/ui Component (Bash)
DESCRIPTION: This command uses the shadcn/ui CLI to add the `Button` component to the project. It fetches the component's code and integrates it into the project's component directory, making it available for import and use.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/astro.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Installing Calendar Component via CLI (Bash)
DESCRIPTION: This `npx` command uses the shadcn/ui CLI to automatically add the `Calendar` component and its required dependencies to your project, simplifying the installation process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add calendar
```

----------------------------------------

TITLE: Installing Select Component via CLI (Bash)
DESCRIPTION: Installs the Select component using the shadcn/ui CLI, adding it to your project with a single command. This is the recommended and most straightforward installation method.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/select.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add select
```

----------------------------------------

TITLE: Applying Themed Colors to Chart Data (TSX)
DESCRIPTION: Shows how to embed themed colors directly within the `chartData` array by including a `fill` property that references CSS variables (e.g., `var(--color-chrome)`). This allows individual data points or series to inherit colors from the defined theme.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
const chartData = [
  { browser: "chrome", visitors: 275, fill: "var(--color-chrome)" },
  { browser: "safari", visitors: 200, fill: "var(--color-safari)" }
]
```

----------------------------------------

TITLE: Basic Radio Group Usage Example in TSX
DESCRIPTION: This code provides a foundational example of implementing the `RadioGroup` component. It demonstrates how to structure multiple `RadioGroupItem` elements, each paired with a `Label`, to create a functional and accessible set of radio buttons.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/radio-group.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<RadioGroup defaultValue="option-one">
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="option-one" id="option-one" />
    <Label htmlFor="option-one">Option One</Label>
  </div>
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="option-two" id="option-two" />
    <Label htmlFor="option-two">Option Two</Label>
  </div>
</RadioGroup>
```

----------------------------------------

TITLE: Creating Theme Session Resolver in Remix
DESCRIPTION: This snippet defines a session storage and a theme session resolver using `remix-themes`. It configures a cookie-based session storage to persist the user's theme preference, setting domain and secure flags conditionally based on the production environment.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/remix.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { createThemeSessionResolver } from "remix-themes"

// You can default to 'development' if process.env.NODE_ENV is not set
const isProduction = process.env.NODE_ENV === "production"

const sessionStorage = createCookieSessionStorage({
  cookie: {
    name: "theme",
    path: "/",
    httpOnly: true,
    sameSite: "lax",
    secrets: ["s3cr3t"],
    // Set domain and secure only if in production
    ...(isProduction
      ? { domain: "your-production-domain.com", secure: true }
      : {}),
  },
})

export const themeSessionResolver = createThemeSessionResolver(sessionStorage)
```

----------------------------------------

TITLE: Creating Theme Session Resolver in Remix
DESCRIPTION: This TypeScript snippet sets up a session storage using `createCookieSessionStorage` and then creates a theme session resolver with `createThemeSessionResolver` from `remix-themes`. It configures a secure cookie for theme persistence, adapting its domain and security settings based on the production environment.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { createThemeSessionResolver } from "remix-themes"

// You can default to 'development' if process.env.NODE_ENV is not set
const isProduction = process.env.NODE_ENV === "production"

const sessionStorage = createCookieSessionStorage({
  cookie: {
    name: "theme",
    path: "/",
    httpOnly: true,
    sameSite: "lax",
    secrets: ["s3cr3t"],
    // Set domain and secure only if in production
    ...(isProduction
      ? { domain: "your-production-domain.com", secure: true }
      : {}),
  },
})

export const themeSessionResolver = createThemeSessionResolver(sessionStorage)
```

----------------------------------------

TITLE: Basic Navigation Menu Structure - TSX
DESCRIPTION: This snippet provides a basic example of how to structure a Navigation Menu component. It demonstrates the use of `NavigationMenu`, `NavigationMenuList`, `NavigationMenuItem`, `NavigationMenuTrigger`, `NavigationMenuContent`, and `NavigationMenuLink` to create a simple menu item with a dropdown.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/navigation-menu.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<NavigationMenu>
  <NavigationMenuList>
    <NavigationMenuItem>
      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>
      <NavigationMenuContent>
        <NavigationMenuLink>Link</NavigationMenuLink>
      </NavigationMenuContent>
    </NavigationMenuItem>
  </NavigationMenuList>
</NavigationMenu>
```

----------------------------------------

TITLE: Implementing SidebarFooter with User Dropdown in TSX
DESCRIPTION: This snippet demonstrates how to add a sticky `SidebarFooter` to the sidebar, wrapping it within `SidebarProvider` and `Sidebar`. It includes a `DropdownMenu` for user-related actions like account, billing, and sign out, positioned at the top of the footer.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  return (
    <SidebarProvider>
      <Sidebar>
        <SidebarHeader />
        <SidebarContent />
        <SidebarFooter>
          <SidebarMenu>
            <SidebarMenuItem>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuButton>
                    <User2 /> Username
                    <ChevronUp className="ml-auto" />
                  </SidebarMenuButton>
                </DropdownMenuTrigger>
                <DropdownMenuContent
                  side="top"
                  className="w-[--radix-popper-anchor-width]"
                >
                  <DropdownMenuItem>
                    <span>Account</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Billing</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Sign out</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarFooter>
      </Sidebar>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Configuring Sortable and Hideable Column Header in TSX
DESCRIPTION: This snippet shows how to define a column in a React Table setup, specifically for the 'email' accessorKey. It integrates the `DataTableColumnHeader` component to make the column header sortable and hideable, enhancing user interaction with the table columns.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_17

LANGUAGE: TSX
CODE:
```
export const columns = [
  {
    accessorKey: "email",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Email" />
    ),
  },
]
```

----------------------------------------

TITLE: Importing and Using shadcn/ui Button Component (TSX)
DESCRIPTION: This TypeScript JSX (TSX) snippet demonstrates how to import the `Button` component from the `components/ui/button` path and render it within a Next.js functional component. It shows a basic usage of the component with 'Click me' as its children.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Integrating Dropdown Menu with Breadcrumb Item in TypeScript/React
DESCRIPTION: This example shows how to embed a `DropdownMenu` within a `BreadcrumbItem`, enabling a collapsible menu for navigation options directly within the breadcrumb path. This allows for more complex navigation where a single breadcrumb segment can reveal multiple sub-options.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/breadcrumb.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

...

<BreadcrumbItem>
  <DropdownMenu>
    <DropdownMenuTrigger>
      Components
    </DropdownMenuTrigger>
    <DropdownMenuContent align="start">
      <DropdownMenuItem>Documentation</DropdownMenuItem>
      <DropdownMenuItem>Themes</DropdownMenuItem>
      <DropdownMenuItem>GitHub</DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
</BreadcrumbItem>
```

----------------------------------------

TITLE: Displaying Dark Mode Toggle in Astro
DESCRIPTION: This Astro snippet demonstrates how to integrate the `ModeToggle` React component into an Astro page. It imports the component and renders it using `client:load`, ensuring the interactive toggle is loaded and hydrated on the client-side for full functionality.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/astro.mdx#_snippet_2

LANGUAGE: Astro
CODE:
```
---
import '../styles/globals.css'
import { ModeToggle } from '@/components/ModeToggle';
---

<!-- Inline script -->

<html lang="en">
	<body>
      <h1>Astro</h1>
      <ModeToggle client:load />
	</body>
</html>
```

----------------------------------------

TITLE: Listening to Carousel Events with API Instance (TypeScript/React)
DESCRIPTION: This example illustrates how to subscribe to carousel events, specifically the 'select' event, using the API instance. It leverages React's `useEffect` hook to attach an event listener once the API is available, allowing custom actions to be performed when a new slide is selected.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/carousel.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import { type CarouselApi } from "@/components/ui/carousel"

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()

  React.useEffect(() => {
    if (!api) {
      return
    }

    api.on("select", () => {
      // Do something on select.
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Initializing shadcn/ui Project
DESCRIPTION: This command runs the `shadcn/ui` CLI initialization process, which prompts the user with questions to configure the `components.json` file, setting up the project for `shadcn/ui` components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Initializing shadcn/ui in a project (Bash)
DESCRIPTION: This command runs the `shadcn` CLI's `init` command to configure shadcn/ui within the current project. It sets up the necessary configuration files and dependencies, preparing the project to use shadcn/ui components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/react-router.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Updating React Peer Dependencies in package.json (Diff)
DESCRIPTION: This snippet shows the necessary changes in a `package.json` file to include React 19 as a peer dependency for both `react` and `react-dom`. This update is crucial for packages to officially support and be compatible with React 19 environments.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/react-19.mdx#_snippet_0

LANGUAGE: Diff
CODE:
```
"peerDependencies": {
-  "react": "^16.8 || ^17.0 || ^18.0",
+  "react": "^16.8 || ^17.0 || ^18.0 || ^19.0",
-  "react-dom": "^16.8 || ^17.0 || ^18.0"
+  "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0"
}
```

----------------------------------------

TITLE: Importing CartesianGrid for Recharts - TypeScript
DESCRIPTION: This snippet imports the `CartesianGrid` component from the `recharts` library, along with `Bar` and `BarChart`. `CartesianGrid` is essential for adding a grid overlay to the chart, enhancing readability by providing visual alignment.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { Bar, BarChart, CartesianGrid } from "recharts"
```

----------------------------------------

TITLE: Committing Changes Before Component Update - Bash
DESCRIPTION: This command sequence stages all current changes and commits them with a placeholder message. It is a recommended step before running CLI commands that might overwrite existing components, ensuring a safe rollback point.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/tailwind-v4.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
git add .
git commit -m "..."
```

----------------------------------------

TITLE: Updating Shadcn UI Components via CLI in Bash
DESCRIPTION: This snippet provides the `npx shadcn@latest` command used to update all existing Shadcn UI components. The `--all` and `--overwrite` flags ensure that all components are refreshed, potentially overwriting local modifications, hence the prior recommendation to commit changes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#_snippet_11

LANGUAGE: Bash
CODE:
```
npx shadcn@latest add --all --overwrite
```

----------------------------------------

TITLE: Applying Themed Colors with Tailwind CSS (TSX)
DESCRIPTION: Illustrates how to apply themed colors using Tailwind CSS by referencing CSS variables (e.g., `--color-desktop`) within the `fill` utility class. This method integrates chart theming seamlessly with Tailwind's utility-first approach.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_20

LANGUAGE: tsx
CODE:
```
<LabelList className="fill-[--color-desktop]" />
```

----------------------------------------

TITLE: Configuring Tailwind CSS for Accordion Animations (JavaScript)
DESCRIPTION: This JavaScript configuration snippet, intended for tailwind.config.js, defines custom keyframes for accordion-down and accordion-up animations. These animations provide smooth expand and collapse transitions for the Accordion component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#_snippet_2

LANGUAGE: js
CODE:
```
/** @type {import('tailwindcss').Config} */
module.exports = {
  theme: {
    extend: {
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" }
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" }
        }
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out"
      }
    }
  }
}
```

----------------------------------------

TITLE: Adding Actions Column to TanStack React Table (TSX)
DESCRIPTION: This snippet updates the `ColumnDef` for a TanStack React Table to include an 'actions' column. The cell renders a `DropdownMenu` component, allowing users to perform actions like copying a payment ID or viewing details. It demonstrates accessing row data via `row.original`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
"use client"

import { ColumnDef } from "@tanstack/react-table"
import { MoreHorizontal } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export const columns: ColumnDef<Payment>[] = [
  // ...
  {
    id: "actions",
    cell: ({ row }) => {
      const payment = row.original

      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem
              onClick={() => navigator.clipboard.writeText(payment.id)}
            >
              Copy payment ID
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem>View customer</DropdownMenuItem>
            <DropdownMenuItem>View payment details</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      )
    },
  },
  // ...
]
```

----------------------------------------

TITLE: Importing and using shadcn/ui Button component in React
DESCRIPTION: This `tsx` code demonstrates how to import and use the `Button` component provided by shadcn/ui within a React application. It shows a basic functional component `App` that renders the `Button` with some styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

function App() {
  return (
    <div className="flex min-h-svh flex-col items-center justify-center">
      <Button>Click me</Button>
    </div>
  )
}

export default App
```

----------------------------------------

TITLE: Configuring Global CSS Variables for Theming in shadcn/ui (CSS)
DESCRIPTION: This CSS snippet defines a comprehensive set of CSS variables for both light and dark themes, utilizing `oklch` for color definitions. It imports `tailwindcss` and `tw-animate-css`, establishes a custom variant for dark mode, and maps these variables to a generic `@theme inline` block. Additionally, it applies base styles for borders and text/background colors using `@layer base`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/manual.mdx#_snippet_2

LANGUAGE: CSS
CODE:
```
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

----------------------------------------

TITLE: Basic Dropdown Menu Usage in TSX
DESCRIPTION: This example shows the fundamental structure of a Shadcn UI Dropdown Menu, including the trigger, content, label, separator, and individual menu items, demonstrating a simple interactive menu.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<DropdownMenu>
  <DropdownMenuTrigger>Open</DropdownMenuTrigger>
  <DropdownMenuContent>
    <DropdownMenuLabel>My Account</DropdownMenuLabel>
    <DropdownMenuSeparator />
    <DropdownMenuItem>Profile</DropdownMenuItem>
    <DropdownMenuItem>Billing</DropdownMenuItem>
    <DropdownMenuItem>Team</DropdownMenuItem>
    <DropdownMenuItem>Subscription</DropdownMenuItem>
  </DropdownMenuContent>
</DropdownMenu>
```

----------------------------------------

TITLE: Applying CSS Variables to Chart Configuration (TSX)
DESCRIPTION: Updates the `chartConfig` to reference CSS variables (e.g., `var(--chart-1)`) for color definitions. This approach allows charts to dynamically adapt to defined CSS themes, ensuring consistent styling across the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
const chartConfig = {
  desktop: {
    label: "Desktop",
    color: "var(--chart-1)"
  },
  mobile: {
    label: "Mobile",
    color: "var(--chart-2)"
  }
} satisfies ChartConfig
```

----------------------------------------

TITLE: Applying Utility Classes for Background Color (TSX)
DESCRIPTION: This example illustrates the use of direct Tailwind CSS utility classes for theming, specifically for background colors. It shows how to apply different colors for light (`bg-zinc-950`) and dark (`dark:bg-white`) modes when CSS variables are not enabled, providing an alternative theming approach.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<div className="bg-zinc-950 dark:bg-white" />
```

----------------------------------------

TITLE: Displaying Selected Row Count in Data Table (TSX)
DESCRIPTION: This snippet demonstrates how to display the number of selected rows and total filtered rows using the `table.getFilteredSelectedRowModel()` and `table.getFilteredRowModel()` APIs from `react-table`. It provides a dynamic count of selected items, typically used in a table footer or status bar.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
<div className="text-muted-foreground flex-1 text-sm">
  {table.getFilteredSelectedRowModel().rows.length} of{" "}
  {table.getFilteredRowModel().rows.length} row(s) selected.
</div>
```

----------------------------------------

TITLE: Wrapping Main Content for Inset Sidebar Variant in TSX
DESCRIPTION: Demonstrates the required usage of the `SidebarInset` component when the `Sidebar` is set to the `inset` variant. `SidebarInset` ensures that the main content correctly adjusts its layout to accommodate the inset sidebar.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
<SidebarProvider>
  <Sidebar variant="inset" />
  <SidebarInset>
    <main>{children}</main>
  </SidebarInset>
</SidebarProvider>
```

----------------------------------------

TITLE: Displaying Loading State with SidebarMenuSkeleton (TSX)
DESCRIPTION: This function demonstrates how to use `SidebarMenuSkeleton` to create a loading state for a `SidebarMenu`. It renders multiple `SidebarMenuItem` components, each containing a `SidebarMenuSkeleton`, to simulate the appearance of the menu while data is being fetched, commonly used with data fetching libraries like SWR or react-query.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_33

LANGUAGE: tsx
CODE:
```
function NavProjectsSkeleton() {
  return (
    <SidebarMenu>
      {Array.from({ length: 5 }).map((_, index) => (
        <SidebarMenuItem key={index}>
          <SidebarMenuSkeleton />
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Applying Theme Colors to Chart Data Objects
DESCRIPTION: This TypeScript/React snippet illustrates how to embed theme colors directly within the `chartData` array. Each data object can have a `fill` property that references a CSS variable, enabling individual data points or series to adopt colors from the defined theme.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_22

LANGUAGE: tsx
CODE:
```
const chartData = [
  { browser: "chrome", visitors: 275, fill: "var(--color-chrome)" },
  { browser: "safari", visitors: 200, fill: "var(--color-safari)" },
]
```

----------------------------------------

TITLE: Adding 'alert-dialog' Component (Bash)
DESCRIPTION: This is an example of using the `add` command to specifically add the 'alert-dialog' component to the project. It demonstrates the concrete syntax for adding a particular component by name.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn add alert-dialog
```

----------------------------------------

TITLE: Creating a Link that Looks like a Badge using asChild (TSX)
DESCRIPTION: This snippet illustrates how to use the `asChild` prop with the `Badge` component to render another component, like a Next.js `Link`, with the styling of a badge. This allows for semantic HTML while maintaining the desired visual appearance.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/badge.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Link } from "next/link"

import { Badge } from "@/components/ui/badge"

export function LinkAsBadge() {
  return (
    <Badge asChild>
      <Link href="/">Badge</Link>
    </Badge>
  )
}
```

----------------------------------------

TITLE: Installing Registry Item with shadcn CLI
DESCRIPTION: This command demonstrates how to install a registry item using the `shadcn` CLI's `add` command. It requires the full URL of the registry item, which can be a local or remote registry entry, to fetch and integrate the component into the project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
npx shadcn@latest add http://localhost:3000/r/hello-world.json
```

----------------------------------------

TITLE: Configuring TypeScript Paths in tsconfig.json
DESCRIPTION: This configuration snippet for `tsconfig.json` sets the base URL for module resolution to the current directory and defines a path alias `@/*` to resolve to the `src` directory. This is crucial for absolute imports within the project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/astro.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
{
  "compilerOptions": {
    // ...
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
    // ...
  }
}
```

----------------------------------------

TITLE: Configure Base Color for shadcn/ui Project
DESCRIPTION: This `components.json` snippet demonstrates how to set the base color for your project, in this case, `zinc`. The chosen base color influences the default palette for components, and its application depends on whether `cssVariables` is true or false.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/changelog.mdx#_snippet_19

LANGUAGE: json
CODE:
```
{
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": false
  }
}
```

----------------------------------------

TITLE: Configuring Component Style in components.json (JSON)
DESCRIPTION: This configuration sets the visual style for components, with 'new-york' being the recommended option. This setting is permanent and cannot be altered after the initial project setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "style": "new-york"
}
```

----------------------------------------

TITLE: Implementing Email Filtering in TanStack Table (TSX)
DESCRIPTION: This code snippet updates the DataTable component to include a search input for filtering emails. It introduces 'columnFilters' state, integrates 'getFilteredRowModel' into 'useReactTable', and adds an Input component that sets the filter value for the 'email' column based on user input.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
"use client"\n\nimport * as React from "react"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from "@tanstack/react-table"\n\nimport { Button } from "@/components/ui/button"\nimport { Input } from "@/components/ui/input"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      sorting,\n      columnFilters,\n    },\n  })\n\n  return (\n    <div>\n      <div className="flex items-center py-4">\n        <Input\n          placeholder="Filter emails..."\n          value={(table.getColumn("email")?.getFilterValue() as string) ?? ""}\n          onChange={(event) =>\n            table.getColumn("email")?.setFilterValue(event.target.value)\n          }\n          className="max-w-sm"\n        />\n      </div>\n      <div className="rounded-md border">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}
```

----------------------------------------

TITLE: Listening to Carousel Events in React
DESCRIPTION: This example illustrates how to subscribe to carousel events, specifically the 'select' event, using the API instance obtained via `setApi`. The `React.useEffect` hook ensures the event listener is set up once the API is available, allowing custom logic to execute when a new slide is selected.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import { type CarouselApi } from "@/components/ui/carousel"

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()

  React.useEffect(() => {
    if (!api) {
      return
    }

    api.on("select", () => {
      // Do something on select.
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Disabling React Server Components (RSC) in `components.json` (JSON)
DESCRIPTION: To opt out of React Server Components support, set the `rsc` property to `false` in your `components.json` file. This configuration automatically manages the `use client` directive for components, making them compatible with frameworks that do not support RSC.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#_snippet_20

LANGUAGE: json
CODE:
```
{
  "rsc": false
}
```

----------------------------------------

TITLE: Creating TanStack Router Project (Bash)
DESCRIPTION: This command initializes a new TanStack Router project named 'my-app'. It uses the file-router template, includes Tailwind CSS, and pre-configures shadcn/ui add-ons, streamlining the project setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-tsrouter-app@latest my-app --template file-router --tailwind --add-ons shadcn
```

----------------------------------------

TITLE: Styling Sidebar Menu Action Based on Button Active State
DESCRIPTION: This snippet illustrates how to make a `SidebarMenuAction` visible when its associated `SidebarMenuButton` is active. It utilizes Tailwind CSS's `peer-data-[active=true]/menu-button:opacity-100` class, which targets the `SidebarMenuAction` based on the `active` data attribute of its `SidebarMenuButton` peer.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_46

LANGUAGE: tsx
CODE:
```
<SidebarMenuItem>
  <SidebarMenuButton />
  <SidebarMenuAction className="peer-data-[active=true]/menu-button:opacity-100" />
</SidebarMenuItem>
```

----------------------------------------

TITLE: Adding ChartTooltip to Recharts Bar Chart - TypeScript
DESCRIPTION: This snippet integrates the `ChartTooltip` component into the `BarChart`, providing interactive hover functionality. It uses `ChartTooltipContent` as its child, which renders the actual tooltip content based on the hovered data point, enhancing user experience.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
<ChartContainer config={chartConfig} className="h-[200px] w-full">
  <BarChart accessibilityLayer data={chartData}>
    <CartesianGrid vertical={false} />
    <XAxis
      dataKey="month"
      tickLine={false}
      tickMargin={10}
      axisLine={false}
      tickFormatter={(value) => value.slice(0, 3)}
    />
    <ChartTooltip content={<ChartTooltipContent />} />
    <Bar dataKey="desktop" fill="var(--color-desktop)" radius={4} />
    <Bar dataKey="mobile" fill="var(--color-mobile)" radius={4} />
  </BarChart>
</ChartContainer>
```