import logging\nimport logging.handlers\n\nhandler = logging.handlers.RotatingFileHandler('api/server.log', maxBytes=1000000, backupCount=5)\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\nlogger.addHandler(handler)\n\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect\nfrom typing import List\nimport json\nimport logging\n\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Allows all origins\n    allow_credentials=True,\n    allow_methods=[\"*\"],  # Allows all methods\n    allow_headers=[\"*\"]  # Allows all headers\n)\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\nmanager = ConnectionManager()\n\n@app.websocket(\"/ws/chat\")\nasync def websocket_endpoint(websocket: WebSocket):\n\n    logging.info(\"WebSocket connected\")\n\n    try:\n\n        while True:\n\n            data = await websocket.receive_text()\n\n            try:\n                message = json.loads(data)\n            except json.JSONDecodeError:\n                error_response = {\n                    \"type\": \"error\",\n                    \"message\": \"Invalid JSON format\"\n                }\n                await manager.send_personal_message(json.dumps(error_response), websocket)\n                continue\n\n            logging.info(f\"Received message: {message}\")\n            if not isinstance(message, dict):\n                error_response = {\n                    \"type\": \"error\",\n                    \"message\": \"Message must be a JSON object\"\n                }\n                await manager.send_personal_message(json.dumps(error_response), websocket)\n                continue\n\n            if message.get(\"type\") == \"start_learning\":\n                if \"content\" not in message:\n                    error_response = {\n                        \"type\": \"error\",\n                        \"message\": \"Missing required field: content\"\n                    }\n                    await manager.send_personal_message(json.dumps(error_response), websocket)\n                    continue\n\n                try:\n                    # For now, let's directly use the PreAssessmentAgent without Temporal\n                    from agents.pre_assessment_agent import PreAssessmentAgent\n                    agent = PreAssessmentAgent()\n                    assessment = await agent.assess(message.get(\"content\"))\n                    response = {\n                        \"type\": \"assessment\",\n                        \"content\": assessment\n                    }\n                    logging.info(f\"Sending response: {response}\")\n                    await manager.send_personal_message(json.dumps(response), websocket)\n                except Exception as e:\n                    logging.error(f\"Error processing message: {e}")\n                    error_response = {\n                        \"type\": \"error\",\n                        \"content\": str(e)\n                    }\n                    await manager.send_personal_message(json.dumps(error_response), websocket)\n            else:\n                error_response = {\n                    \"type\": \"error\",\n                    \"message\": f\"Invalid message type: {message.get('type')}\"\n                }\n                await manager.send_personal_message(json.dumps(error_response), websocket)\n\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Welcome to Personal Tutor AI System\"}\n\n@app.get(\"/health\")\nasync def health_check():\n    return {\"status\": \"healthy\"}